"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[454],{2185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(4848),i=t(8453),s=t(8987);t(1023),t(290);const a={title:"Scheduler",sidebar_label:"Scheduler"},o="Configurable closed-loop optimization with Ax Scheduler",l={id:"tutorials/scheduler/index",title:"Scheduler",description:"<LinkButtons",source:"@site/../docs/tutorials/scheduler/index.mdx",sourceDirName:"tutorials/scheduler",slug:"/tutorials/scheduler/",permalink:"/Ax/docs/tutorials/scheduler/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Scheduler",sidebar_label:"Scheduler"},sidebar:"tutorials",previous:{title:"Generation Strategy",permalink:"/Ax/docs/tutorials/generation_strategy/"},next:{title:"Modular `BoTorchModel`",permalink:"/Ax/docs/tutorials/modular_botax/"}},c={},d=[{value:"Contents:",id:"contents",level:3},{value:"1. <code>Scheduler</code> and external systems for trial evaluation",id:"1-scheduler-and-external-systems-for-trial-evaluation",level:2},{value:"2. Set up a mock external execution system",id:"2-set-up-a-mock-external-execution-system",level:2},{value:"3. Set up an experiment according to the mock external system",id:"3-set-up-an-experiment-according-to-the-mock-external-system",level:2},{value:"4. Setting up a <code>Scheduler</code>",id:"4-setting-up-a-scheduler",level:2},{value:"4A. Auto-selecting a generation strategy",id:"4a-auto-selecting-a-generation-strategy",level:3},{value:"4B. Optional: Defining a plotting function",id:"4b-optional-defining-a-plotting-function",level:3},{value:"5. Running the optimization",id:"5-running-the-optimization",level:2},{value:"6. Leveraging SQL storage and experiment resumption",id:"6-leveraging-sql-storage-and-experiment-resumption",level:2},{value:"7. Configuring the scheduler with <code>SchedulerOptions</code>, like early stopping",id:"7-configuring-the-scheduler-with-scheduleroptions-like-early-stopping",level:2},{value:"8. Advanced functionality",id:"8-advanced-functionality",level:2},{value:"8a. Reporting results to an external system",id:"8a-reporting-results-to-an-external-system",level:3},{value:"8b. Using <code>run_trials_and_yield_results</code> generator method",id:"8b-using-run_trials_and_yield_results-generator-method",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.A,{githubUrl:"",colabUrl:""}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"configurable-closed-loop-optimization-with-ax-scheduler",children:["Configurable closed-loop optimization with Ax ",(0,r.jsx)(n.code,{children:"Scheduler"})]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["We recommend reading through the\n",(0,r.jsx)(n.a,{href:"https://ax.dev/tutorials/gpei_hartmann_developer.html",children:'"Developer API" tutorial'})," before\ngetting started with the ",(0,r.jsx)(n.code,{children:"Scheduler"}),", as using it in this tutorial will require an Ax\n",(0,r.jsx)(n.code,{children:"Experiment"})," and an understanding of the experiment's subcomponents like the search\nspace and the runner."]})}),"\n",(0,r.jsx)(n.h3,{id:"contents",children:"Contents:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scheduler and external systems for trial evalution"})," \u2013\u2013\xa0overview of how scheduler\nworks with an external system to run a closed-loop optimization."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set up a mock external system"})," \u2013\u2013 creating a dummy external system client, which\nwill be used to illustrate a scheduler setup in this tutorial."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set up an experiment according to the mock external system"})," \u2013\u2013\xa0set up a runner\nthat deploys trials to the dummy external system from part 2 and a metric that\nfetches trial results from that system, then leverage those runner and metric and set\nup an experiment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set up a scheduler"}),", given an experiment.","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Create a scheduler subclass to poll trial status."}),"\n",(0,r.jsx)(n.li,{children:"Set up a generation strategy using an auto-selection utility."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Running the optimization"})," via ",(0,r.jsx)(n.code,{children:"Scheduler.run_n_trials"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leveraging SQL storage and experiment resumption"})," \u2013\u2013 resuming an experiment in one\nline of code."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuring the scheduler"})," \u2013\u2013\xa0overview of the many options scheduler provides to\nconfigure the closed-loop down to granular detail."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Advanced functionality"}),":","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Reporting results to an external system during the optimization."}),"\n",(0,r.jsxs)(n.li,{children:["Using ",(0,r.jsx)(n.code,{children:"Scheduler.run_trials_and_yield_results"})," to run the optimization via a\ngenerator method."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"1-scheduler-and-external-systems-for-trial-evaluation",children:["1. ",(0,r.jsx)(n.code,{children:"Scheduler"})," and external systems for trial evaluation"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Scheduler"})," is a closed-loop manager class in Ax that continuously deploys trial runs to\nan arbitrary external system in an asynchronous fashion, polls their status from that\nsystem, and leverages known trial results to generate more trials."]}),"\n",(0,r.jsxs)(n.p,{children:["Key features of the ",(0,r.jsx)(n.code,{children:"Scheduler"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maintains user-set concurrency limits for trials run in parallel, keep track of\ntolerated level of failed trial runs, and 'oversee' the optimization in other ways,"}),"\n",(0,r.jsxs)(n.li,{children:["Leverages an Ax ",(0,r.jsx)(n.code,{children:"Experiment"})," for optimization setup (an optimization config with\nmetrics, a search space, a runner for trial evaluations),"]}),"\n",(0,r.jsxs)(n.li,{children:["Uses an Ax ",(0,r.jsx)(n.code,{children:"GenerationStrategy"})," for flexible specification of an optimization\nalgorithm used to generate new trials to run,"]}),"\n",(0,r.jsx)(n.li,{children:"Supports SQL storage and allows for easy resumption of stored experiments."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This scheme summarizes how the scheduler interacts with any external system used to run\ntrial evaluations:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"attachment:image-2.png",alt:"image-2.png"})}),"\n",(0,r.jsx)(n.h2,{id:"2-set-up-a-mock-external-execution-system",children:"2. Set up a mock external execution system"}),"\n",(0,r.jsx)(n.p,{children:"An example of an 'external system' running trial evaluations could be a remote server\nexecuting scheduled jobs, a subprocess conducting ML training runs, an engine running\nphysics simulations, etc. For the sake of example here, let us assume a dummy external\nsystem with the following client:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from random import randint\nfrom time import time\nfrom typing import Any, Dict, NamedTuple, Union\n\nfrom ax.core.base_trial import TrialStatus\nfrom ax.utils.measurement.synthetic_functions import branin\n\n\nclass MockJob(NamedTuple):\n    """Dummy class to represent a job scheduled on `MockJobQueue`."""\n\n    id: int\n    parameters: Dict[str, Union[str, float, int, bool]]\n\n\nclass MockJobQueueClient:\n    """Dummy class to represent a job queue where the Ax `Scheduler` will\n    deploy trial evaluation runs during optimization.\n    """\n\n    jobs: Dict[str, MockJob] = {}\n\n    def schedule_job_with_parameters(\n        self, parameters: Dict[str, Union[str, float, int, bool]]\n    ) -> int:\n        """Schedules an evaluation job with given parameters and returns job ID."""\n        # Code to actually schedule the job and produce an ID would go here;\n        # using timestamp in microseconds as dummy ID for this example.\n        job_id = int(time() * 1e6)\n        self.jobs[job_id] = MockJob(job_id, parameters)\n        return job_id\n\n    def get_job_status(self, job_id: int) -> TrialStatus:\n        """ "Get status of the job by a given ID. For simplicity of the example,\n        return an Ax `TrialStatus`.\n        """\n        job = self.jobs[job_id]\n        # Instead of randomizing trial status, code to check actual job status\n        # would go here.\n        if randint(0, 3) > 0:\n            return TrialStatus.COMPLETED\n        return TrialStatus.RUNNING\n\n    def get_outcome_value_for_completed_job(self, job_id: int) -> Dict[str, float]:\n        """Get evaluation results for a given completed job."""\n        job = self.jobs[job_id]\n        # In a real external system, this would retrieve real relevant outcomes and\n        # not a synthetic function value.\n        return {"branin": branin(job.parameters.get("x1"), job.parameters.get("x2"))}\n\n\nMOCK_JOB_QUEUE_CLIENT = MockJobQueueClient()\n\n\ndef get_mock_job_queue_client() -> MockJobQueueClient:\n    """Obtain the singleton job queue instance."""\n    return MOCK_JOB_QUEUE_CLIENT\n'})}),"\n",(0,r.jsx)(n.h2,{id:"3-set-up-an-experiment-according-to-the-mock-external-system",children:"3. Set up an experiment according to the mock external system"}),"\n",(0,r.jsxs)(n.p,{children:["As mentioned above, using a ",(0,r.jsx)(n.code,{children:"Scheduler"}),' requires a fully set up experiment with metrics\nand a runner. Refer to the "Building Blocks of Ax" tutorial to learn more about those\ncomponents, as here we assume familiarity with them.']}),"\n",(0,r.jsxs)(n.p,{children:["The following runner and metric set up intractions between the ",(0,r.jsx)(n.code,{children:"Scheduler"})," and the mock\nexternal system we assume:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from collections import defaultdict\nfrom typing import Iterable, Set\n\nfrom ax.core.base_trial import BaseTrial\nfrom ax.core.runner import Runner\nfrom ax.core.trial import Trial\n\n\nclass MockJobRunner(Runner):  # Deploys trials to external system.\n    def run(self, trial: BaseTrial) -> Dict[str, Any]:\n        """Deploys a trial based on custom runner subclass implementation.\n\n        Args:\n            trial: The trial to deploy.\n\n        Returns:\n            Dict of run metadata from the deployment process.\n        """\n        if not isinstance(trial, Trial):\n            raise ValueError("This runner only handles `Trial`.")\n\n        mock_job_queue = get_mock_job_queue_client()\n        job_id = mock_job_queue.schedule_job_with_parameters(\n            parameters=trial.arm.parameters\n        )\n        # This run metadata will be attached to trial as `trial.run_metadata`\n        # by the base `Scheduler`.\n        return {"job_id": job_id}\n\n    def poll_trial_status(\n        self, trials: Iterable[BaseTrial]\n    ) -> Dict[TrialStatus, Set[int]]:\n        """Checks the status of any non-terminal trials and returns their\n        indices as a mapping from TrialStatus to a list of indices. Required\n        for runners used with Ax ``Scheduler``.\n\n        NOTE: Does not need to handle waiting between polling calls while trials\n        are running; this function should just perform a single poll.\n\n        Args:\n            trials: Trials to poll.\n\n        Returns:\n            A dictionary mapping TrialStatus to a list of trial indices that have\n            the respective status at the time of the polling. This does not need to\n            include trials that at the time of polling already have a terminal\n            (ABANDONED, FAILED, COMPLETED) status (but it may).\n        """\n        status_dict = defaultdict(set)\n        for trial in trials:\n            mock_job_queue = get_mock_job_queue_client()\n            status = mock_job_queue.get_job_status(\n                job_id=trial.run_metadata.get("job_id")\n            )\n            status_dict[status].add(trial.index)\n\n        return status_dict\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\nfrom ax.core.metric import Metric, MetricFetchResult, MetricFetchE\nfrom ax.core.base_trial import BaseTrial\nfrom ax.core.data import Data\nfrom ax.utils.common.result import Ok, Err\n\n\nclass BraninForMockJobMetric(Metric):  # Pulls data for trial from external system.\n    def fetch_trial_data(self, trial: BaseTrial) -> MetricFetchResult:\n        """Obtains data via fetching it from ` for a given trial."""\n        if not isinstance(trial, Trial):\n            raise ValueError("This metric only handles `Trial`.")\n\n        try:\n            mock_job_queue = get_mock_job_queue_client()\n\n            # Here we leverage the "job_id" metadata created by `MockJobRunner.run`.\n            branin_data = mock_job_queue.get_outcome_value_for_completed_job(\n                job_id=trial.run_metadata.get("job_id")\n            )\n            df_dict = {\n                "trial_index": trial.index,\n                "metric_name": "branin",\n                "arm_name": trial.arm.name,\n                "mean": branin_data.get("branin"),\n                # Can be set to 0.0 if function is known to be noiseless\n                # or to an actual value when SEM is known. Setting SEM to\n                # `None` results in Ax assuming unknown noise and inferring\n                # noise level from data.\n                "sem": None,\n            }\n            return Ok(value=Data(df=pd.DataFrame.from_records([df_dict])))\n        except Exception as e:\n            return Err(\n                MetricFetchE(message=f"Failed to fetch {self.name}", exception=e)\n            )\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now we can set up the experiment using the runner and metric we defined. This experiment\nwill have a single-objective optimization config, minimizing the Branin function, and\nthe search space that corresponds to that function."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ax import *\n\n\ndef make_branin_experiment_with_runner_and_metric() -> Experiment:\n    parameters = [\n        RangeParameter(\n            name="x1",\n            parameter_type=ParameterType.FLOAT,\n            lower=-5,\n            upper=10,\n        ),\n        RangeParameter(\n            name="x2",\n            parameter_type=ParameterType.FLOAT,\n            lower=0,\n            upper=15,\n        ),\n    ]\n\n    objective = Objective(metric=BraninForMockJobMetric(name="branin"), minimize=True)\n\n    return Experiment(\n        name="branin_test_experiment",\n        search_space=SearchSpace(parameters=parameters),\n        optimization_config=OptimizationConfig(objective=objective),\n        runner=MockJobRunner(),\n        is_test=True,  # Marking this experiment as a test experiment.\n    )\n\n\nexperiment = make_branin_experiment_with_runner_and_metric()\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"4-setting-up-a-scheduler",children:["4. Setting up a ",(0,r.jsx)(n.code,{children:"Scheduler"})]}),"\n",(0,r.jsx)(n.h3,{id:"4a-auto-selecting-a-generation-strategy",children:"4A. Auto-selecting a generation strategy"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"Scheduler"})," requires an Ax ",(0,r.jsx)(n.code,{children:"GenerationStrategy"})," specifying the algorithm to use for\nthe optimization. Here we use the ",(0,r.jsx)(n.code,{children:"choose_generation_strategy"})," utility that auto-picks a\ngeneration strategy based on the search space properties. To construct a custom\ngeneration strategy instead, refer to the\n",(0,r.jsx)(n.a,{href:"https://ax.dev/tutorials/generation_strategy.html",children:'"Generation Strategy" tutorial'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Importantly, a generation strategy in Ax limits allowed parallelism levels for each\ngeneration step it contains. If you would like the ",(0,r.jsx)(n.code,{children:"Scheduler"})," to ensure parallelism\nlimitations, set ",(0,r.jsx)(n.code,{children:"max_examples"})," on each generation step in your generation strategy."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from ax.modelbridge.dispatch_utils import choose_generation_strategy\n\ngeneration_strategy = choose_generation_strategy(\n    search_space=experiment.search_space,\n    max_parallelism_cap=3,\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now we have all the components needed to start the scheduler:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from ax.service.scheduler import Scheduler, SchedulerOptions\n\n\nscheduler = Scheduler(\n    experiment=experiment,\n    generation_strategy=generation_strategy,\n    options=SchedulerOptions(),\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4b-optional-defining-a-plotting-function",children:"4B. Optional: Defining a plotting function"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import numpy as np\nfrom ax.plot.trace import optimization_trace_single_method\nfrom ax.utils.notebook.plotting import render, init_notebook_plotting\n\ninit_notebook_plotting()\n\n\ndef get_plot():\n    best_objectives = np.array(\n        [[trial.objective_mean for trial in scheduler.experiment.trials.values()]]\n    )\n    best_objective_plot = optimization_trace_single_method(\n        y=np.minimum.accumulate(best_objectives, axis=1),\n        title="Model performance vs. # of iterations",\n        ylabel="Y",\n    )\n    return best_objective_plot\n'})}),"\n",(0,r.jsx)(n.h2,{id:"5-running-the-optimization",children:"5. Running the optimization"}),"\n",(0,r.jsxs)(n.p,{children:["Once the ",(0,r.jsx)(n.code,{children:"Scheduler"})," instance is set up, user can execute ",(0,r.jsx)(n.code,{children:"run_n_trials"})," as many times\nas needed, and each execution will add up to the specified ",(0,r.jsx)(n.code,{children:"max_trials"})," trials to the\nexperiment. The number of trials actually run might be less than ",(0,r.jsx)(n.code,{children:"max_trials"})," if the\noptimization was concluded (e.g. there are no more points in the search space)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"scheduler.run_n_trials(max_trials=3)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"best_objective_plot = get_plot()\nrender(best_objective_plot)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can examine ",(0,r.jsx)(n.code,{children:"experiment"})," to see that it now has three trials:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from ax.service.utils.report_utils import exp_to_df\n\nexp_to_df(experiment)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now we can run ",(0,r.jsx)(n.code,{children:"run_n_trials"})," again to add three more trials to the experiment (this\ntime, without plotting)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"scheduler.run_n_trials(max_trials=3)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"best_objective_plot = get_plot()\nrender(best_objective_plot)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Examiniming the experiment, we now see 6 trials, one of which is produced by Bayesian\noptimization (GPEI):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"exp_to_df(experiment)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For each call to ",(0,r.jsx)(n.code,{children:"run_n_trials"}),", one can specify a timeout; if ",(0,r.jsx)(n.code,{children:"run_n_trials"})," has been\nrunning for too long without finishing its ",(0,r.jsx)(n.code,{children:"max_trials"}),", the operation will exit\ngracefully:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"scheduler.run_n_trials(max_trials=3, timeout_hours=0.00001)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"best_objective_plot = get_plot()\nrender(best_objective_plot)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"6-leveraging-sql-storage-and-experiment-resumption",children:"6. Leveraging SQL storage and experiment resumption"}),"\n",(0,r.jsx)(n.p,{children:"When a scheduler is SQL-enabled, it will automatically save all updates it makes to the\nexperiment in the course of the optimization. The experiment can then be resumed in the\nevent of a crash or after a pause. The scheduler should be stateless and therefore, the\nscheduler itself is not saved in the database."}),"\n",(0,r.jsxs)(n.p,{children:["To store state of optimization to an SQL backend, first follow\n",(0,r.jsx)(n.a,{href:"https://ax.dev/docs/storage.html#sql",children:"setup instructions"})," on Ax website. Having set up\nthe SQL backend, pass ",(0,r.jsx)(n.code,{children:"DBSettings"})," to the ",(0,r.jsx)(n.code,{children:"Scheduler"})," on instantiation (note that\nSQLAlchemy dependency will have to be installed \u2013 for installation, refer to\n",(0,r.jsx)(n.a,{href:"https://ax.dev/docs/installation.html#optional-dependencies",children:"optional dependencies"})," on\nAx website):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from ax.storage.registry_bundle import RegistryBundle\nfrom ax.storage.sqa_store.db import (\n    create_all_tables,\n    get_engine,\n    init_engine_and_session_factory,\n)\nfrom ax.storage.sqa_store.decoder import Decoder\nfrom ax.storage.sqa_store.encoder import Encoder\nfrom ax.storage.sqa_store.sqa_config import SQAConfig\nfrom ax.storage.sqa_store.structs import DBSettings\n\nbundle = RegistryBundle(\n    metric_clss={BraninForMockJobMetric: None}, runner_clss={MockJobRunner: None}\n)\n\n# URL is of the form "dialect+driver://username:password@host:port/database".\n# Instead of URL, can provide a `creator function`; can specify custom encoders/decoders if necessary.\ndb_settings = DBSettings(\n    url="sqlite:///foo.db",\n    encoder=bundle.encoder,\n    decoder=bundle.decoder,\n)\n\n# The following lines are only necessary because it is the first time we are using this database\n# in practice, you will not need to run these lines every time you initialize your scheduler\ninit_engine_and_session_factory(url=db_settings.url)\nengine = get_engine()\ncreate_all_tables(engine)\n\nstored_experiment = make_branin_experiment_with_runner_and_metric()\ngeneration_strategy = choose_generation_strategy(search_space=experiment.search_space)\n\nscheduler_with_storage = Scheduler(\n    experiment=stored_experiment,\n    generation_strategy=generation_strategy,\n    options=SchedulerOptions(),\n    db_settings=db_settings,\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"To resume a stored experiment:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'reloaded_experiment_scheduler = Scheduler.from_stored_experiment(\n    experiment_name="branin_test_experiment",\n    options=SchedulerOptions(),\n    # `DBSettings` are also required here so scheduler has access to the\n    # database, from which it needs to load the experiment.\n    db_settings=db_settings,\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["With the newly reloaded experiment, the ",(0,r.jsx)(n.code,{children:"Scheduler"})," can continue the optimization:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"reloaded_experiment_scheduler.run_n_trials(max_trials=3)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"7-configuring-the-scheduler-with-scheduleroptions-like-early-stopping",children:["7. Configuring the scheduler with ",(0,r.jsx)(n.code,{children:"SchedulerOptions"}),", like early stopping"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Scheduler"})," exposes many options to configure the exact settings of the closed-loop\noptimization to perform. A few notable ones are:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"trial_type"})," \u2013\u2013\xa0currently only ",(0,r.jsx)(n.code,{children:"Trial"})," and not ",(0,r.jsx)(n.code,{children:"BatchTrial"})," is supported, but support\nfor ",(0,r.jsx)(n.code,{children:"BatchTrial"}),"-s will follow,"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tolerated_trial_failure_rate"})," and ",(0,r.jsx)(n.code,{children:"min_failed_trials_for_failure_rate_check"})," \u2013\u2013\ntogether these two settings control how the scheduler monitors the failure rate among\ntrial runs it deploys. Once ",(0,r.jsx)(n.code,{children:"min_failed_trials_for_failure_rate_check"})," is deployed,\nthe scheduler will start checking whether the ratio of failed to total trials is\ngreater than ",(0,r.jsx)(n.code,{children:"tolerated_trial_failure_rate"}),", and if it is, scheduler will exit the\noptimization with a ",(0,r.jsx)(n.code,{children:"FailureRateExceededError"}),","]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ttl_seconds_for_trials"})," \u2013\u2013\xa0sometimes a failure in a trial run means that it will be\ndifficult to query its status (e.g. due to a crash). If this setting is specified, the\nAx ",(0,r.jsx)(n.code,{children:"Experiment"})," will automatically mark trials that have been running for too long\n(more than their 'time-to-live' (TTL) seconds) as failed,"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"run_trials_in_batches"})," \u2013\u2013\xa0if ",(0,r.jsx)(n.code,{children:"True"}),", the scheduler will attempt to run trials not by\ncalling ",(0,r.jsx)(n.code,{children:"Scheduler.run_trial"})," in a loop, but by calling ",(0,r.jsx)(n.code,{children:"Scheduler.run_trials"})," on all\nready-to-deploy trials at once. This could allow for saving compute in cases where the\ndeployment operation has large overhead and deploying many trials at once saves\ncompute. Note that using this option successfully will require your scheduler subclass\nto implement ",(0,r.jsx)(n.code,{children:"MySchedulerSubclass.run_trials"})," and\n",(0,r.jsx)(n.code,{children:"MySchedulerSubclass.poll_available_capacity"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"early_stopping_strategy"})," -- determines whether a trial should be stopped given the\ncurrent state of the experiment, so that less promising trials can be terminated\nquickly. For more on this, see the Trial-Level Early Stopping tutorial:\n",(0,r.jsx)(n.a,{href:"https://ax.dev/tutorials/early_stopping/early_stopping.html",children:"https://ax.dev/tutorials/early_stopping/early_stopping.html"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"global_stopping_strategy"})," -- determines whether the full optimization should be\nstopped or not, so that the run terminates when little progress is being made. A\n",(0,r.jsx)(n.code,{children:"global_stopping_strategy"})," instance can be passed to ",(0,r.jsx)(n.code,{children:"SchedulerOptions"})," just as it is\npassed to ",(0,r.jsx)(n.code,{children:"AxClient"}),", as illustrated in the tutorial on Global Stopping Strategy with\nAxClient: ",(0,r.jsx)(n.a,{href:"https://ax.dev/tutorials/gss.html",children:"https://ax.dev/tutorials/gss.html"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The rest of the options are described in the docstring below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"print(SchedulerOptions.__doc__)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"8-advanced-functionality",children:"8. Advanced functionality"}),"\n",(0,r.jsx)(n.h3,{id:"8a-reporting-results-to-an-external-system",children:"8a. Reporting results to an external system"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Scheduler"})," can report the optimization result to an external system each time there\nare new completed trials if the user-implemented subclass implements\n",(0,r.jsx)(n.code,{children:"MySchedulerSubclass.report_results"})," to do so. For example, the folliwing method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"class MySchedulerSubclass(Scheduler):\n    ...\n    \n    def report_results(self, force_refit: bool = False):\n        write_to_external_database(len(self.experiment.trials))\n        return (True, \\{\\})  # Returns optimization success status and optional dict of outputs.\n"})}),"\n",(0,r.jsx)(n.p,{children:"could be used to record number of trials in experiment so far in an external database."}),"\n",(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.code,{children:"report_results"})," is an instance method, it has access to ",(0,r.jsx)(n.code,{children:"self.experiment"})," and\n",(0,r.jsx)(n.code,{children:"self.generation_strategy"}),", which contain all the information about the state of the\noptimization thus far."]}),"\n",(0,r.jsxs)(n.h3,{id:"8b-using-run_trials_and_yield_results-generator-method",children:["8b. Using ",(0,r.jsx)(n.code,{children:"run_trials_and_yield_results"})," generator method"]}),"\n",(0,r.jsxs)(n.p,{children:["In some systems it's beneficial to have greater control over ",(0,r.jsx)(n.code,{children:"Scheduler.run_n_trials"}),"\ninstead of just starting it and needing to wait for it to run all the way to completion\nbefore having access to its output. For this purpose, the ",(0,r.jsx)(n.code,{children:"Scheduler"})," implements a\ngenerator method ",(0,r.jsx)(n.code,{children:"run_trials_and_yield_results"}),", which yields the output of\n",(0,r.jsx)(n.code,{children:"Scheduler.report_results"})," each time there are new completed trials and can be used like\nso:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class ResultReportingScheduler(Scheduler):\n    def report_results(self, force_refit: bool = False):\n        return True, {\n            "trials so far": len(self.experiment.trials),\n            "currently producing trials from generation step": self.generation_strategy._curr.model_name,\n            "running trials": [t.index for t in self.running_trials],\n        }\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'experiment = make_branin_experiment_with_runner_and_metric()\nscheduler = ResultReportingScheduler(\n    experiment=experiment,\n    generation_strategy=choose_generation_strategy(\n        search_space=experiment.search_space,\n        max_parallelism_cap=3,\n    ),\n    options=SchedulerOptions(),\n)\n\nfor reported_result in scheduler.run_trials_and_yield_results(max_trials=6):\n    print("Reported result: ", reported_result)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Clean up to enable running the tutorial repeatedly with\n# the same results. You wouldn\'t do this if you wanted to\n# keep adding data to the same experiment.\nfrom ax.storage.sqa_store.delete import delete_experiment\n\ndelete_experiment("branin_test_experiment")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1023:(e,n,t)=>{t.d(n,{A:()=>p});t(6540);var r,i=new Uint8Array(16);function s(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const o=function(e){return"string"==typeof e&&a.test(e)};for(var l=[],c=0;c<256;++c)l.push((c+256).toString(16).substr(1));const d=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(l[e[n+0]]+l[e[n+1]]+l[e[n+2]]+l[e[n+3]]+"-"+l[e[n+4]]+l[e[n+5]]+"-"+l[e[n+6]]+l[e[n+7]]+"-"+l[e[n+8]]+l[e[n+9]]+"-"+l[e[n+10]]+l[e[n+11]]+l[e[n+12]]+l[e[n+13]]+l[e[n+14]]+l[e[n+15]]).toLowerCase();if(!o(t))throw TypeError("Stringified UUID is invalid");return t};const h=function(e,n,t){var r=(e=e||{}).random||(e.rng||s)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,n){t=t||0;for(var i=0;i<16;++i)n[t+i]=r[i];return n}return d(r)};var u=t(4848);const p=function(e){return(0,u.jsxs)("div",{style:{backgroundColor:"lightgray",marginBottom:"var(--ifm-leading)",borderRadius:"var(--ifm-global-radius)",boxShadow:"var(--ifm-global-shadow-lw)",overflow:"hidden",padding:"10px",font:"var(--ifm-code-font-size) / var(--ifm-pre-line-height) var(--ifm-font-family-monospace)"},children:[(0,u.jsx)("span",{style:{color:"red"},children:"Out: "}),(0,u.jsx)("pre",{style:{margin:"0px",backgroundColor:"inherit"},children:e.children.split("\n").map((function(e){return(0,u.jsx)("p",{style:{marginBottom:"0px"},children:e},h())}))})]})}},8987:(e,n,t)=>{t.d(n,{A:()=>s});t(6540);var r=t(8774),i=t(4848);const s=function(e){var n=e.githubUrl,t=e.colabUrl;return(0,i.jsxs)("div",{className:"link-buttons",children:[(0,i.jsx)(r.A,{to:n,children:"Open in GitHub"}),(0,i.jsx)("div",{}),(0,i.jsx)(r.A,{to:t,children:"Run in Google Colab"})]})}},290:(e,n,t)=>{t(6540);var r=t(3259),i=t.n(r),s=(t(2303),t(4848));i()({loader:function(){return t.e(236).then(t.bind(t,1236))},loading:function(e){return e.timedOut?(0,s.jsx)("blockquote",{children:"Error: Loading Plotly timed out."}):(0,s.jsx)("div",{children:"loading..."})},timeout:1e4})},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);