"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[754],{17282:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>m,contentTitle:()=>b,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var n=t(74848),i=t(28453),a=t(38987),o=t(31023),s=t(70290);const l={title:"Multi-Task Modeling",sidebar_label:"Multi-Task Modeling"},b="Multi-task Bayesian Optimization",c={id:"tutorials/multi_task/index",title:"Multi-Task Modeling",description:"<LinkButtons",source:"@site/versioned_docs/version-0.9.2/tutorials/multi_task/index.mdx",sourceDirName:"tutorials/multi_task",slug:"/tutorials/multi_task/",permalink:"/Ax/docs/0.9.2/tutorials/multi_task/",draft:!1,unlisted:!1,tags:[],version:"0.9.2",lastUpdatedBy:"Cristian Lara",lastUpdatedAt:1732232512e3,frontMatter:{title:"Multi-Task Modeling",sidebar_label:"Multi-Task Modeling"},sidebar:"tutorials",previous:{title:"Hyperparameter Optimization on SLURM via SubmitIt",permalink:"/Ax/docs/0.9.2/tutorials/submitit/"},next:{title:"Multi-Objective Optimization",permalink:"/Ax/docs/0.9.2/tutorials/multiobjective_optimization/"}},m={},h=[{value:"1. Define Metric classes",id:"1-define-metric-classes",level:2},{value:"2. Create experiment",id:"2-create-experiment",level:2},{value:"3. Vizualize the simulator bias",id:"3-vizualize-the-simulator-bias",level:2},{value:"4. The Bayesian optimization loop",id:"4-the-bayesian-optimization-loop",level:2},{value:"4a. Optimization with online observations only",id:"4a-optimization-with-online-observations-only",level:4},{value:"4b. Multi-task Bayesian optimization",id:"4b-multi-task-bayesian-optimization",level:4},{value:"4c. Run both loops",id:"4c-run-both-loops",level:4},{value:"References",id:"references",level:4}];function d(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.A,{githubUrl:"https://github.com/cristianlara/Ax/blob/main/tutorials/multi_task.ipynb",colabUrl:"https://colab.research.google.com/github/cristianlara/Ax/blob/main/tutorials/multi_task.ipynb"}),"\n",(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"multi-task-bayesian-optimization",children:"Multi-task Bayesian Optimization"})}),"\n",(0,n.jsx)(r.p,{children:"This tutorial uses synthetic functions to illustrate Bayesian optimization using a\nmulti-task Gaussian Process in Ax. A typical use case is optimizing an\nexpensive-to-evaluate (online) system with supporting (offline) simulations of that\nsystem."}),"\n",(0,n.jsx)(r.p,{children:"Bayesian optimization with a multi-task kernel (Multi-task Bayesian optimization) is\ndescribed by Swersky et al. (2013). Letham and Bakshy (2019) describe using multi-task\nBayesian optimization to tune a ranking system with a mix of online and offline\n(simulator) experiments."}),"\n",(0,n.jsxs)(r.p,{children:["This tutorial produces the results of Online Appendix 2 from\n",(0,n.jsx)(r.a,{href:"https://arxiv.org/pdf/1904.01049.pdf",children:"that paper"}),"."]}),"\n",(0,n.jsx)(r.p,{children:"The synthetic problem used here is to maximize the Hartmann 6 function, a classic\noptimization test problem in 6 dimensions. The objective is treated as unknown and are\nmodeled with separate GPs. The objective is noisy."}),"\n",(0,n.jsx)(r.p,{children:"Throughout the optimization we can make nosiy observations directly of the objective (an\nonline observation), and we can make noisy observations of a biased version of the\nobjective (offline observations). Bias is simulated by passing the function values\nthrough a piecewise linear function. Offline observations are much less time-consuming\nthan online observations, so we wish to use them to improve our ability to optimize the\nonline objective."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"import os\nimport time\n\nfrom copy import deepcopy\nfrom typing import Optional\n\nimport numpy as np\n\nimport torch\n\nfrom ax.core.data import Data\nfrom ax.core.experiment import Experiment\nfrom ax.core.generator_run import GeneratorRun\nfrom ax.core.multi_type_experiment import MultiTypeExperiment\nfrom ax.core.objective import Objective\nfrom ax.core.observation import ObservationFeatures, observations_from_data\nfrom ax.core.optimization_config import OptimizationConfig\nfrom ax.core.parameter import ParameterType, RangeParameter\nfrom ax.core.search_space import SearchSpace\nfrom ax.metrics.hartmann6 import Hartmann6Metric\nfrom ax.modelbridge.factory import get_sobol\nfrom ax.modelbridge.registry import Models, MT_MTGP_trans, ST_MTGP_trans\nfrom ax.modelbridge.torch import TorchModelBridge\nfrom ax.modelbridge.transforms.convert_metric_names import tconfig_from_mt_experiment\nfrom ax.plot.diagnostic import interact_batch_comparison\nfrom ax.runners.synthetic import SyntheticRunner\nfrom ax.utils.common.typeutils import checked_cast\nfrom ax.utils.notebook.plotting import init_notebook_plotting, render\n\ninit_notebook_plotting()\n"})}),"\n",(0,n.jsx)(o.A,{children:"[INFO 09-29 17:08:25] ax.utils.notebook.plotting: Injecting Plotly library into cell. Do not overwrite or delete cell."}),"\n",(0,n.jsx)(o.A,{children:"[INFO 09-29 17:08:25] ax.utils.notebook.plotting: Please see\n  (https://ax.dev/tutorials/visualizations.html#Fix-for-plots-that-are-not-rendering)\n  if visualizations are not rendering."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'SMOKE_TEST = os.environ.get("SMOKE_TEST")\n'})}),"\n",(0,n.jsx)(r.h2,{id:"1-define-metric-classes",children:"1. Define Metric classes"}),"\n",(0,n.jsx)(r.p,{children:"For this example, the online system is optimizing a Hartmann6 function. The Metric\nobjects for these are directly imported above. We create analagous offline versions of\nthis metrics which are identical but have a transform applied (a piecewise linear\nfunction). We construct Metric objects for each of them."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"# Create metric with artificial offline bias, for the objective\n# by passing the true values through a piecewise linear function.\n\n\nclass OfflineHartmann6Metric(Hartmann6Metric):\n    def f(self, x: np.ndarray) -> float:\n        raw_res = super().f(x)\n        m = -0.35\n        if raw_res < m:\n            return (1.5 * (raw_res - m)) + m\n        else:\n            return (6.0 * (raw_res - m)) + m\n"})}),"\n",(0,n.jsx)(r.h2,{id:"2-create-experiment",children:"2. Create experiment"}),"\n",(0,n.jsx)(r.p,{children:"A MultiTypeExperiment is used for managing online and offline trials together. It is\nconstructed in several steps:"}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:" Create the search space"})," - This is done in the usual way."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:"Specify optimization config"})," - Also done in the usual way."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:"Initialize Experiment"}),' - In addition to the search_space and\noptimization_config, specify that "online" is the default trial_type. This is the\nmain trial type for which we\'re optimizing. Optimization metrics are defined to be\nfor this type and new trials assume this trial type by default.']}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:"Establish offline trial_type"}),' - Register the "offline" trial type and specify\nhow to deploy trials of this type.']}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:"Add offline metrics"}),' - Create the offline metrics and add them to the\nexperiment. When adding the metrics, we need to specify the trial type ("offline")\nand online metric name it is associated with so the model can link them.']}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Finally, because this is a synthetic benchmark problem where the true function values\nare known, we will also register metrics with the true (noiseless) function values for\nplotting below."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'def get_experiment(include_true_metric=True):\n    noise_sd = 0.1  # Observations will have this much Normal noise added to them\n\n    # 1. Create simple search space for [0,1]^d, d=6\n    param_names = [f"x{i}" for i in range(6)]\n    parameters = [\n        RangeParameter(\n            name=param_names[i],\n            parameter_type=ParameterType.FLOAT,\n            lower=0.0,\n            upper=1.0,\n        )\n        for i in range(6)\n    ]\n    search_space = SearchSpace(parameters=parameters)\n\n    # 2. Specify optimization config\n    online_objective = Hartmann6Metric(\n        "objective", param_names=param_names, noise_sd=noise_sd\n    )\n    opt_config = OptimizationConfig(\n        objective=Objective(online_objective, minimize=True)\n    )\n\n    # 3. Init experiment\n    exp = MultiTypeExperiment(\n        name="mt_exp",\n        search_space=search_space,\n        default_trial_type="online",\n        default_runner=SyntheticRunner(),\n        optimization_config=opt_config,\n    )\n\n    # 4. Establish offline trial_type, and how those trials are deployed\n    exp.add_trial_type("offline", SyntheticRunner())\n\n    # 5. Add offline metrics that provide biased estimates of the online metrics\n    offline_objective = OfflineHartmann6Metric(\n        "offline_objective", param_names=param_names, noise_sd=noise_sd\n    )\n    # Associate each offline metric with corresponding online metric\n    exp.add_tracking_metric(\n        metric=offline_objective, trial_type="offline", canonical_name="objective"\n    )\n\n    return exp\n'})}),"\n",(0,n.jsx)(r.h2,{id:"3-vizualize-the-simulator-bias",children:"3. Vizualize the simulator bias"}),"\n",(0,n.jsx)(r.p,{children:"These figures compare the online measurements to the offline measurements on a random\nset of points, for the objective metric. You can see the offline measurements are biased\nbut highly correlated. This produces Fig. S3 from the paper."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# Generate 50 points from a Sobol sequence\nexp = get_experiment(include_true_metric=False)\ns = get_sobol(exp.search_space, scramble=False)\ngr = s.gen(50)\n# Deploy them both online and offline\nexp.new_batch_trial(trial_type="online", generator_run=gr).run()\nexp.new_batch_trial(trial_type="offline", generator_run=gr).run()\n# Fetch data\ndata = exp.fetch_data()\nobservations = observations_from_data(exp, data)\n# Plot the arms in batch 0 (online) vs. batch 1 (offline)\nrender(interact_batch_comparison(observations, exp, 1, 0))\n'})}),"\n",(0,n.jsx)(s.z,{data:t(65645)}),"\n",(0,n.jsx)(r.h2,{id:"4-the-bayesian-optimization-loop",children:"4. The Bayesian optimization loop"}),"\n",(0,n.jsx)(r.p,{children:"Here we construct a Bayesian optimization loop that interleaves online and offline\nbatches. The loop defined here is described in Algorithm 1 of the paper. We compare\nmulti-task Bayesian optimization to regular Bayesian optimization using only online\nobservations."}),"\n",(0,n.jsx)(r.p,{children:"Here we measure performance over 3 repetitions of the loop. Each one takes 1-2 hours so\nthe whole benchmark run will take several hours to complete."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:"# Settings for the optimization benchmark.\n\n# Number of repeated experiments, each with independent observation noise.\n# This should be changed to 50 to reproduce the results from the paper.\nif SMOKE_TEST:\n    n_batches = 1\n    n_init_online = 2\n    n_init_offline = 2\n    n_opt_online = 2\n    n_opt_offline = 2\nelse:\n    n_batches = 3  # Number of optimized BO batches\n    n_init_online = 5  # Size of the quasirandom initialization run online\n    n_init_offline = 20  # Size of the quasirandom initialization run offline\n    n_opt_online = 5  # Batch size for BO selected points to be run online\n    n_opt_offline = 20  # Batch size for BO selected to be run offline\n"})}),"\n",(0,n.jsx)(r.h4,{id:"4a-optimization-with-online-observations-only",children:"4a. Optimization with online observations only"}),"\n",(0,n.jsxs)(r.p,{children:["For the online-only case, we run ",(0,n.jsx)(r.code,{children:"n_init_online"})," sobol points followed by ",(0,n.jsx)(r.code,{children:"n_batches"}),"\nbatches of ",(0,n.jsx)(r.code,{children:"n_opt_online"})," points selected by the GP. This is a normal Bayesian\noptimization loop."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# This function runs a Bayesian optimization loop, making online observations only.\ndef run_online_only_bo():\n    t1 = time.time()\n    ### Do BO with online only\n    ## Quasi-random initialization\n    exp_online = get_experiment()\n    m = get_sobol(exp_online.search_space, scramble=False)\n    gr = m.gen(n=n_init_online)\n    exp_online.new_batch_trial(trial_type="online", generator_run=gr).run()\n    ## Do BO\n    for b in range(n_batches):\n        print("Online-only batch", b, time.time() - t1)\n        # Fit the GP\n        m = Models.BOTORCH_MODULAR(\n            experiment=exp_online,\n            data=exp_online.fetch_data(),\n            search_space=exp_online.search_space,\n        )\n        # Generate the new batch\n        gr = m.gen(\n            n=n_opt_online,\n            search_space=exp_online.search_space,\n            optimization_config=exp_online.optimization_config,\n        )\n        exp_online.new_batch_trial(trial_type="online", generator_run=gr).run()\n'})}),"\n",(0,n.jsx)(r.h4,{id:"4b-multi-task-bayesian-optimization",children:"4b. Multi-task Bayesian optimization"}),"\n",(0,n.jsx)(r.p,{children:"Here we incorporate offline observations to accelerate the optimization, while using the\nsame total number of online observations as in the loop above. The strategy here is that\noutlined in Algorithm 1 of the paper."}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:" Initialization"})," - Run ",(0,n.jsx)(r.code,{children:"n_init_online"})," Sobol points online, and\n",(0,n.jsx)(r.code,{children:"n_init_offline"})," Sobol points offline."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:" Fit model "})," - Fit an MTGP to both online and offline observations."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:" Generate candidates "})," - Generate ",(0,n.jsx)(r.code,{children:"n_opt_offline"})," candidates using NEI."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:" Launch offline batch "})," - Run the ",(0,n.jsx)(r.code,{children:"n_opt_offline"})," candidates offline and\nobserve their offline metrics."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:" Update model "})," - Update the MTGP with the new offline observations."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:" Select points for online batch "})," - Select the best (maximum utility)\n",(0,n.jsx)(r.code,{children:"n_opt_online"})," of the NEI candidates, after incorporating their offline observations,\nand run them online."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)("b",{children:" Update model and repeat "})," - Update the model with the online observations, and\nrepeat from step 3 for the next batch."]}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'def get_MTGP(\n    experiment: Experiment,\n    data: Data,\n    search_space: Optional[SearchSpace] = None,\n    trial_index: Optional[int] = None,\n    device: torch.device = torch.device("cpu"),\n    dtype: torch.dtype = torch.double,\n) -> TorchModelBridge:\n    """Instantiates a Multi-task Gaussian Process (MTGP) model that generates\n    points with EI.\n\n    If the input experiment is a MultiTypeExperiment then a\n    Multi-type Multi-task GP model will be instantiated.\n    Otherwise, the model will be a Single-type Multi-task GP.\n    """\n\n    if isinstance(experiment, MultiTypeExperiment):\n        trial_index_to_type = {\n            t.index: t.trial_type for t in experiment.trials.values()\n        }\n        transforms = MT_MTGP_trans\n        transform_configs = {\n            "TrialAsTask": {"trial_level_map": {"trial_type": trial_index_to_type}},\n            "ConvertMetricNames": tconfig_from_mt_experiment(experiment),\n        }\n    else:\n        # Set transforms for a Single-type MTGP model.\n        transforms = ST_MTGP_trans\n        transform_configs = None\n\n    # Choose the status quo features for the experiment from the selected trial.\n    # If trial_index is None, we will look for a status quo from the last\n    # experiment trial to use as a status quo for the experiment.\n    if trial_index is None:\n        trial_index = len(experiment.trials) - 1\n    elif trial_index >= len(experiment.trials):\n        raise ValueError("trial_index is bigger than the number of experiment trials")\n\n    status_quo = experiment.trials[trial_index].status_quo\n    if status_quo is None:\n        status_quo_features = None\n    else:\n        status_quo_features = ObservationFeatures(\n            parameters=status_quo.parameters,\n            trial_index=trial_index,  # pyre-ignore[6]\n        )\n\n    \n    return checked_cast(\n        TorchModelBridge,\n        Models.ST_MTGP(\n            experiment=experiment,\n            search_space=search_space or experiment.search_space,\n            data=data,\n            transforms=transforms,\n            transform_configs=transform_configs,\n            torch_dtype=dtype,\n            torch_device=device,\n            status_quo_features=status_quo_features,\n        ),\n    )\n'})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'# Online batches are constructed by selecting the maximum utility points from the offline\n# batch, after updating the model with the offline results. This function selects the max utility points according\n# to the MTGP predictions.\ndef max_utility_from_GP(n, m, experiment, search_space, gr):\n    obsf = []\n    for arm in gr.arms:\n        params = deepcopy(arm.parameters)\n        params["trial_type"] = "online"\n        obsf.append(ObservationFeatures(parameters=params))\n    # Make predictions\n    f, cov = m.predict(obsf)\n    # Compute expected utility\n    u = -np.array(f["objective"])\n    best_arm_indx = np.flip(np.argsort(u))[:n]\n    gr_new = GeneratorRun(\n        arms=[gr.arms[i] for i in best_arm_indx],\n        weights=[1.0] * n,\n    )\n    return gr_new\n\n\n# This function runs a multi-task Bayesian optimization loop, as outlined in Algorithm 1 and above.\ndef run_mtbo():\n    t1 = time.time()\n    online_trials = []\n    ## 1. Quasi-random initialization, online and offline\n    exp_multitask = get_experiment()\n    # Online points\n    m = get_sobol(exp_multitask.search_space, scramble=False)\n    gr = m.gen(\n        n=n_init_online,\n    )\n    tr = exp_multitask.new_batch_trial(trial_type="online", generator_run=gr)\n    tr.run()\n    online_trials.append(tr.index)\n    # Offline points\n    m = get_sobol(exp_multitask.search_space, scramble=False)\n    gr = m.gen(\n        n=n_init_offline,\n    )\n    exp_multitask.new_batch_trial(trial_type="offline", generator_run=gr).run()\n    ## Do BO\n    for b in range(n_batches):\n        print("Multi-task batch", b, time.time() - t1)\n        # (2 / 7). Fit the MTGP\n        m = get_MTGP(\n            experiment=exp_multitask,\n            data=exp_multitask.fetch_data(),\n            search_space=exp_multitask.search_space,\n        )\n\n        # 3. Finding the best points for the online task\n        gr = m.gen(\n            n=n_opt_offline,\n            optimization_config=exp_multitask.optimization_config,\n            fixed_features=ObservationFeatures(\n                parameters={}, trial_index=online_trials[-1]\n            ),\n        )\n\n        # 4. But launch them offline\n        exp_multitask.new_batch_trial(trial_type="offline", generator_run=gr).run()\n\n        # 5. Update the model\n        m = get_MTGP(\n            experiment=exp_multitask,\n            data=exp_multitask.fetch_data(),\n            search_space=exp_multitask.search_space,\n        )\n\n        # 6. Select max-utility points from the offline batch to generate an online batch\n        gr = max_utility_from_GP(\n            n=n_opt_online,\n            m=m,\n            experiment=exp_multitask,\n            search_space=exp_multitask.search_space,\n            gr=gr,\n        )\n        tr = exp_multitask.new_batch_trial(trial_type="online", generator_run=gr)\n        tr.run()\n        online_trials.append(tr.index)\n'})}),"\n",(0,n.jsx)(r.h4,{id:"4c-run-both-loops",children:"4c. Run both loops"}),"\n",(0,n.jsx)(r.p,{children:"Run both Bayesian optimization loops and aggregate results."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'runners = {\n    "GP, online only": run_online_only_bo,\n    "MTGP": run_mtbo,\n}\nfor k, r in runners.items():\n    r()\n'})}),"\n",(0,n.jsx)(o.A,{children:"Online-only batch 0 0.0018839836120605469"}),"\n",(0,n.jsx)(o.A,{children:"Online-only batch 1 4.511662006378174"}),"\n",(0,n.jsx)(o.A,{children:"Online-only batch 2 8.593715190887451"}),"\n",(0,n.jsx)(o.A,{children:"Multi-task batch 0 0.0032148361206054688"}),"\n",(0,n.jsx)(o.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/transforms/base.py:94: AxParameterWarning:\nChanging is_ordered to True for ChoiceParameter 'trial_type' since there are only two possible values."}),"\n",(0,n.jsx)(o.A,{children:"/Users/cristianlara/Projects/botorch/venv/lib/python3.12/site-packages/linear_operator/utils/interpolation.py:71: UserWarning:\ntorch.sparse.SparseTensor(indices, values, shape, *, device=) is deprecated.  Please use torch.sparse_coo_tensor(indices, values, shape, dtype=, device=). (Triggered internally at /Users/runner/work/pytorch/pytorch/pytorch/torch/csrc/utils/tensor_new.cpp:643.)\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/transforms/base.py:94: AxParameterWarning:\nChanging is_ordered to True for ChoiceParameter 'trial_type' since there are only two possible values.\n/Users/cristianlara/Projects/botorch/venv/lib/python3.12/site-packages/botorch/acquisition/cached_cholesky.py:87: RuntimeWarning:\ncache_root is only supported for GPyTorchModels that are not MultiTask models and don't produce a TransformedPosterior. Got a model of type <class 'botorch.models.model_list_gp_regression.ModelListGP'>. Setting cache_root = False."}),"\n",(0,n.jsx)(o.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/transforms/base.py:94: AxParameterWarning:\nChanging is_ordered to True for ChoiceParameter 'trial_type' since there are only two possible values.\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/transforms/base.py:94: AxParameterWarning:\nChanging is_ordered to True for ChoiceParameter 'trial_type' since there are only two possible values.\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/transforms/base.py:94: AxParameterWarning:\nChanging is_ordered to True for ChoiceParameter 'trial_type' since there are only two possible values."}),"\n",(0,n.jsx)(o.A,{children:"Multi-task batch 1 66.65755605697632"}),"\n",(0,n.jsx)(o.A,{children:"/Users/cristianlara/Projects/botorch/venv/lib/python3.12/site-packages/botorch/acquisition/cached_cholesky.py:87: RuntimeWarning:\ncache_root is only supported for GPyTorchModels that are not MultiTask models and don't produce a TransformedPosterior. Got a model of type <class 'botorch.models.model_list_gp_regression.ModelListGP'>. Setting cache_root = False."}),"\n",(0,n.jsx)(o.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/transforms/base.py:94: AxParameterWarning:\nChanging is_ordered to True for ChoiceParameter 'trial_type' since there are only two possible values.\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/transforms/base.py:94: AxParameterWarning:\nChanging is_ordered to True for ChoiceParameter 'trial_type' since there are only two possible values."}),"\n",(0,n.jsx)(o.A,{children:"Multi-task batch 2 118.62788200378418"}),"\n",(0,n.jsx)(o.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/transforms/base.py:94: AxParameterWarning:\nChanging is_ordered to True for ChoiceParameter 'trial_type' since there are only two possible values.\n/Users/cristianlara/Projects/botorch/venv/lib/python3.12/site-packages/botorch/acquisition/cached_cholesky.py:87: RuntimeWarning:\ncache_root is only supported for GPyTorchModels that are not MultiTask models and don't produce a TransformedPosterior. Got a model of type <class 'botorch.models.model_list_gp_regression.ModelListGP'>. Setting cache_root = False."}),"\n",(0,n.jsx)(o.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/transforms/base.py:94: AxParameterWarning:\nChanging is_ordered to True for ChoiceParameter 'trial_type' since there are only two possible values."}),"\n",(0,n.jsx)(r.h4,{id:"references",children:"References"}),"\n",(0,n.jsxs)(r.p,{children:["Benjamin Letham and Eytan Bakshy. Bayesian optimization for policy search via\nonline-offline experimentation. ",(0,n.jsx)(r.em,{children:"arXiv preprint arXiv:1603.09326"}),", 2019."]}),"\n",(0,n.jsxs)(r.p,{children:["Kevin Swersky, Jasper Snoek, and Ryan P Adams. Multi-task Bayesian optimization. In\n",(0,n.jsx)(r.em,{children:"Advances in Neural Information Processing Systems"})," 26, NIPS, pages 2004\u20132012, 2013."]})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},31023:(e,r,t)=>{t.d(r,{A:()=>d});t(96540);var n,i=new Uint8Array(16);function a(){if(!n&&!(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(i)}const o=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const s=function(e){return"string"==typeof e&&o.test(e)};for(var l=[],b=0;b<256;++b)l.push((b+256).toString(16).substr(1));const c=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(l[e[r+0]]+l[e[r+1]]+l[e[r+2]]+l[e[r+3]]+"-"+l[e[r+4]]+l[e[r+5]]+"-"+l[e[r+6]]+l[e[r+7]]+"-"+l[e[r+8]]+l[e[r+9]]+"-"+l[e[r+10]]+l[e[r+11]]+l[e[r+12]]+l[e[r+13]]+l[e[r+14]]+l[e[r+15]]).toLowerCase();if(!s(t))throw TypeError("Stringified UUID is invalid");return t};const m=function(e,r,t){var n=(e=e||{}).random||(e.rng||a)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,r){t=t||0;for(var i=0;i<16;++i)r[t+i]=n[i];return r}return c(n)};var h=t(74848);const d=function(e){return(0,h.jsxs)("div",{style:{backgroundColor:"var(--ifm-pre-background)",marginBottom:"10px",borderRadius:"var(--ifm-global-radius)",overflow:"hidden",padding:"5px",font:"var(--ifm-code-font-size) / var(--ifm-pre-line-height) var(--ifm-font-family-monospace)"},children:[(0,h.jsx)("span",{style:{color:"red"},children:"Out: "}),(0,h.jsx)("pre",{style:{margin:"0px",backgroundColor:"inherit",padding:"8px"},children:e.children.split("\n").map((function(e){return(0,h.jsx)("p",{style:{marginBottom:"0px"},children:e},m())}))})]})}},38987:(e,r,t)=>{t.d(r,{A:()=>o});t(96540);var n=t(28774),i=t(43186),a=t(74848);const o=function(e){var r=e.githubUrl,t=e.colabUrl;return(0,a.jsxs)("div",{children:[(0,a.jsxs)(n.A,{to:r,className:"button button--outline button--primary margin--xs",children:["Open in GitHub",(0,a.jsx)(i.A,{})]}),(0,a.jsxs)(n.A,{to:t,className:"button button--outline button--primary margin--xs",children:["Run in Google Colab",(0,a.jsx)(i.A,{})]}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{})]})}},70290:(e,r,t)=>{t.d(r,{z:()=>l});var n=t(96540),i=t(53259),a=t.n(i),o=(t(92303),t(74848));var s=a()({loader:function(){return t.e(1236).then(t.bind(t,91236))},loading:function(e){return e.timedOut?(0,o.jsx)("blockquote",{children:"Error: Loading Plotly timed out."}):(0,o.jsx)("div",{children:"loading..."})},timeout:1e4}),l=n.memo((function(e){var r=e.data;return(0,o.jsx)("div",{className:"plotly-figure",style:{"overflow-x":"auto"},children:(0,o.jsx)(s,{data:r.data,layout:r.layout})})}))},28453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>s});var n=t(96540);const i={},a=n.createContext(i);function o(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:r},e.children)}},65645:e=>{e.exports=JSON.parse('{"config":{"linkText":"Export to plot.ly","plotlyServerURL":"https://plot.ly","showLink":false},"data":[{"hoverinfo":"none","line":{"color":"black","dash":"dot","width":2},"mode":"lines","showlegend":false,"type":"scatter","visible":true,"x":[-3.0304228951830097,2.366378442818677],"y":[-3.0304228951830097,2.366378442818677]},{"error_x":{"array":[0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196],"color":"rgba(128,177,211,0.4)","type":"data"},"error_y":{"array":[0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196,0.196],"color":"rgba(128,177,211,0.4)","type":"data"},"hoverinfo":"text","marker":{"color":"rgba(128,177,211,1)"},"mode":"markers","name":"In-sample","showlegend":true,"text":["<b>Arm 0_0</b><br><br>Batch 1: 1.77 [1.574, 1.966]<br>Batch 0: 0.159 [-0.037, 0.355]<br><br><em>Parameterization:</em><br>x0: 0.0<br>x1: 0.0<br>x2: 0.0<br>x3: 0.0<br>x4: 0.0<br>x5: 0.0","<b>Arm 0_1</b><br><br>Batch 1: -0.646 [-0.842, -0.450]<br>Batch 0: -0.421 [-0.617, -0.225]<br><br><em>Parameterization:</em><br>x0: 0.5<br>x1: 0.5<br>x2: 0.5<br>x3: 0.5<br>x4: 0.5<br>x5: 0.5","<b>Arm 0_2</b><br><br>Batch 1: 1.406 [1.210, 1.602]<br>Batch 0: -0.025 [-0.221, 0.171]<br><br><em>Parameterization:</em><br>x0: 0.75<br>x1: 0.25<br>x2: 0.25<br>x3: 0.25<br>x4: 0.75<br>x5: 0.75","<b>Arm 0_3</b><br><br>Batch 1: -0.974 [-1.170, -0.778]<br>Batch 0: -0.77 [-0.966, -0.574]<br><br><em>Parameterization:</em><br>x0: 0.25<br>x1: 0.75<br>x2: 0.75<br>x3: 0.75<br>x4: 0.25<br>x5: 0.25","<b>Arm 0_4</b><br><br>Batch 1: 0.778 [0.582, 0.974]<br>Batch 0: -0.245 [-0.441, -0.049]<br><br><em>Parameterization:</em><br>x0: 0.375<br>x1: 0.375<br>x2: 0.625<br>x3: 0.875<br>x4: 0.375<br>x5: 0.125","<b>Arm 0_5</b><br><br>Batch 1: 1.808 [1.612, 2.004]<br>Batch 0: -0.067 [-0.263, 0.129]<br><br><em>Parameterization:</em><br>x0: 0.875<br>x1: 0.875<br>x2: 0.125<br>x3: 0.375<br>x4: 0.875<br>x5: 0.625","<b>Arm 0_6</b><br><br>Batch 1: 1.294 [1.098, 1.490]<br>Batch 0: -0.264 [-0.460, -0.068]<br><br><em>Parameterization:</em><br>x0: 0.625<br>x1: 0.125<br>x2: 0.875<br>x3: 0.625<br>x4: 0.625<br>x5: 0.875","<b>Arm 0_7</b><br><br>Batch 1: -0.441 [-0.637, -0.245]<br>Batch 0: -0.402 [-0.598, -0.206]<br><br><em>Parameterization:</em><br>x0: 0.125<br>x1: 0.625<br>x2: 0.375<br>x3: 0.125<br>x4: 0.125<br>x5: 0.375","<b>Arm 0_8</b><br><br>Batch 1: 0.557 [0.361, 0.753]<br>Batch 0: -0.058 [-0.254, 0.138]<br><br><em>Parameterization:</em><br>x0: 0.1875<br>x1: 0.3125<br>x2: 0.9375<br>x3: 0.4375<br>x4: 0.5625<br>x5: 0.3125","<b>Arm 0_9</b><br><br>Batch 1: 1.705 [1.509, 1.901]<br>Batch 0: -0.056 [-0.252, 0.140]<br><br><em>Parameterization:</em><br>x0: 0.6875<br>x1: 0.8125<br>x2: 0.4375<br>x3: 0.9375<br>x4: 0.0625<br>x5: 0.8125","<b>Arm 0_10</b><br><br>Batch 1: -0.57 [-0.766, -0.374]<br>Batch 0: -0.458 [-0.654, -0.262]<br><br><em>Parameterization:</em><br>x0: 0.9375<br>x1: 0.0625<br>x2: 0.6875<br>x3: 0.1875<br>x4: 0.3125<br>x5: 0.5625","<b>Arm 0_11</b><br><br>Batch 1: -1.214 [-1.410, -1.018]<br>Batch 0: -1.042 [-1.238, -0.846]<br><br><em>Parameterization:</em><br>x0: 0.4375<br>x1: 0.5625<br>x2: 0.1875<br>x3: 0.6875<br>x4: 0.8125<br>x5: 0.0625","<b>Arm 0_12</b><br><br>Batch 1: 1.347 [1.151, 1.543]<br>Batch 0: -0.312 [-0.508, -0.116]<br><br><em>Parameterization:</em><br>x0: 0.3125<br>x1: 0.1875<br>x2: 0.3125<br>x3: 0.5625<br>x4: 0.9375<br>x5: 0.4375","<b>Arm 0_13</b><br><br>Batch 1: 0.048 [-0.148, 0.244]<br>Batch 0: -0.364 [-0.560, -0.168]<br><br><em>Parameterization:</em><br>x0: 0.8125<br>x1: 0.6875<br>x2: 0.8125<br>x3: 0.0625<br>x4: 0.4375<br>x5: 0.9375","<b>Arm 0_14</b><br><br>Batch 1: 1.399 [1.203, 1.595]<br>Batch 0: -0.202 [-0.398, -0.006]<br><br><em>Parameterization:</em><br>x0: 0.5625<br>x1: 0.4375<br>x2: 0.0625<br>x3: 0.8125<br>x4: 0.1875<br>x5: 0.6875","<b>Arm 0_15</b><br><br>Batch 1: 0.746 [0.550, 0.942]<br>Batch 0: -0.164 [-0.360, 0.032]<br><br><em>Parameterization:</em><br>x0: 0.0625<br>x1: 0.9375<br>x2: 0.5625<br>x3: 0.3125<br>x4: 0.6875<br>x5: 0.1875","<b>Arm 0_16</b><br><br>Batch 1: -0.118 [-0.314, 0.078]<br>Batch 0: -0.269 [-0.465, -0.073]<br><br><em>Parameterization:</em><br>x0: 0.09375<br>x1: 0.46875<br>x2: 0.46875<br>x3: 0.65625<br>x4: 0.28125<br>x5: 0.96875","<b>Arm 0_17</b><br><br>Batch 1: 1.591 [1.395, 1.787]<br>Batch 0: 0.047 [-0.149, 0.243]<br><br><em>Parameterization:</em><br>x0: 0.59375<br>x1: 0.96875<br>x2: 0.96875<br>x3: 0.15625<br>x4: 0.78125<br>x5: 0.46875","<b>Arm 0_18</b><br><br>Batch 1: 1.791 [1.595, 1.987]<br>Batch 0: -0.026 [-0.222, 0.170]<br><br><em>Parameterization:</em><br>x0: 0.84375<br>x1: 0.21875<br>x2: 0.21875<br>x3: 0.90625<br>x4: 0.53125<br>x5: 0.21875","<b>Arm 0_19</b><br><br>Batch 1: -0.219 [-0.415, -0.023]<br>Batch 0: -0.313 [-0.509, -0.117]<br><br><em>Parameterization:</em><br>x0: 0.34375<br>x1: 0.71875<br>x2: 0.71875<br>x3: 0.40625<br>x4: 0.03125<br>x5: 0.71875","<b>Arm 0_20</b><br><br>Batch 1: -1.686 [-1.882, -1.490]<br>Batch 0: -1.278 [-1.474, -1.082]<br><br><em>Parameterization:</em><br>x0: 0.46875<br>x1: 0.09375<br>x2: 0.84375<br>x3: 0.28125<br>x4: 0.15625<br>x5: 0.84375","<b>Arm 0_21</b><br><br>Batch 1: 1.628 [1.432, 1.824]<br>Batch 0: -0.002 [-0.198, 0.194]<br><br><em>Parameterization:</em><br>x0: 0.96875<br>x1: 0.59375<br>x2: 0.34375<br>x3: 0.78125<br>x4: 0.65625<br>x5: 0.34375","<b>Arm 0_22</b><br><br>Batch 1: 1.608 [1.412, 1.804]<br>Batch 0: -0.053 [-0.249, 0.143]<br><br><em>Parameterization:</em><br>x0: 0.71875<br>x1: 0.34375<br>x2: 0.59375<br>x3: 0.03125<br>x4: 0.90625<br>x5: 0.09375","<b>Arm 0_23</b><br><br>Batch 1: 0.454 [0.258, 0.650]<br>Batch 0: -0.382 [-0.578, -0.186]<br><br><em>Parameterization:</em><br>x0: 0.21875<br>x1: 0.84375<br>x2: 0.09375<br>x3: 0.53125<br>x4: 0.40625<br>x5: 0.59375","<b>Arm 0_24</b><br><br>Batch 1: 1.329 [1.133, 1.525]<br>Batch 0: -0.089 [-0.285, 0.107]<br><br><em>Parameterization:</em><br>x0: 0.15625<br>x1: 0.15625<br>x2: 0.53125<br>x3: 0.84375<br>x4: 0.84375<br>x5: 0.65625","<b>Arm 0_25</b><br><br>Batch 1: -0.446 [-0.642, -0.250]<br>Batch 0: -0.414 [-0.610, -0.218]<br><br><em>Parameterization:</em><br>x0: 0.65625<br>x1: 0.65625<br>x2: 0.03125<br>x3: 0.34375<br>x4: 0.34375<br>x5: 0.15625","<b>Arm 0_26</b><br><br>Batch 1: 1.456 [1.260, 1.652]<br>Batch 0: -0.129 [-0.325, 0.067]<br><br><em>Parameterization:</em><br>x0: 0.90625<br>x1: 0.40625<br>x2: 0.78125<br>x3: 0.59375<br>x4: 0.09375<br>x5: 0.40625","<b>Arm 0_27</b><br><br>Batch 1: 1.395 [1.199, 1.591]<br>Batch 0: -0.172 [-0.368, 0.024]<br><br><em>Parameterization:</em><br>x0: 0.40625<br>x1: 0.90625<br>x2: 0.28125<br>x3: 0.09375<br>x4: 0.59375<br>x5: 0.90625","<b>Arm 0_28</b><br><br>Batch 1: 0.773 [0.577, 0.969]<br>Batch 0: -0.196 [-0.392, -0.000]<br><br><em>Parameterization:</em><br>x0: 0.28125<br>x1: 0.28125<br>x2: 0.15625<br>x3: 0.21875<br>x4: 0.71875<br>x5: 0.53125","<b>Arm 0_29</b><br><br>Batch 1: 0.458 [0.262, 0.654]<br>Batch 0: -0.153 [-0.349, 0.043]<br><br><em>Parameterization:</em><br>x0: 0.78125<br>x1: 0.78125<br>x2: 0.65625<br>x3: 0.71875<br>x4: 0.21875<br>x5: 0.03125","<b>Arm 0_30</b><br><br>Batch 1: -0.345 [-0.541, -0.149]<br>Batch 0: -0.267 [-0.463, -0.071]<br><br><em>Parameterization:</em><br>x0: 0.53125<br>x1: 0.03125<br>x2: 0.40625<br>x3: 0.46875<br>x4: 0.46875<br>x5: 0.28125","<b>Arm 0_31</b><br><br>Batch 1: 1.706 [1.510, 1.902]<br>Batch 0: -0.039 [-0.235, 0.157]<br><br><em>Parameterization:</em><br>x0: 0.03125<br>x1: 0.53125<br>x2: 0.90625<br>x3: 0.96875<br>x4: 0.96875<br>x5: 0.78125","<b>Arm 0_32</b><br><br>Batch 1: -1.345 [-1.541, -1.149]<br>Batch 0: -1.09 [-1.286, -0.894]<br><br><em>Parameterization:</em><br>x0: 0.046875<br>x1: 0.265625<br>x2: 0.703125<br>x3: 0.546875<br>x4: 0.140625<br>x5: 0.921875","<b>Arm 0_33</b><br><br>Batch 1: 1.464 [1.268, 1.660]<br>Batch 0: 0.032 [-0.164, 0.228]<br><br><em>Parameterization:</em><br>x0: 0.546875<br>x1: 0.765625<br>x2: 0.203125<br>x3: 0.046875<br>x4: 0.640625<br>x5: 0.421875","<b>Arm 0_34</b><br><br>Batch 1: 1.661 [1.465, 1.857]<br>Batch 0: 0.02 [-0.176, 0.216]<br><br><em>Parameterization:</em><br>x0: 0.796875<br>x1: 0.015625<br>x2: 0.953125<br>x3: 0.796875<br>x4: 0.890625<br>x5: 0.171875","<b>Arm 0_35</b><br><br>Batch 1: -2.589 [-2.785, -2.393]<br>Batch 0: -1.639 [-1.835, -1.443]<br><br><em>Parameterization:</em><br>x0: 0.296875<br>x1: 0.515625<br>x2: 0.453125<br>x3: 0.296875<br>x4: 0.390625<br>x5: 0.671875","<b>Arm 0_36</b><br><br>Batch 1: -2.208 [-2.404, -2.012]<br>Batch 0: -1.768 [-1.964, -1.572]<br><br><em>Parameterization:</em><br>x0: 0.421875<br>x1: 0.140625<br>x2: 0.078125<br>x3: 0.421875<br>x4: 0.265625<br>x5: 0.796875","<b>Arm 0_37</b><br><br>Batch 1: 1.621 [1.425, 1.817]<br>Batch 0: -0.044 [-0.240, 0.152]<br><br><em>Parameterization:</em><br>x0: 0.921875<br>x1: 0.640625<br>x2: 0.578125<br>x3: 0.921875<br>x4: 0.765625<br>x5: 0.296875","<b>Arm 0_38</b><br><br>Batch 1: 1.533 [1.337, 1.729]<br>Batch 0: -0.056 [-0.252, 0.140]<br><br><em>Parameterization:</em><br>x0: 0.671875<br>x1: 0.390625<br>x2: 0.328125<br>x3: 0.171875<br>x4: 0.515625<br>x5: 0.046875","<b>Arm 0_39</b><br><br>Batch 1: 1.417 [1.221, 1.613]<br>Batch 0: -0.04 [-0.236, 0.156]<br><br><em>Parameterization:</em><br>x0: 0.171875<br>x1: 0.890625<br>x2: 0.828125<br>x3: 0.671875<br>x4: 0.015625<br>x5: 0.546875","<b>Arm 0_40</b><br><br>Batch 1: 1.866 [1.670, 2.062]<br>Batch 0: -0.009 [-0.205, 0.187]<br><br><em>Parameterization:</em><br>x0: 0.234375<br>x1: 0.078125<br>x2: 0.265625<br>x3: 0.984375<br>x4: 0.703125<br>x5: 0.734375","<b>Arm 0_41</b><br><br>Batch 1: 0.36 [0.164, 0.556]<br>Batch 0: -0.25 [-0.446, -0.054]<br><br><em>Parameterization:</em><br>x0: 0.734375<br>x1: 0.578125<br>x2: 0.765625<br>x3: 0.484375<br>x4: 0.203125<br>x5: 0.234375","<b>Arm 0_42</b><br><br>Batch 1: 1.603 [1.407, 1.799]<br>Batch 0: -0.075 [-0.271, 0.121]<br><br><em>Parameterization:</em><br>x0: 0.984375<br>x1: 0.328125<br>x2: 0.015625<br>x3: 0.734375<br>x4: 0.453125<br>x5: 0.484375","<b>Arm 0_43</b><br><br>Batch 1: 1.925 [1.729, 2.121]<br>Batch 0: 0.039 [-0.157, 0.235]<br><br><em>Parameterization:</em><br>x0: 0.484375<br>x1: 0.828125<br>x2: 0.515625<br>x3: 0.234375<br>x4: 0.953125<br>x5: 0.984375","<b>Arm 0_44</b><br><br>Batch 1: 1.458 [1.262, 1.654]<br>Batch 0: -0.165 [-0.361, 0.031]<br><br><em>Parameterization:</em><br>x0: 0.359375<br>x1: 0.453125<br>x2: 0.890625<br>x3: 0.109375<br>x4: 0.828125<br>x5: 0.609375","<b>Arm 0_45</b><br><br>Batch 1: 1.436 [1.240, 1.632]<br>Batch 0: -0.182 [-0.378, 0.014]<br><br><em>Parameterization:</em><br>x0: 0.859375<br>x1: 0.953125<br>x2: 0.390625<br>x3: 0.609375<br>x4: 0.328125<br>x5: 0.109375","<b>Arm 0_46</b><br><br>Batch 1: -0.317 [-0.513, -0.121]<br>Batch 0: -0.23 [-0.426, -0.034]<br><br><em>Parameterization:</em><br>x0: 0.609375<br>x1: 0.203125<br>x2: 0.640625<br>x3: 0.359375<br>x4: 0.078125<br>x5: 0.359375","<b>Arm 0_47</b><br><br>Batch 1: 1.736 [1.540, 1.932]<br>Batch 0: 0.056 [-0.140, 0.252]<br><br><em>Parameterization:</em><br>x0: 0.109375<br>x1: 0.703125<br>x2: 0.140625<br>x3: 0.859375<br>x4: 0.578125<br>x5: 0.859375","<b>Arm 0_48</b><br><br>Batch 1: 1.029 [0.833, 1.225]<br>Batch 0: -0.078 [-0.274, 0.118]<br><br><em>Parameterization:</em><br>x0: 0.078125<br>x1: 0.234375<br>x2: 0.796875<br>x3: 0.140625<br>x4: 0.421875<br>x5: 0.078125","<b>Arm 0_49</b><br><br>Batch 1: 1.567 [1.371, 1.763]<br>Batch 0: 0.138 [-0.058, 0.334]<br><br><em>Parameterization:</em><br>x0: 0.578125<br>x1: 0.734375<br>x2: 0.296875<br>x3: 0.640625<br>x4: 0.921875<br>x5: 0.578125"],"type":"scatter","visible":true,"x":[1.7700382985508498,-0.6464606408080965,1.4061055304559897,-0.9735656246649717,0.777743968037421,1.8078938816346353,1.2937343980350895,-0.44078931792897635,0.5569435660543659,1.705145103195903,-0.5699134172501671,-1.2139661404875708,1.3474256915802356,0.04762057196224995,1.3985305825841572,0.745683733186832,-0.11813053228274509,1.5914595920399996,1.7905561166782658,-0.21897728875795924,-1.6862981755511286,1.6278451154473048,1.6075615118794198,0.45394283049838136,1.329042723777141,-0.4459003494202796,1.4557667509921839,1.3950490321663047,0.7731038286917461,0.4581700712672664,-0.34486538298325764,1.7055407400886282,-1.3449054865612016,1.4639263983456674,1.661135065272404,-2.58911374345566,-2.208484073456092,1.6205683568914147,1.533171895325946,1.4166154372467645,1.8660643183516459,0.359548429651395,1.6032883799532371,1.9250692910913272,1.458292434111926,1.4363554816039363,-0.31700441717350286,1.7355364966927265,1.0289560464891887,1.5669139764621798],"y":[0.15947059659879304,-0.4214710531615327,-0.02514347351385365,-0.7695723553638224,-0.2450487624258817,-0.06685838576162782,-0.2637375962024425,-0.4023967266593646,-0.058237883302871524,-0.056045106891303265,-0.45814895701368735,-1.0418795741667528,-0.31160370147239375,-0.36410387327683885,-0.20225234831863487,-0.16449730816295643,-0.2685929648457335,0.04708245313679936,-0.025907144264236404,-0.31325343113889703,-1.2784639617222915,-0.002216107155941432,-0.05312999311856802,-0.3823562996853963,-0.0887413073636951,-0.413543770193174,-0.12863810801679998,-0.1723216491981829,-0.1962106481149761,-0.1534608122657341,-0.267219775134233,-0.03934977783037375,-1.0901585808910998,0.031857657165936124,0.019836077132222685,-1.6388202621777606,-1.7684980504090244,-0.04385195950396198,-0.05630194716034775,-0.04041285184604944,-0.00854199344113239,-0.24983299385451238,-0.0752320295084846,0.0390019942848305,-0.1647177746442758,-0.18191908061898776,-0.2301057063480028,0.05594618290400956,-0.07779289025206994,0.13839426909986313]}],"layout":{"annotations":[{"showarrow":false,"text":"Show CI","x":1.125,"xanchor":"left","xref":"paper","y":0.9,"yanchor":"middle","yref":"paper"}],"height":500,"hovermode":"closest","showlegend":false,"template":{"data":{"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"contour"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"heatmap"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"heatmapgl"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"histogram2d"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"histogram2dcontour"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"sequentialminus":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"#E5ECF6","showlakes":true,"showland":true,"subunitcolor":"white"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2}}},"title":{"text":"Repeated arms across trials"},"updatemenus":[{"buttons":[{"args":[{"visible":[true,true]},{"xaxis.range":[-3.0304228951830097,2.366378442818677],"yaxis.range":[-3.0304228951830097,2.366378442818677]}],"label":"objective","method":"update"}],"x":0,"xanchor":"left","y":1.125,"yanchor":"top"},{"buttons":[{"args":[{"error_x.thickness":2,"error_x.width":4,"error_y.thickness":2,"error_y.width":4}],"label":"Yes","method":"restyle"},{"args":[{"error_x.thickness":0,"error_x.width":0,"error_y.thickness":0,"error_y.width":0}],"label":"No","method":"restyle"}],"x":1.125,"xanchor":"left","y":0.8,"yanchor":"middle"}],"width":530,"xaxis":{"linecolor":"black","linewidth":0.5,"mirror":true,"range":[-3.0304228951830097,2.366378442818677],"title":{"text":"Batch 1"},"zeroline":false},"yaxis":{"linecolor":"black","linewidth":0.5,"mirror":true,"range":[-3.0304228951830097,2.366378442818677],"title":{"text":"Batch 0"},"zeroline":false}}}')}}]);