"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4077],{81533:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var r=n(74848),i=n(28453),o=n(38987),l=n(31023),a=n(70290);const s={title:"Scheduler",sidebar_label:"Scheduler"},c="Configurable closed-loop optimization with Ax Scheduler",d={id:"tutorials/scheduler/index",title:"Scheduler",description:"<LinkButtons",source:"@site/versioned_docs/version-0.9.1/tutorials/scheduler/index.mdx",sourceDirName:"tutorials/scheduler",slug:"/tutorials/scheduler/",permalink:"/Ax/docs/0.9.1/tutorials/scheduler/",draft:!1,unlisted:!1,tags:[],version:"0.9.1",lastUpdatedBy:"Cristian Lara",lastUpdatedAt:17325745e5,frontMatter:{title:"Scheduler",sidebar_label:"Scheduler"},sidebar:"tutorials",previous:{title:"Generation Strategy",permalink:"/Ax/docs/0.9.1/tutorials/generation_strategy/"},next:{title:"Modular `BoTorchModel`",permalink:"/Ax/docs/0.9.1/tutorials/modular_botax/"}},h={},u=[{value:"Contents:",id:"contents",level:3},{value:"1. <code>Scheduler</code> and external systems for trial evaluation",id:"1-scheduler-and-external-systems-for-trial-evaluation",level:2},{value:"2. Set up a mock external execution system",id:"2-set-up-a-mock-external-execution-system",level:2},{value:"3. Set up an experiment according to the mock external system",id:"3-set-up-an-experiment-according-to-the-mock-external-system",level:2},{value:"4. Setting up a <code>Scheduler</code>",id:"4-setting-up-a-scheduler",level:2},{value:"4A. Auto-selecting a generation strategy",id:"4a-auto-selecting-a-generation-strategy",level:3},{value:"4B. Optional: Defining a plotting function",id:"4b-optional-defining-a-plotting-function",level:3},{value:"5. Running the optimization",id:"5-running-the-optimization",level:2},{value:"6. Leveraging SQL storage and experiment resumption",id:"6-leveraging-sql-storage-and-experiment-resumption",level:2},{value:"7. Configuring the scheduler with <code>SchedulerOptions</code>, like early stopping",id:"7-configuring-the-scheduler-with-scheduleroptions-like-early-stopping",level:2},{value:"8. Advanced functionality",id:"8-advanced-functionality",level:2},{value:"8a. Reporting results to an external system",id:"8a-reporting-results-to-an-external-system",level:3},{value:"8b. Using <code>run_trials_and_yield_results</code> generator method",id:"8b-using-run_trials_and_yield_results-generator-method",level:3}];function p(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.A,{githubUrl:"https://github.com/cristianlara/Ax/blob/main/tutorials/scheduler.ipynb",colabUrl:"https://colab.research.google.com/github/cristianlara/Ax/blob/main/tutorials/scheduler.ipynb"}),"\n",(0,r.jsx)(t.header,{children:(0,r.jsxs)(t.h1,{id:"configurable-closed-loop-optimization-with-ax-scheduler",children:["Configurable closed-loop optimization with Ax ",(0,r.jsx)(t.code,{children:"Scheduler"})]})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsxs)(t.em,{children:["We recommend reading through the\n",(0,r.jsx)(t.a,{href:"https://ax.dev/tutorials/gpei_hartmann_developer.html",children:'"Developer API" tutorial'})," before\ngetting started with the ",(0,r.jsx)(t.code,{children:"Scheduler"}),", as using it in this tutorial will require an Ax\n",(0,r.jsx)(t.code,{children:"Experiment"})," and an understanding of the experiment's subcomponents like the search\nspace and the runner."]})}),"\n",(0,r.jsx)(t.h3,{id:"contents",children:"Contents:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Scheduler and external systems for trial evalution"})," \u2013\u2013\xa0overview of how scheduler\nworks with an external system to run a closed-loop optimization."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Set up a mock external system"})," \u2013\u2013 creating a dummy external system client, which\nwill be used to illustrate a scheduler setup in this tutorial."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Set up an experiment according to the mock external system"})," \u2013\u2013\xa0set up a runner\nthat deploys trials to the dummy external system from part 2 and a metric that\nfetches trial results from that system, then leverage those runner and metric and set\nup an experiment."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Set up a scheduler"}),", given an experiment.","\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a scheduler subclass to poll trial status."}),"\n",(0,r.jsx)(t.li,{children:"Set up a generation strategy using an auto-selection utility."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Running the optimization"})," via ",(0,r.jsx)(t.code,{children:"Scheduler.run_n_trials"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Leveraging SQL storage and experiment resumption"})," \u2013\u2013 resuming an experiment in one\nline of code."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Configuring the scheduler"})," \u2013\u2013\xa0overview of the many options scheduler provides to\nconfigure the closed-loop down to granular detail."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Advanced functionality"}),":","\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Reporting results to an external system during the optimization."}),"\n",(0,r.jsxs)(t.li,{children:["Using ",(0,r.jsx)(t.code,{children:"Scheduler.run_trials_and_yield_results"})," to run the optimization via a\ngenerator method."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.h2,{id:"1-scheduler-and-external-systems-for-trial-evaluation",children:["1. ",(0,r.jsx)(t.code,{children:"Scheduler"})," and external systems for trial evaluation"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Scheduler"})," is a closed-loop manager class in Ax that continuously deploys trial runs to\nan arbitrary external system in an asynchronous fashion, polls their status from that\nsystem, and leverages known trial results to generate more trials."]}),"\n",(0,r.jsxs)(t.p,{children:["Key features of the ",(0,r.jsx)(t.code,{children:"Scheduler"}),":"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Maintains user-set concurrency limits for trials run in parallel, keep track of\ntolerated level of failed trial runs, and 'oversee' the optimization in other ways,"}),"\n",(0,r.jsxs)(t.li,{children:["Leverages an Ax ",(0,r.jsx)(t.code,{children:"Experiment"})," for optimization setup (an optimization config with\nmetrics, a search space, a runner for trial evaluations),"]}),"\n",(0,r.jsxs)(t.li,{children:["Uses an Ax ",(0,r.jsx)(t.code,{children:"GenerationStrategy"})," for flexible specification of an optimization\nalgorithm used to generate new trials to run,"]}),"\n",(0,r.jsx)(t.li,{children:"Supports SQL storage and allows for easy resumption of stored experiments."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"This scheme summarizes how the scheduler interacts with any external system used to run\ntrial evaluations:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"attachment:image-2.png",alt:"image-2.png"})}),"\n",(0,r.jsx)(t.h2,{id:"2-set-up-a-mock-external-execution-system",children:"2. Set up a mock external execution system"}),"\n",(0,r.jsx)(t.p,{children:"An example of an 'external system' running trial evaluations could be a remote server\nexecuting scheduled jobs, a subprocess conducting ML training runs, an engine running\nphysics simulations, etc. For the sake of example here, let us assume a dummy external\nsystem with the following client:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from random import randint\nfrom time import time\nfrom typing import Any, Dict, NamedTuple, Union\n\nfrom ax.core.base_trial import TrialStatus\nfrom ax.utils.measurement.synthetic_functions import branin\n\n\nclass MockJob(NamedTuple):\n    """Dummy class to represent a job scheduled on `MockJobQueue`."""\n\n    id: int\n    parameters: Dict[str, Union[str, float, int, bool]]\n\n\nclass MockJobQueueClient:\n    """Dummy class to represent a job queue where the Ax `Scheduler` will\n    deploy trial evaluation runs during optimization.\n    """\n\n    jobs: Dict[str, MockJob] = {}\n\n    def schedule_job_with_parameters(\n        self, parameters: Dict[str, Union[str, float, int, bool]]\n    ) -> int:\n        """Schedules an evaluation job with given parameters and returns job ID."""\n        # Code to actually schedule the job and produce an ID would go here;\n        # using timestamp in microseconds as dummy ID for this example.\n        job_id = int(time() * 1e6)\n        self.jobs[job_id] = MockJob(job_id, parameters)\n        return job_id\n\n    def get_job_status(self, job_id: int) -> TrialStatus:\n        """ "Get status of the job by a given ID. For simplicity of the example,\n        return an Ax `TrialStatus`.\n        """\n        job = self.jobs[job_id]\n        # Instead of randomizing trial status, code to check actual job status\n        # would go here.\n        if randint(0, 3) > 0:\n            return TrialStatus.COMPLETED\n        return TrialStatus.RUNNING\n\n    def get_outcome_value_for_completed_job(self, job_id: int) -> Dict[str, float]:\n        """Get evaluation results for a given completed job."""\n        job = self.jobs[job_id]\n        # In a real external system, this would retrieve real relevant outcomes and\n        # not a synthetic function value.\n        return {"branin": branin(job.parameters.get("x1"), job.parameters.get("x2"))}\n\n\nMOCK_JOB_QUEUE_CLIENT = MockJobQueueClient()\n\n\ndef get_mock_job_queue_client() -> MockJobQueueClient:\n    """Obtain the singleton job queue instance."""\n    return MOCK_JOB_QUEUE_CLIENT\n'})}),"\n",(0,r.jsx)(t.h2,{id:"3-set-up-an-experiment-according-to-the-mock-external-system",children:"3. Set up an experiment according to the mock external system"}),"\n",(0,r.jsxs)(t.p,{children:["As mentioned above, using a ",(0,r.jsx)(t.code,{children:"Scheduler"}),' requires a fully set up experiment with metrics\nand a runner. Refer to the "Building Blocks of Ax" tutorial to learn more about those\ncomponents, as here we assume familiarity with them.']}),"\n",(0,r.jsxs)(t.p,{children:["The following runner and metric set up intractions between the ",(0,r.jsx)(t.code,{children:"Scheduler"})," and the mock\nexternal system we assume:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from collections import defaultdict\nfrom typing import Iterable, Set\n\nfrom ax.core.base_trial import BaseTrial\nfrom ax.core.runner import Runner\nfrom ax.core.trial import Trial\n\n\nclass MockJobRunner(Runner):  # Deploys trials to external system.\n    def run(self, trial: BaseTrial) -> Dict[str, Any]:\n        """Deploys a trial based on custom runner subclass implementation.\n\n        Args:\n            trial: The trial to deploy.\n\n        Returns:\n            Dict of run metadata from the deployment process.\n        """\n        if not isinstance(trial, Trial):\n            raise ValueError("This runner only handles `Trial`.")\n\n        mock_job_queue = get_mock_job_queue_client()\n        job_id = mock_job_queue.schedule_job_with_parameters(\n            parameters=trial.arm.parameters\n        )\n        # This run metadata will be attached to trial as `trial.run_metadata`\n        # by the base `Scheduler`.\n        return {"job_id": job_id}\n\n    def poll_trial_status(\n        self, trials: Iterable[BaseTrial]\n    ) -> Dict[TrialStatus, Set[int]]:\n        """Checks the status of any non-terminal trials and returns their\n        indices as a mapping from TrialStatus to a list of indices. Required\n        for runners used with Ax ``Scheduler``.\n\n        NOTE: Does not need to handle waiting between polling calls while trials\n        are running; this function should just perform a single poll.\n\n        Args:\n            trials: Trials to poll.\n\n        Returns:\n            A dictionary mapping TrialStatus to a list of trial indices that have\n            the respective status at the time of the polling. This does not need to\n            include trials that at the time of polling already have a terminal\n            (ABANDONED, FAILED, COMPLETED) status (but it may).\n        """\n        status_dict = defaultdict(set)\n        for trial in trials:\n            mock_job_queue = get_mock_job_queue_client()\n            status = mock_job_queue.get_job_status(\n                job_id=trial.run_metadata.get("job_id")\n            )\n            status_dict[status].add(trial.index)\n\n        return status_dict\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import pandas as pd\n\nfrom ax.core.metric import Metric, MetricFetchResult, MetricFetchE\nfrom ax.core.base_trial import BaseTrial\nfrom ax.core.data import Data\nfrom ax.utils.common.result import Ok, Err\n\n\nclass BraninForMockJobMetric(Metric):  # Pulls data for trial from external system.\n    def fetch_trial_data(self, trial: BaseTrial) -> MetricFetchResult:\n        """Obtains data via fetching it from ` for a given trial."""\n        if not isinstance(trial, Trial):\n            raise ValueError("This metric only handles `Trial`.")\n\n        try:\n            mock_job_queue = get_mock_job_queue_client()\n\n            # Here we leverage the "job_id" metadata created by `MockJobRunner.run`.\n            branin_data = mock_job_queue.get_outcome_value_for_completed_job(\n                job_id=trial.run_metadata.get("job_id")\n            )\n            df_dict = {\n                "trial_index": trial.index,\n                "metric_name": "branin",\n                "arm_name": trial.arm.name,\n                "mean": branin_data.get("branin"),\n                # Can be set to 0.0 if function is known to be noiseless\n                # or to an actual value when SEM is known. Setting SEM to\n                # `None` results in Ax assuming unknown noise and inferring\n                # noise level from data.\n                "sem": None,\n            }\n            return Ok(value=Data(df=pd.DataFrame.from_records([df_dict])))\n        except Exception as e:\n            return Err(\n                MetricFetchE(message=f"Failed to fetch {self.name}", exception=e)\n            )\n'})}),"\n",(0,r.jsx)(t.p,{children:"Now we can set up the experiment using the runner and metric we defined. This experiment\nwill have a single-objective optimization config, minimizing the Branin function, and\nthe search space that corresponds to that function."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from ax import *\n\n\ndef make_branin_experiment_with_runner_and_metric() -> Experiment:\n    parameters = [\n        RangeParameter(\n            name="x1",\n            parameter_type=ParameterType.FLOAT,\n            lower=-5,\n            upper=10,\n        ),\n        RangeParameter(\n            name="x2",\n            parameter_type=ParameterType.FLOAT,\n            lower=0,\n            upper=15,\n        ),\n    ]\n\n    objective = Objective(metric=BraninForMockJobMetric(name="branin"), minimize=True)\n\n    return Experiment(\n        name="branin_test_experiment",\n        search_space=SearchSpace(parameters=parameters),\n        optimization_config=OptimizationConfig(objective=objective),\n        runner=MockJobRunner(),\n        is_test=True,  # Marking this experiment as a test experiment.\n    )\n\n\nexperiment = make_branin_experiment_with_runner_and_metric()\n'})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,r.jsxs)(t.h2,{id:"4-setting-up-a-scheduler",children:["4. Setting up a ",(0,r.jsx)(t.code,{children:"Scheduler"})]}),"\n",(0,r.jsx)(t.h3,{id:"4a-auto-selecting-a-generation-strategy",children:"4A. Auto-selecting a generation strategy"}),"\n",(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(t.code,{children:"Scheduler"})," requires an Ax ",(0,r.jsx)(t.code,{children:"GenerationStrategy"})," specifying the algorithm to use for\nthe optimization. Here we use the ",(0,r.jsx)(t.code,{children:"choose_generation_strategy"})," utility that auto-picks a\ngeneration strategy based on the search space properties. To construct a custom\ngeneration strategy instead, refer to the\n",(0,r.jsx)(t.a,{href:"https://ax.dev/tutorials/generation_strategy.html",children:'"Generation Strategy" tutorial'}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Importantly, a generation strategy in Ax limits allowed parallelism levels for each\ngeneration step it contains. If you would like the ",(0,r.jsx)(t.code,{children:"Scheduler"})," to ensure parallelism\nlimitations, set ",(0,r.jsx)(t.code,{children:"max_examples"})," on each generation step in your generation strategy."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from ax.modelbridge.dispatch_utils import choose_generation_strategy\n\ngeneration_strategy = choose_generation_strategy(\n    search_space=experiment.search_space,\n    max_parallelism_cap=3,\n)\n"})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] ax.modelbridge.dispatch_utils: Using Models.BOTORCH_MODULAR since there is at least one ordered parameter and there are no unordered categorical parameters."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] ax.modelbridge.dispatch_utils: Calculating the number of remaining initialization trials based on num_initialization_trials=None max_initialization_trials=None num_tunable_parameters=2 num_trials=None use_batch_trials=False"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] ax.modelbridge.dispatch_utils: calculated num_initialization_trials=5"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] ax.modelbridge.dispatch_utils: num_completed_initialization_trials=0 num_remaining_initialization_trials=5"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] ax.modelbridge.dispatch_utils: verbose, disable_progbar, and jit_compile are not yet supported when using choose_generation_strategy with ModularBoTorchModel, dropping these arguments."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] ax.modelbridge.dispatch_utils: Using Bayesian Optimization generation strategy: GenerationStrategy(name='Sobol+BoTorch', steps=[Sobol for 5 trials, BoTorch for subsequent trials]). Iterations after 5 will take longer to generate due to model-fitting."}),"\n",(0,r.jsx)(t.p,{children:"Now we have all the components needed to start the scheduler:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from ax.service.scheduler import Scheduler, SchedulerOptions\n\n\nscheduler = Scheduler(\n    experiment=experiment,\n    generation_strategy=generation_strategy,\n    options=SchedulerOptions(),\n)\n"})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] Scheduler: Scheduler requires experiment to have immutable search space and optimization config. Setting property immutable_search_space_and_opt_config to True on experiment."}),"\n",(0,r.jsx)(t.h3,{id:"4b-optional-defining-a-plotting-function",children:"4B. Optional: Defining a plotting function"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import numpy as np\nfrom ax.plot.trace import optimization_trace_single_method\nfrom ax.utils.notebook.plotting import render, init_notebook_plotting\n\ninit_notebook_plotting()\n\n\ndef get_plot():\n    best_objectives = np.array(\n        [[trial.objective_mean for trial in scheduler.experiment.trials.values()]]\n    )\n    best_objective_plot = optimization_trace_single_method(\n        y=np.minimum.accumulate(best_objectives, axis=1),\n        title="Model performance vs. # of iterations",\n        ylabel="Y",\n    )\n    return best_objective_plot\n'})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] ax.utils.notebook.plotting: Injecting Plotly library into cell. Do not overwrite or delete cell."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] ax.utils.notebook.plotting: Please see\n  (https://ax.dev/tutorials/visualizations.html#Fix-for-plots-that-are-not-rendering)\n  if visualizations are not rendering."}),"\n",(0,r.jsx)(t.h2,{id:"5-running-the-optimization",children:"5. Running the optimization"}),"\n",(0,r.jsxs)(t.p,{children:["Once the ",(0,r.jsx)(t.code,{children:"Scheduler"})," instance is set up, user can execute ",(0,r.jsx)(t.code,{children:"run_n_trials"})," as many times\nas needed, and each execution will add up to the specified ",(0,r.jsx)(t.code,{children:"max_trials"})," trials to the\nexperiment. The number of trials actually run might be less than ",(0,r.jsx)(t.code,{children:"max_trials"})," if the\noptimization was concluded (e.g. there are no more points in the search space)."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"scheduler.run_n_trials(max_trials=3)\n"})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:22] Scheduler: Fetching data for newly completed trials: []."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:22] Scheduler: Running trials [0]..."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:23] Scheduler: Running trials [1]..."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:23] Scheduler: Running trials [2]..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:24] Scheduler: Fetching data for newly completed trials: 1 - 2."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:24] Scheduler: Retrieved COMPLETED trials: 1 - 2."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:24] Scheduler: Done submitting trials, waiting for remaining 1 running trials..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:24] Scheduler: Fetching data for newly completed trials: [0]."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:24] Scheduler: Retrieved COMPLETED trials: [0]."}),"\n",(0,r.jsx)(l.A,{children:"OptimizationResult()"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"best_objective_plot = get_plot()\nrender(best_objective_plot)\n"})}),"\n",(0,r.jsx)(a.z,{data:n(77579)}),"\n",(0,r.jsxs)(t.p,{children:["We can examine ",(0,r.jsx)(t.code,{children:"experiment"})," to see that it now has three trials:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from ax.service.utils.report_utils import exp_to_df\n\nexp_to_df(experiment)\n"})}),"\n",(0,r.jsx)(l.A,{children:"[WARNING 09-29 17:02:25] ax.service.utils.report_utils: Column reason missing for all trials. Not appending column."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"right"}}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"trial_index"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"arm_name"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"trial_status"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"generation_method"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"branin"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"x1"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"x2"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"0"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"0"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"0_0"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Sobol"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"31.5105"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"-1.27445"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"12.5633"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"1"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"1"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"1_0"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Sobol"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"58.2046"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"5.82909"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"7.4031"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"2"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"2"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"2_0"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Sobol"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"33.8565"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"9.23264"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"8.08675"})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["Now we can run ",(0,r.jsx)(t.code,{children:"run_n_trials"})," again to add three more trials to the experiment (this\ntime, without plotting)."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"scheduler.run_n_trials(max_trials=3)\n"})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:25] Scheduler: Fetching data for newly completed trials: []."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:25] Scheduler: Running trials [3]..."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/core/data.py:288: FutureWarning:\nThe behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:26] Scheduler: Running trials [4]..."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/core/data.py:288: FutureWarning:\nThe behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:28] Scheduler: Running trials [5]..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:29] Scheduler: Fetching data for newly completed trials: 4 - 5."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:29] Scheduler: Retrieved COMPLETED trials: 4 - 5."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:29] Scheduler: Done submitting trials, waiting for remaining 1 running trials..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:29] Scheduler: Fetching data for newly completed trials: [3]."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:29] Scheduler: Retrieved COMPLETED trials: [3]."}),"\n",(0,r.jsx)(l.A,{children:"OptimizationResult()"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"best_objective_plot = get_plot()\nrender(best_objective_plot)\n"})}),"\n",(0,r.jsx)(a.z,{data:n(39952)}),"\n",(0,r.jsx)(t.p,{children:"Examiniming the experiment, we now see 6 trials, one of which is produced by Bayesian\noptimization (GPEI):"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"exp_to_df(experiment)\n"})}),"\n",(0,r.jsx)(l.A,{children:"[WARNING 09-29 17:02:29] ax.service.utils.report_utils: Column reason missing for all trials. Not appending column."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"right"}}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"trial_index"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"arm_name"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"trial_status"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"generation_method"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"branin"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"x1"}),(0,r.jsx)(t.th,{style:{textAlign:"right"},children:"x2"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"0"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"0"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"0_0"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Sobol"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"31.5105"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"-1.27445"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"12.5633"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"1"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"1"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"1_0"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Sobol"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"58.2046"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"5.82909"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"7.4031"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"2"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"2"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"2_0"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Sobol"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"33.8565"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"9.23264"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"8.08675"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"3"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"3"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"3_0"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Sobol"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"9.05267"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"1.89288"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"2.00383"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"4"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"4"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"4_0"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Sobol"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"16.6389"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"-1.1721"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"9.74915"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"5"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"5"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"5_0"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"BoTorch"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"12.479"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"-2.8492"}),(0,r.jsx)(t.td,{style:{textAlign:"right"},children:"15"})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["For each call to ",(0,r.jsx)(t.code,{children:"run_n_trials"}),", one can specify a timeout; if ",(0,r.jsx)(t.code,{children:"run_n_trials"})," has been\nrunning for too long without finishing its ",(0,r.jsx)(t.code,{children:"max_trials"}),", the operation will exit\ngracefully:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"scheduler.run_n_trials(max_trials=3, timeout_hours=0.00001)\n"})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:30] Scheduler: Fetching data for newly completed trials: []."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] Scheduler: Running trials [6]..."}),"\n",(0,r.jsx)(l.A,{children:"[ERROR 09-29 17:02:31] Scheduler: Optimization timed out (timeout hours: 1e-05)!"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] Scheduler: should_abort_optimization is True, not running more trials."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] Scheduler: Fetching data for newly completed trials: [6]."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] Scheduler: Retrieved COMPLETED trials: [6]."}),"\n",(0,r.jsx)(l.A,{children:"[ERROR 09-29 17:02:31] Scheduler: Optimization timed out (timeout hours: 1e-05)!"}),"\n",(0,r.jsx)(l.A,{children:"OptimizationResult()"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"best_objective_plot = get_plot()\nrender(best_objective_plot)\n"})}),"\n",(0,r.jsx)(a.z,{data:n(87898)}),"\n",(0,r.jsx)(t.h2,{id:"6-leveraging-sql-storage-and-experiment-resumption",children:"6. Leveraging SQL storage and experiment resumption"}),"\n",(0,r.jsx)(t.p,{children:"When a scheduler is SQL-enabled, it will automatically save all updates it makes to the\nexperiment in the course of the optimization. The experiment can then be resumed in the\nevent of a crash or after a pause. The scheduler should be stateless and therefore, the\nscheduler itself is not saved in the database."}),"\n",(0,r.jsxs)(t.p,{children:["To store state of optimization to an SQL backend, first follow\n",(0,r.jsx)(t.a,{href:"https://ax.dev/docs/storage.html#sql",children:"setup instructions"})," on Ax website. Having set up\nthe SQL backend, pass ",(0,r.jsx)(t.code,{children:"DBSettings"})," to the ",(0,r.jsx)(t.code,{children:"Scheduler"})," on instantiation (note that\nSQLAlchemy dependency will have to be installed \u2013 for installation, refer to\n",(0,r.jsx)(t.a,{href:"https://ax.dev/docs/installation.html#optional-dependencies",children:"optional dependencies"})," on\nAx website):"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from ax.storage.registry_bundle import RegistryBundle\nfrom ax.storage.sqa_store.db import (\n    create_all_tables,\n    get_engine,\n    init_engine_and_session_factory,\n)\nfrom ax.storage.sqa_store.decoder import Decoder\nfrom ax.storage.sqa_store.encoder import Encoder\nfrom ax.storage.sqa_store.sqa_config import SQAConfig\nfrom ax.storage.sqa_store.structs import DBSettings\n\nbundle = RegistryBundle(\n    metric_clss={BraninForMockJobMetric: None}, runner_clss={MockJobRunner: None}\n)\n\n# URL is of the form "dialect+driver://username:password@host:port/database".\n# Instead of URL, can provide a `creator function`; can specify custom encoders/decoders if necessary.\ndb_settings = DBSettings(\n    url="sqlite:///foo.db",\n    encoder=bundle.encoder,\n    decoder=bundle.decoder,\n)\n\n# The following lines are only necessary because it is the first time we are using this database\n# in practice, you will not need to run these lines every time you initialize your scheduler\ninit_engine_and_session_factory(url=db_settings.url)\nengine = get_engine()\ncreate_all_tables(engine)\n\nstored_experiment = make_branin_experiment_with_runner_and_metric()\ngeneration_strategy = choose_generation_strategy(search_space=experiment.search_space)\n\nscheduler_with_storage = Scheduler(\n    experiment=stored_experiment,\n    generation_strategy=generation_strategy,\n    options=SchedulerOptions(),\n    db_settings=db_settings,\n)\n'})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.modelbridge.dispatch_utils: Using Models.BOTORCH_MODULAR since there is at least one ordered parameter and there are no unordered categorical parameters."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.modelbridge.dispatch_utils: Calculating the number of remaining initialization trials based on num_initialization_trials=None max_initialization_trials=None num_tunable_parameters=2 num_trials=None use_batch_trials=False"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.modelbridge.dispatch_utils: calculated num_initialization_trials=5"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.modelbridge.dispatch_utils: num_completed_initialization_trials=0 num_remaining_initialization_trials=5"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.modelbridge.dispatch_utils: verbose, disable_progbar, and jit_compile are not yet supported when using choose_generation_strategy with ModularBoTorchModel, dropping these arguments."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.modelbridge.dispatch_utils: Using Bayesian Optimization generation strategy: GenerationStrategy(name='Sobol+BoTorch', steps=[Sobol for 5 trials, BoTorch for subsequent trials]). Iterations after 5 will take longer to generate due to model-fitting."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] Scheduler: Scheduler requires experiment to have immutable search space and optimization config. Setting property immutable_search_space_and_opt_config to True on experiment."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.service.utils.with_db_settings_base: Experiment branin_test_experiment is not yet in DB, storing it."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.service.utils.with_db_settings_base: Generation strategy Sobol+BoTorch is not yet in DB, storing it."}),"\n",(0,r.jsx)(t.p,{children:"To resume a stored experiment:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'reloaded_experiment_scheduler = Scheduler.from_stored_experiment(\n    experiment_name="branin_test_experiment",\n    options=SchedulerOptions(),\n    # `DBSettings` are also required here so scheduler has access to the\n    # database, from which it needs to load the experiment.\n    db_settings=db_settings,\n)\n'})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.service.utils.with_db_settings_base: Loading experiment and generation strategy (with reduced state: True)..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.service.utils.with_db_settings_base: Loaded experiment branin_test_experiment & 0 trials in 0.01 seconds."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:31] ax.service.utils.with_db_settings_base: Loaded generation strategy for experiment branin_test_experiment in 0.09 seconds."}),"\n",(0,r.jsxs)(t.p,{children:["With the newly reloaded experiment, the ",(0,r.jsx)(t.code,{children:"Scheduler"})," can continue the optimization:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"reloaded_experiment_scheduler.run_n_trials(max_trials=3)\n"})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] Scheduler: Fetching data for newly completed trials: []."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:32] Scheduler: Running trials [0]..."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:32] Scheduler: Running trials [1]..."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:32] Scheduler: Running trials [2]..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] Scheduler: Fetching data for newly completed trials: 1 - 2."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] Scheduler: Retrieved COMPLETED trials: 1 - 2."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] Scheduler: Done submitting trials, waiting for remaining 1 running trials..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] Scheduler: Fetching data for newly completed trials: [0]."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] Scheduler: Retrieved COMPLETED trials: [0]."}),"\n",(0,r.jsx)(l.A,{children:"OptimizationResult()"}),"\n",(0,r.jsxs)(t.h2,{id:"7-configuring-the-scheduler-with-scheduleroptions-like-early-stopping",children:["7. Configuring the scheduler with ",(0,r.jsx)(t.code,{children:"SchedulerOptions"}),", like early stopping"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Scheduler"})," exposes many options to configure the exact settings of the closed-loop\noptimization to perform. A few notable ones are:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"trial_type"})," \u2013\u2013\xa0currently only ",(0,r.jsx)(t.code,{children:"Trial"})," and not ",(0,r.jsx)(t.code,{children:"BatchTrial"})," is supported, but support\nfor ",(0,r.jsx)(t.code,{children:"BatchTrial"}),"-s will follow,"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"tolerated_trial_failure_rate"})," and ",(0,r.jsx)(t.code,{children:"min_failed_trials_for_failure_rate_check"})," \u2013\u2013\ntogether these two settings control how the scheduler monitors the failure rate among\ntrial runs it deploys. Once ",(0,r.jsx)(t.code,{children:"min_failed_trials_for_failure_rate_check"})," is deployed,\nthe scheduler will start checking whether the ratio of failed to total trials is\ngreater than ",(0,r.jsx)(t.code,{children:"tolerated_trial_failure_rate"}),", and if it is, scheduler will exit the\noptimization with a ",(0,r.jsx)(t.code,{children:"FailureRateExceededError"}),","]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"ttl_seconds_for_trials"})," \u2013\u2013\xa0sometimes a failure in a trial run means that it will be\ndifficult to query its status (e.g. due to a crash). If this setting is specified, the\nAx ",(0,r.jsx)(t.code,{children:"Experiment"})," will automatically mark trials that have been running for too long\n(more than their 'time-to-live' (TTL) seconds) as failed,"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"run_trials_in_batches"})," \u2013\u2013\xa0if ",(0,r.jsx)(t.code,{children:"True"}),", the scheduler will attempt to run trials not by\ncalling ",(0,r.jsx)(t.code,{children:"Scheduler.run_trial"})," in a loop, but by calling ",(0,r.jsx)(t.code,{children:"Scheduler.run_trials"})," on all\nready-to-deploy trials at once. This could allow for saving compute in cases where the\ndeployment operation has large overhead and deploying many trials at once saves\ncompute. Note that using this option successfully will require your scheduler subclass\nto implement ",(0,r.jsx)(t.code,{children:"MySchedulerSubclass.run_trials"})," and\n",(0,r.jsx)(t.code,{children:"MySchedulerSubclass.poll_available_capacity"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"early_stopping_strategy"})," -- determines whether a trial should be stopped given the\ncurrent state of the experiment, so that less promising trials can be terminated\nquickly. For more on this, see the Trial-Level Early Stopping tutorial:\n",(0,r.jsx)(t.a,{href:"https://ax.dev/tutorials/early_stopping/early_stopping.html",children:"https://ax.dev/tutorials/early_stopping/early_stopping.html"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"global_stopping_strategy"})," -- determines whether the full optimization should be\nstopped or not, so that the run terminates when little progress is being made. A\n",(0,r.jsx)(t.code,{children:"global_stopping_strategy"})," instance can be passed to ",(0,r.jsx)(t.code,{children:"SchedulerOptions"})," just as it is\npassed to ",(0,r.jsx)(t.code,{children:"AxClient"}),", as illustrated in the tutorial on Global Stopping Strategy with\nAxClient: ",(0,r.jsx)(t.a,{href:"https://ax.dev/tutorials/gss.html",children:"https://ax.dev/tutorials/gss.html"})]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The rest of the options are described in the docstring below:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"print(SchedulerOptions.__doc__)\n"})}),"\n",(0,r.jsx)(l.A,{children:'Settings for a scheduler instance.\n  Attributes:\n      max_pending_trials: Maximum number of pending trials the scheduler\n          can have STAGED or RUNNING at once, required. If looking\n          to use Runner.poll_available_capacity as a primary guide for\n          how many trials should be pending at a given time, set this limit\n          to a high number, as an upper bound on number of trials that\n          should not be exceeded.\n      trial_type: Type of trials (1-arm Trial or multi-arm Batch\n          Trial) that will be deployed using the scheduler. Defaults\n          to 1-arm Trial. NOTE: use BatchTrial only if need to\n          evaluate multiple arms *together*, e.g. in an A/B-test\n          influenced by data nonstationarity. For cases where just\n          deploying multiple arms at once is beneficial but the trials\n          are evaluated *independently*, implement run_trials method\n          in scheduler subclass, to deploy multiple 1-arm trials at\n          the same time.\n      batch_size: If using BatchTrial the number of arms to be generated and\n          deployed per trial.\n      total_trials: Limit on number of trials a given Scheduler\n          should run. If no stopping criteria are implemented on\n          a given scheduler, exhaustion of this number of trials\n          will be used as default stopping criterion in\n          Scheduler.run_all_trials. Required to be non-null if\n          using Scheduler.run_all_trials (not required for\n          Scheduler.run_n_trials).\n      tolerated_trial_failure_rate: Fraction of trials in this\n          optimization that are allowed to fail without the whole\n          optimization ending. Expects value between 0 and 1.\n          NOTE: Failure rate checks begin once\n          min_failed_trials_for_failure_rate_check trials have\n          failed; after that point if the ratio of failed trials\n          to total trials ran so far exceeds the failure rate,\n          the optimization will halt.\n      min_failed_trials_for_failure_rate_check: The minimum number\n          of trials that must fail in Scheduler in order to start\n          checking failure rate.\n      log_filepath: File, to which to write optimization logs.\n      logging_level: Minimum level of logging statements to log,\n          defaults to logging.INFO.\n      ttl_seconds_for_trials: Optional TTL for all trials created\n          within this Scheduler, in seconds. Trials that remain\n          RUNNING for more than their TTL seconds will be marked\n          FAILED once the TTL elapses and may be re-suggested by\n          the Ax optimization models.\n      init_seconds_between_polls: Initial wait between rounds of\n          polling, in seconds. Relevant if using the default wait-\n          for-completed-runs functionality of the base Scheduler\n          (if wait_for_completed_trials_and_report_results is not\n          overridden). With the default waiting, every time a poll\n          returns that no trial evaluations completed, wait\n          time will increase; once some completed trial evaluations\n          are found, it will reset back to this value. Specify 0\n          to not introduce any wait between polls.\n      min_seconds_before_poll: Minimum number of seconds between\n          beginning to run a trial and the first poll to check\n          trial status.\n      timeout_hours: Number of hours after which the optimization will abort.\n      seconds_between_polls_backoff_factor: The rate at which the poll\n          interval increases.\n      run_trials_in_batches: If True and poll_available_capacity is\n          implemented to return non-null results, trials will be dispatched\n          in groups via run_trials instead of one-by-one via run_trial.\n          This allows to save time, IO calls or computation in cases where\n          dispatching trials in groups is more efficient then sequential\n          deployment. The size of the groups will be determined as\n          the minimum of self.poll_available_capacity() and the number\n          of generator runs that the generation strategy is able to produce\n          without more data or reaching its allowed max paralellism limit.\n      debug_log_run_metadata: Whether to log run_metadata for debugging purposes.\n      early_stopping_strategy: A BaseEarlyStoppingStrategy that determines\n          whether a trial should be stopped given the current state of\n          the experiment. Used in should_stop_trials_early.\n      global_stopping_strategy: A BaseGlobalStoppingStrategy that determines\n          whether the full optimization should be stopped or not.\n      suppress_storage_errors_after_retries: Whether to fully suppress SQL\n          storage-related errors if encountered, after retrying the call\n          multiple times. Only use if SQL storage is not important for the given\n          use case, since this will only log, but not raise, an exception if\n          it\'s encountered while saving to DB or loading from it.\n      wait_for_running_trials: Whether the scheduler should wait for running trials\n          or exit.\n      fetch_kwargs: Kwargs to be used when fetching data.\n      validate_metrics: Whether to raise an error if there is a problem with the\n          metrics attached to the experiment.\n      status_quo_weight: The weight of the status quo arm. This is only used\n          if the scheduler is using a BatchTrial. This requires that the status_quo\n          be set on the experiment.\n      enforce_immutable_search_space_and_opt_config: Whether to enforce that the\n          search space and optimization config are immutable.  If true, will add\n          "immutable_search_space_and_opt_config": True to experiment properties\n      mt_experiment_trial_type: Type of trial to run for MultiTypeExperiments. This\n          is currently required for MultiTypeExperiments. This is ignored for\n          "regular" or single type experiments. If you don\'t know what a single type\n          experiment is, you don\'t need this.\n  '}),"\n",(0,r.jsx)(t.h2,{id:"8-advanced-functionality",children:"8. Advanced functionality"}),"\n",(0,r.jsx)(t.h3,{id:"8a-reporting-results-to-an-external-system",children:"8a. Reporting results to an external system"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Scheduler"})," can report the optimization result to an external system each time there\nare new completed trials if the user-implemented subclass implements\n",(0,r.jsx)(t.code,{children:"MySchedulerSubclass.report_results"})," to do so. For example, the folliwing method:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"class MySchedulerSubclass(Scheduler):\n    ...\n    \n    def report_results(self, force_refit: bool = False):\n        write_to_external_database(len(self.experiment.trials))\n        return (True, \\{})  # Returns optimization success status and optional dict of outputs.\n"})}),"\n",(0,r.jsx)(t.p,{children:"could be used to record number of trials in experiment so far in an external database."}),"\n",(0,r.jsxs)(t.p,{children:["Since ",(0,r.jsx)(t.code,{children:"report_results"})," is an instance method, it has access to ",(0,r.jsx)(t.code,{children:"self.experiment"})," and\n",(0,r.jsx)(t.code,{children:"self.generation_strategy"}),", which contain all the information about the state of the\noptimization thus far."]}),"\n",(0,r.jsxs)(t.h3,{id:"8b-using-run_trials_and_yield_results-generator-method",children:["8b. Using ",(0,r.jsx)(t.code,{children:"run_trials_and_yield_results"})," generator method"]}),"\n",(0,r.jsxs)(t.p,{children:["In some systems it's beneficial to have greater control over ",(0,r.jsx)(t.code,{children:"Scheduler.run_n_trials"}),"\ninstead of just starting it and needing to wait for it to run all the way to completion\nbefore having access to its output. For this purpose, the ",(0,r.jsx)(t.code,{children:"Scheduler"})," implements a\ngenerator method ",(0,r.jsx)(t.code,{children:"run_trials_and_yield_results"}),", which yields the output of\n",(0,r.jsx)(t.code,{children:"Scheduler.report_results"})," each time there are new completed trials and can be used like\nso:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'class ResultReportingScheduler(Scheduler):\n    def report_results(self, force_refit: bool = False):\n        return True, {\n            "trials so far": len(self.experiment.trials),\n            "currently producing trials from generation step": self.generation_strategy._curr.model_name,\n            "running trials": [t.index for t in self.running_trials],\n        }\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'experiment = make_branin_experiment_with_runner_and_metric()\nscheduler = ResultReportingScheduler(\n    experiment=experiment,\n    generation_strategy=choose_generation_strategy(\n        search_space=experiment.search_space,\n        max_parallelism_cap=3,\n    ),\n    options=SchedulerOptions(),\n)\n\nfor reported_result in scheduler.run_trials_and_yield_results(max_trials=6):\n    print("Reported result: ", reported_result)\n'})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] ax.modelbridge.dispatch_utils: Using Models.BOTORCH_MODULAR since there is at least one ordered parameter and there are no unordered categorical parameters."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] ax.modelbridge.dispatch_utils: Calculating the number of remaining initialization trials based on num_initialization_trials=None max_initialization_trials=None num_tunable_parameters=2 num_trials=None use_batch_trials=False"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] ax.modelbridge.dispatch_utils: calculated num_initialization_trials=5"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] ax.modelbridge.dispatch_utils: num_completed_initialization_trials=0 num_remaining_initialization_trials=5"}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] ax.modelbridge.dispatch_utils: verbose, disable_progbar, and jit_compile are not yet supported when using choose_generation_strategy with ModularBoTorchModel, dropping these arguments."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] ax.modelbridge.dispatch_utils: Using Bayesian Optimization generation strategy: GenerationStrategy(name='Sobol+BoTorch', steps=[Sobol for 5 trials, BoTorch for subsequent trials]). Iterations after 5 will take longer to generate due to model-fitting."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:32] ResultReportingScheduler: Scheduler requires experiment to have immutable search space and optimization config. Setting property immutable_search_space_and_opt_config to True on experiment."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:32] ResultReportingScheduler: Running trials [0]..."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:32] ResultReportingScheduler: Running trials [1]..."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:33] ResultReportingScheduler: Running trials [2]..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:34] ResultReportingScheduler: Generated all trials that can be generated currently. Max parallelism currently reached."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:34] ResultReportingScheduler: Fetching data for newly completed trials: 0 - 2."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:34] ResultReportingScheduler: Retrieved COMPLETED trials: 0 - 2."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:34] ResultReportingScheduler: Running trials [3]..."}),"\n",(0,r.jsx)(l.A,{children:"Reported result:  (True, {'trials so far': 3, 'currently producing trials from generation step': 'Sobol', 'running trials': []})"}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/core/data.py:288: FutureWarning:\nThe behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning:\nEncountered exception in computing model fit quality: RandomModelBridge does not support prediction.\n[INFO 09-29 17:02:35] ResultReportingScheduler: Running trials [4]..."}),"\n",(0,r.jsx)(l.A,{children:"/Users/cristianlara/Projects/Ax-1.0/ax/core/data.py:288: FutureWarning:\nThe behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:37] ResultReportingScheduler: Running trials [5]..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:38] ResultReportingScheduler: Fetching data for newly completed trials: 4 - 5."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:38] ResultReportingScheduler: Retrieved COMPLETED trials: 4 - 5."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:38] ResultReportingScheduler: Done submitting trials, waiting for remaining 1 running trials..."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:38] ResultReportingScheduler: Fetching data for newly completed trials: [3]."}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:38] ResultReportingScheduler: Retrieved COMPLETED trials: [3]."}),"\n",(0,r.jsx)(l.A,{children:"Reported result:  (True, {'trials so far': 6, 'currently producing trials from generation step': 'BoTorch', 'running trials': [3]})\nReported result:  (True, {'trials so far': 6, 'currently producing trials from generation step': 'BoTorch', 'running trials': []})\nReported result:  (True, {'trials so far': 6, 'currently producing trials from generation step': 'BoTorch', 'running trials': []})"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Clean up to enable running the tutorial repeatedly with\n# the same results. You wouldn\'t do this if you wanted to\n# keep adding data to the same experiment.\nfrom ax.storage.sqa_store.delete import delete_experiment\n\ndelete_experiment("branin_test_experiment")\n'})}),"\n",(0,r.jsx)(l.A,{children:"[INFO 09-29 17:02:38] ax.storage.sqa_store.delete: You are deleting branin_test_experiment and all its associated data from the database."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python"})})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},31023:(e,t,n)=>{n.d(t,{A:()=>p});n(96540);var r,i=new Uint8Array(16);function o(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}const l=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const a=function(e){return"string"==typeof e&&l.test(e)};for(var s=[],c=0;c<256;++c)s.push((c+256).toString(16).substr(1));const d=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(s[e[t+0]]+s[e[t+1]]+s[e[t+2]]+s[e[t+3]]+"-"+s[e[t+4]]+s[e[t+5]]+"-"+s[e[t+6]]+s[e[t+7]]+"-"+s[e[t+8]]+s[e[t+9]]+"-"+s[e[t+10]]+s[e[t+11]]+s[e[t+12]]+s[e[t+13]]+s[e[t+14]]+s[e[t+15]]).toLowerCase();if(!a(n))throw TypeError("Stringified UUID is invalid");return n};const h=function(e,t,n){var r=(e=e||{}).random||(e.rng||o)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=r[i];return t}return d(r)};var u=n(74848);const p=function(e){return(0,u.jsxs)("div",{style:{backgroundColor:"var(--ifm-pre-background)",marginBottom:"10px",borderRadius:"var(--ifm-global-radius)",overflow:"hidden",padding:"5px",font:"var(--ifm-code-font-size) / var(--ifm-pre-line-height) var(--ifm-font-family-monospace)"},children:[(0,u.jsx)("span",{style:{color:"red"},children:"Out: "}),(0,u.jsx)("pre",{style:{margin:"0px",backgroundColor:"inherit",padding:"8px"},children:e.children.split("\n").map((function(e){return(0,u.jsx)("p",{style:{marginBottom:"0px"},children:e},h())}))})]})}},38987:(e,t,n)=>{n.d(t,{A:()=>l});n(96540);var r=n(28774),i=n(43186),o=n(74848);const l=function(e){var t=e.githubUrl,n=e.colabUrl;return(0,o.jsxs)("div",{className:"margin-top--sm margin-bottom--lg",children:[(0,o.jsxs)(r.A,{to:t,className:"button button--outline button--primary margin-right--xs",children:["Open in GitHub",(0,o.jsx)(i.A,{})]}),(0,o.jsxs)(r.A,{to:n,className:"button button--outline button--primary margin--xs",children:["Run in Google Colab",(0,o.jsx)(i.A,{})]})]})}},70290:(e,t,n)=>{n.d(t,{z:()=>s});var r=n(96540),i=n(53259),o=n.n(i),l=(n(92303),n(74848));var a=o()({loader:function(){return n.e(1236).then(n.bind(n,91236))},loading:function(e){return e.timedOut?(0,l.jsx)("blockquote",{children:"Error: Loading Plotly timed out."}):(0,l.jsx)("div",{children:"loading..."})},timeout:1e4}),s=r.memo((function(e){var t=e.data;return(0,l.jsx)("div",{className:"plotly-figure",style:{"overflow-x":"auto"},children:(0,l.jsx)(a,{data:t.data,layout:t.layout})})}))},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var r=n(96540);const i={},o=r.createContext(i);function l(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(o.Provider,{value:t},e.children)}},39952:e=>{e.exports=JSON.parse('{"config":{"linkText":"Export to plot.ly","plotlyServerURL":"https://plot.ly","showLink":false},"data":[{"hoverinfo":"none","legendgroup":"","line":{"width":0},"mode":"lines","showlegend":false,"type":"scatter","x":[1,2,3,4,5,6],"y":[31.510506715642663,31.510506715642663,31.510506715642663,9.0526689150362,9.0526689150362,9.0526689150362]},{"fill":"tonexty","fillcolor":"rgba(128,177,211,0.3)","legendgroup":"objective value","line":{"color":"rgba(128,177,211,1)"},"mode":"lines","name":"objective value","type":"scatter","x":[1,2,3,4,5,6],"y":[31.510506715642663,31.510506715642663,31.510506715642663,9.0526689150362,9.0526689150362,9.0526689150362]},{"fill":"tonexty","fillcolor":"rgba(128,177,211,0.3)","hoverinfo":"none","legendgroup":"","line":{"width":0},"mode":"lines","showlegend":false,"type":"scatter","x":[1,2,3,4,5,6],"y":[31.510506715642663,31.510506715642663,31.510506715642663,9.0526689150362,9.0526689150362,9.0526689150362]}],"layout":{"showlegend":true,"template":{"data":{"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"contour"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"heatmap"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"heatmapgl"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"histogram2d"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"histogram2dcontour"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"sequentialminus":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"#E5ECF6","showlakes":true,"showland":true,"subunitcolor":"white"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2}}},"title":{"text":"Model performance vs. # of iterations"},"xaxis":{"title":{"text":"Iteration"}},"yaxis":{"title":{"text":"Y"}}}}')},87898:e=>{e.exports=JSON.parse('{"config":{"linkText":"Export to plot.ly","plotlyServerURL":"https://plot.ly","showLink":false},"data":[{"hoverinfo":"none","legendgroup":"","line":{"width":0},"mode":"lines","showlegend":false,"type":"scatter","x":[1,2,3,4,5,6,7],"y":[31.510506715642663,31.510506715642663,31.510506715642663,9.0526689150362,9.0526689150362,9.0526689150362,9.0526689150362]},{"fill":"tonexty","fillcolor":"rgba(128,177,211,0.3)","legendgroup":"objective value","line":{"color":"rgba(128,177,211,1)"},"mode":"lines","name":"objective value","type":"scatter","x":[1,2,3,4,5,6,7],"y":[31.510506715642663,31.510506715642663,31.510506715642663,9.0526689150362,9.0526689150362,9.0526689150362,9.0526689150362]},{"fill":"tonexty","fillcolor":"rgba(128,177,211,0.3)","hoverinfo":"none","legendgroup":"","line":{"width":0},"mode":"lines","showlegend":false,"type":"scatter","x":[1,2,3,4,5,6,7],"y":[31.510506715642663,31.510506715642663,31.510506715642663,9.0526689150362,9.0526689150362,9.0526689150362,9.0526689150362]}],"layout":{"showlegend":true,"template":{"data":{"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"contour"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"heatmap"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"heatmapgl"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"histogram2d"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"histogram2dcontour"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"sequentialminus":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"#E5ECF6","showlakes":true,"showland":true,"subunitcolor":"white"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2}}},"title":{"text":"Model performance vs. # of iterations"},"xaxis":{"title":{"text":"Iteration"}},"yaxis":{"title":{"text":"Y"}}}}')},77579:e=>{e.exports=JSON.parse('{"config":{"linkText":"Export to plot.ly","plotlyServerURL":"https://plot.ly","showLink":false},"data":[{"hoverinfo":"none","legendgroup":"","line":{"width":0},"mode":"lines","showlegend":false,"type":"scatter","x":[1,2,3],"y":[31.510506715642663,31.510506715642663,31.510506715642663]},{"fill":"tonexty","fillcolor":"rgba(128,177,211,0.3)","legendgroup":"objective value","line":{"color":"rgba(128,177,211,1)"},"mode":"lines","name":"objective value","type":"scatter","x":[1,2,3],"y":[31.510506715642663,31.510506715642663,31.510506715642663]},{"fill":"tonexty","fillcolor":"rgba(128,177,211,0.3)","hoverinfo":"none","legendgroup":"","line":{"width":0},"mode":"lines","showlegend":false,"type":"scatter","x":[1,2,3],"y":[31.510506715642663,31.510506715642663,31.510506715642663]}],"layout":{"showlegend":true,"template":{"data":{"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"contour"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"heatmap"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"heatmapgl"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"histogram2d"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"histogram2dcontour"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]],"sequentialminus":[[0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"#E5ECF6","showlakes":true,"showland":true,"subunitcolor":"white"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","gridwidth":2,"linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"bgcolor":"#E5ECF6","caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","zerolinewidth":2}}},"title":{"text":"Model performance vs. # of iterations"},"xaxis":{"title":{"text":"Iteration"}},"yaxis":{"title":{"text":"Y"}}}}')}}]);