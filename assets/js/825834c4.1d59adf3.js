"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[494],{3031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(4848),r=t(8453),a=t(8987);t(1023),t(290);const o={title:"Global Stopping (Experiment-Level Early Stopping)",sidebar_label:"Global Stopping (Experiment-Level Early Stopping)"},s="1. What happens without global stopping? Optimization can run for too long.",l={id:"tutorials/gss/index",title:"Global Stopping (Experiment-Level Early Stopping)",description:"<LinkButtons",source:"@site/../docs/tutorials/gss/index.mdx",sourceDirName:"tutorials/gss",slug:"/tutorials/gss/",permalink:"/Ax/docs/tutorials/gss/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Global Stopping (Experiment-Level Early Stopping)",sidebar_label:"Global Stopping (Experiment-Level Early Stopping)"},sidebar:"tutorials",previous:{title:"Trial-Level Early Stopping",permalink:"/Ax/docs/tutorials/early_stopping/"},next:{title:"Bandit Optimization",permalink:"/Ax/docs/tutorials/factorial/"}},p={},c=[];function h(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.A,{githubUrl:"",colabUrl:""}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial illustrates use of a Global Stopping Strategy (GSS) in combination with\nthe Service API. For background on the Service API, see the Service API Tutorial:\n",(0,i.jsx)(n.a,{href:"https://ax.dev/tutorials/gpei_hartmann_service.html",children:"https://ax.dev/tutorials/gpei_hartmann_service.html"})," GSS is also supported in the\nScheduler API, where it can be provided as part of ",(0,i.jsx)(n.code,{children:"SchedulerOptions"}),". For more on\n",(0,i.jsx)(n.code,{children:"Scheduler"}),", see the Scheduler tutorial: ",(0,i.jsx)(n.a,{href:"https://ax.dev/tutorials/scheduler.html",children:"https://ax.dev/tutorials/scheduler.html"})]}),"\n",(0,i.jsxs)(n.p,{children:["Global Stopping stops an optimization loop when some data-based criteria are met which\nsuggest that future trials will not be very helpful. For example, we might stop when\nthere has been very little improvement in the last five trials. This is as opposed to\ntrial-level early stopping, which monitors the results of expensive evaluations and\nterminates those that are unlikely to produce promising results, freeing resources to\nexplore more promising configurations. For more on trial-level early stopping, see the\ntutorial: ",(0,i.jsx)(n.a,{href:"https://ax.dev/tutorials/early_stopping/early_stopping.html",children:"https://ax.dev/tutorials/early_stopping/early_stopping.html"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import numpy as np\n\nfrom ax.service.ax_client import AxClient, ObjectiveProperties\nfrom ax.utils.measurement.synthetic_functions import Branin, branin\nfrom ax.utils.notebook.plotting import init_notebook_plotting, render\n\ninit_notebook_plotting()\n"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"1-what-happens-without-global-stopping-optimization-can-run-for-too-long",children:"1. What happens without global stopping? Optimization can run for too long."})}),"\n",(0,i.jsx)(n.p,{children:"This example uses the Branin test problem. We run 25 trials, which turns out to be far\nmore than needed, because we get close to the optimum quite quickly."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def evaluate(parameters):\n    x = np.array([parameters.get(f"x{i+1}") for i in range(2)])\n    return {"branin": (branin(x), 0.0)}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'params = [\n    {\n        "name": f"x{i + 1}",\n        "type": "range",\n        "bounds": [*Branin._domain[i]],\n        "value_type": "float",\n        "log_scale": False,\n    }\n\n    for i in range(2)\n]\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'ax_client = AxClient(random_seed=0, verbose_logging=False)\n\nax_client.create_experiment(\n    name="branin_test_experiment",\n    parameters=params,\n    objectives={"branin": ObjectiveProperties(minimize=True)},\n    is_test=True,\n)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"%%time\nfor i in range(25):\n    parameters, trial_index = ax_client.get_next_trial()\n    # Local evaluation here can be replaced with deployment to external system.\n    ax_client.complete_trial(\n        trial_index=trial_index, raw_data=evaluate(parameters)\n    )\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"render(ax_client.get_optimization_trace())\n"})}),"\n",(0,i.jsx)(n.h1,{id:"2-optimization-with-global-stopping-with-the-service-api",children:"2. Optimization with global stopping, with the Service API"}),"\n",(0,i.jsxs)(n.p,{children:["Rather than running a fixed number of trials, we can use a GlobalStoppingStrategy (GSS),\nwhich checks whether some stopping criteria have been met when ",(0,i.jsx)(n.code,{children:"get_next_trial"})," is\ncalled. Here, we use an ",(0,i.jsx)(n.code,{children:"ImprovementGlobalStoppingStrategy"}),", which checks whether the\nthe last ",(0,i.jsx)(n.code,{children:"window_size"})," trials have improved by more than some threshold amount."]}),"\n",(0,i.jsxs)(n.p,{children:["For single-objective optimization, which we are doing here,\n",(0,i.jsx)(n.code,{children:"ImprovementGlobalStoppingStrategy"}),' checks if an improvement is "significant" by\ncomparing it to the inter-quartile range (IQR) of the objective values attained so far.']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ImprovementGlobalStoppingStrategy"})," also supports multi-objective optimization (MOO), in\nwhich case it checks whether the percentage improvement in hypervolume over the last\n",(0,i.jsx)(n.code,{children:"window_size"})," trials exceeds ",(0,i.jsx)(n.code,{children:"improvement_bar"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from ax.global_stopping.strategies.improvement import ImprovementGlobalStoppingStrategy\nfrom ax.exceptions.core import OptimizationShouldStop\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Start considering stopping only after the 5 initialization trials + 5 GPEI trials.\n# Stop if the improvement in the best point in the past 5 trials is less than\n# 1% of the IQR thus far.\nstopping_strategy = ImprovementGlobalStoppingStrategy(\n    min_trials=5 + 5, window_size=5, improvement_bar=0.01\n)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'ax_client_gss = AxClient(\n    global_stopping_strategy=stopping_strategy, random_seed=0, verbose_logging=False\n)\n\nax_client_gss.create_experiment(\n    name="branin_test_experiment",\n    parameters=params,\n    objectives={"branin": ObjectiveProperties(minimize=True)},\n    is_test=True,\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If there has not been much improvement, ",(0,i.jsx)(n.code,{children:"ImprovementGlobalStoppingStrategy"})," will raise\nan exception. If the exception is raised, we catch it and terminate optimization."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for i in range(25):\n    try:\n        parameters, trial_index = ax_client_gss.get_next_trial()\n    except OptimizationShouldStop as exc:\n        print(exc.message)\n        break\n    ax_client_gss.complete_trial(trial_index=trial_index, raw_data=evaluate(parameters))\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"render(ax_client_gss.get_optimization_trace())\n"})}),"\n",(0,i.jsx)(n.h1,{id:"3-write-your-own-custom-global-stopping-strategy",children:"3. Write your own custom Global Stopping Strategy"}),"\n",(0,i.jsxs)(n.p,{children:["You can write a custom Global Stopping Strategy by subclassing\n",(0,i.jsx)(n.code,{children:"BaseGlobalStoppingStrategy"})," and use it where ",(0,i.jsx)(n.code,{children:"ImprovementGlobalStoppingStrategy"})," was\nused above."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from ax.global_stopping.strategies.base import BaseGlobalStoppingStrategy\nfrom typing import Tuple\nfrom ax.core.experiment import Experiment\nfrom ax.core.base_trial import TrialStatus\nfrom ax.global_stopping.strategies.improvement import constraint_satisfaction\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, we define ",(0,i.jsx)(n.code,{children:"SimpleThresholdGlobalStoppingStrategy"}),", which stops when we observe a\npoint better than a provided threshold. This can be useful when there is a known\noptimum. For example, the Branin function has an optimum of zero. When the optimum is\nnot known, this can still be useful from a satisficing perspective: For example, maybe\nwe need a model to take up less than a certain amount of RAM so it doesn't crash our\nusual hardware, but there is no benefit to further improvements."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class SimpleThresholdGlobalStoppingStrategy(BaseGlobalStoppingStrategy):\n    """\n    A GSS that stops when we observe a point better than `threshold`.\n    """\n    def __init__(\n        self,\n        min_trials: int,\n        inactive_when_pending_trials: bool = True,\n        threshold: float = 0.1\n    ):\n        self.threshold = threshold\n        super().__init__(\n            min_trials=min_trials,\n            inactive_when_pending_trials=inactive_when_pending_trials\n        )\n    \n    def _should_stop_optimization(\n        self, experiment: Experiment\n    ) -> Tuple[bool, str]:\n        """\n        Check if the best seen is better than `self.threshold`.\n        """\n        feasible_objectives = [\n            trial.objective_mean\n            for trial in experiment.trials_by_status[TrialStatus.COMPLETED]\n            if constraint_satisfaction(trial)\n        ]\n\n        # Computing the interquartile for scaling the difference\n        if len(feasible_objectives) <= 1:\n            message = "There are not enough feasible arms tried yet."\n            return False, message\n        \n        minimize = experiment.optimization_config.objective.minimize\n        if minimize:\n            best = np.min(feasible_objectives)\n            stop = best < self.threshold\n        else:\n            best = np.max(feasible_objectives)\n            stop = best > self.threshold\n\n        comparison = "less" if minimize else "greater"\n        if stop:\n            message = (\n                f"The best objective seen is {best:.3f}, which is {comparison} "\n                f"than the threshold of {self.threshold:.3f}."\n            )\n        else:\n            message = ""\n\n        return stop, message\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"stopping_strategy = SimpleThresholdGlobalStoppingStrategy(min_trials=5, threshold=1.)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'ax_client_custom_gss = AxClient(\n    global_stopping_strategy=stopping_strategy,\n    random_seed=0,\n    verbose_logging=False,\n)\n\nax_client_custom_gss.create_experiment(\n    name="branin_test_experiment",\n    parameters=params,\n    objectives={"branin": ObjectiveProperties(minimize=True)},\n    is_test=True,\n)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for i in range(25):\n    try:\n        parameters, trial_index = ax_client_custom_gss.get_next_trial()\n    except OptimizationShouldStop as exc:\n        print(exc.message)\n        break\n    ax_client_custom_gss.complete_trial(\n        trial_index=trial_index, raw_data=evaluate(parameters)\n    )\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"render(ax_client_custom_gss.get_optimization_trace())\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1023:(e,n,t)=>{t.d(n,{A:()=>m});t(6540);var i,r=new Uint8Array(16);function a(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(r)}const o=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const s=function(e){return"string"==typeof e&&o.test(e)};for(var l=[],p=0;p<256;++p)l.push((p+256).toString(16).substr(1));const c=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(l[e[n+0]]+l[e[n+1]]+l[e[n+2]]+l[e[n+3]]+"-"+l[e[n+4]]+l[e[n+5]]+"-"+l[e[n+6]]+l[e[n+7]]+"-"+l[e[n+8]]+l[e[n+9]]+"-"+l[e[n+10]]+l[e[n+11]]+l[e[n+12]]+l[e[n+13]]+l[e[n+14]]+l[e[n+15]]).toLowerCase();if(!s(t))throw TypeError("Stringified UUID is invalid");return t};const h=function(e,n,t){var i=(e=e||{}).random||(e.rng||a)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,n){t=t||0;for(var r=0;r<16;++r)n[t+r]=i[r];return n}return c(i)};var d=t(4848);const m=function(e){return(0,d.jsxs)("div",{style:{backgroundColor:"lightgray",marginBottom:"var(--ifm-leading)",borderRadius:"var(--ifm-global-radius)",boxShadow:"var(--ifm-global-shadow-lw)",overflow:"hidden",padding:"10px",font:"var(--ifm-code-font-size) / var(--ifm-pre-line-height) var(--ifm-font-family-monospace)"},children:[(0,d.jsx)("span",{style:{color:"red"},children:"Out: "}),(0,d.jsx)("pre",{style:{margin:"0px",backgroundColor:"inherit"},children:e.children.split("\n").map((function(e){return(0,d.jsx)("p",{style:{marginBottom:"0px"},children:e},h())}))})]})}},8987:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var i=t(8774),r=t(4848);const a=function(e){var n=e.githubUrl,t=e.colabUrl;return(0,r.jsxs)("div",{className:"link-buttons",children:[(0,r.jsx)(i.A,{to:n,children:"Open in GitHub"}),(0,r.jsx)("div",{}),(0,r.jsx)(i.A,{to:t,children:"Run in Google Colab"})]})}},290:(e,n,t)=>{t(6540);var i=t(3259),r=t.n(i),a=(t(2303),t(4848));r()({loader:function(){return t.e(236).then(t.bind(t,1236))},loading:function(e){return e.timedOut?(0,a.jsx)("blockquote",{children:"Error: Loading Plotly timed out."}):(0,a.jsx)("div",{children:"loading..."})},timeout:1e4})},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);