"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9487],{34724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>x,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var i=t(74848),o=t(28453),s=t(38987),r=t(31023);t(70290);const l={title:"Modular `BoTorchModel`",sidebar_label:"Modular `BoTorchModel`"},a="Setup and Usage of BoTorch Models in Ax",d={id:"tutorials/modular_botax/index",title:"Modular `BoTorchModel`",description:"<LinkButtons",source:"@site/versioned_docs/version-0.1.0/tutorials/modular_botax/index.mdx",sourceDirName:"tutorials/modular_botax",slug:"/tutorials/modular_botax/",permalink:"/Ax/docs/0.1.0/tutorials/modular_botax/",draft:!1,unlisted:!1,tags:[],version:"0.1.0",lastUpdatedBy:"Cristian Lara",lastUpdatedAt:173231163e4,frontMatter:{title:"Modular `BoTorchModel`",sidebar_label:"Modular `BoTorchModel`"},sidebar:"tutorials",previous:{title:"Scheduler",permalink:"/Ax/docs/0.1.0/tutorials/scheduler/"},next:{title:"Hyperparameter Optimization for PyTorch",permalink:"/Ax/docs/0.1.0/tutorials/tune_cnn_service/"}},c={},h=[{value:"1. Quick-start example",id:"1-quick-start-example",level:2},{value:"2. BoTorchModel = Surrogate + Acquisition",id:"2-botorchmodel--surrogate--acquisition",level:2},{value:"2A. Example that uses defaults and requires no options",id:"2a-example-that-uses-defaults-and-requires-no-options",level:3},{value:"2B. Example with all the options",id:"2b-example-with-all-the-options",level:3},{value:"2C. <code>Surrogate</code> and <code>Acquisition</code> Q&amp;A",id:"2c-surrogate-and-acquisition-qa",level:2},{value:"3. I know which Botorch <code>Model</code> and <code>AcquisitionFunction</code> I&#39;d like to combine in Ax. How do set this up?",id:"3-i-know-which-botorch-model-and-acquisitionfunction-id-like-to-combine-in-ax-how-do-set-this-up",level:2},{value:"3a. Making a <code>Surrogate</code> from BoTorch <code>Model</code>:",id:"3a-making-a-surrogate-from-botorch-model",level:3},{value:"3B. Using an arbitrary BoTorch <code>AcquisitionFunction</code> in Ax",id:"3b-using-an-arbitrary-botorch-acquisitionfunction-in-ax",level:3},{value:"4. Using <code>Models.BOTORCH_MODULAR</code>",id:"4-using-modelsbotorch_modular",level:2},{value:"5. Utilizing <code>BoTorchModel</code> in generation strategies",id:"5-utilizing-botorchmodel-in-generation-strategies",level:2},{value:"5a. Specifying <code>pending_observations</code>",id:"5a-specifying-pending_observations",level:2},{value:"6. Customizing a <code>Surrogate</code> or <code>Acquisition</code>",id:"6-customizing-a-surrogate-or-acquisition",level:2},{value:"Appendix 1: Methods available on <code>BoTorchModel</code>",id:"appendix-1-methods-available-on-botorchmodel",level:2},{value:"Appendix 2: Default surrogate models and acquisition functions",id:"appendix-2-default-surrogate-models-and-acquisition-functions",level:2},{value:"Appendix 3: Handling storage errors that arise from objects that don&#39;t have serialization logic in A",id:"appendix-3-handling-storage-errors-that-arise-from-objects-that-dont-have-serialization-logic-in-a",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.A,{githubUrl:"https://github.com/cristianlara/Ax/blob/main/tutorials/modular_botax.ipynb",colabUrl:"https://colab.research.google.com/github/cristianlara/Ax/blob/main/tutorials/modular_botax.ipynb"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from typing import Any, Dict, Optional, Tuple, Type\n\nfrom ax.modelbridge.registry import Models\n\n# Ax data tranformation layer\nfrom ax.models.torch.botorch_modular.acquisition import Acquisition\n\n# Ax wrappers for BoTorch components\nfrom ax.models.torch.botorch_modular.model import BoTorchModel\nfrom ax.models.torch.botorch_modular.surrogate import Surrogate\n\n# Experiment examination utilities\nfrom ax.service.utils.report_utils import exp_to_df\n\n# Test Ax objects\nfrom ax.utils.testing.core_stubs import (\n    get_branin_data,\n    get_branin_data_multi_objective,\n    get_branin_experiment,\n    get_branin_experiment_with_multi_objective,\n)\nfrom botorch.acquisition.logei import (\n    qLogExpectedImprovement,\n    qLogNoisyExpectedImprovement,\n)\nfrom botorch.models.gp_regression import SingleTaskGP\n\n# BoTorch components\nfrom botorch.models.model import Model\nfrom gpytorch.mlls.exact_marginal_log_likelihood import ExactMarginalLogLikelihood\n"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"setup-and-usage-of-botorch-models-in-ax",children:"Setup and Usage of BoTorch Models in Ax"})}),"\n",(0,i.jsxs)(n.p,{children:["Ax provides a set of flexible wrapper abstractions to mix-and-match BoTorch components\nlike ",(0,i.jsx)(n.code,{children:"Model"})," and ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," and combine them into a single ",(0,i.jsx)(n.code,{children:"Model"})," object in\nAx. The wrapper abstractions: ",(0,i.jsx)(n.code,{children:"Surrogate"}),", ",(0,i.jsx)(n.code,{children:"Acquisition"}),", and ",(0,i.jsx)(n.code,{children:"BoTorchModel"})," \u2013 are\nlocated in ",(0,i.jsx)(n.code,{children:"ax/models/torch/botorch_modular"})," directory and aim to encapsulate\nboilerplate code that interfaces between Ax and BoTorch. This functionality is in\nbeta-release and still evolving."]}),"\n",(0,i.jsx)(n.p,{children:"This tutorial walks through setting up a custom combination of BoTorch components in Ax\nin following steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["Quick-start example of ",(0,i.jsx)(n.code,{children:"BoTorchModel"})," use"]})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"BoTorchModel"})," = ",(0,i.jsx)(n.code,{children:"Surrogate"})," + ",(0,i.jsx)(n.code,{children:"Acquisition"})," (overview)"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Example with minimal options that uses the defaults"}),"\n",(0,i.jsx)(n.li,{children:"Example showing all possible options"}),"\n",(0,i.jsx)(n.li,{children:"Surrogate and Acquisition Q&A"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"I know which Botorch Model and AcquisitionFunction I'd like to combine in Ax. How\ndo set this up?"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Making a ",(0,i.jsx)(n.code,{children:"Surrogate"})," from BoTorch ",(0,i.jsx)(n.code,{children:"Model"})]}),"\n",(0,i.jsxs)(n.li,{children:["Using an arbitrary BoTorch ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," in Ax"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Using ",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR"})]})," (convenience wrapper that enables storage and\nresumability)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Utilizing ",(0,i.jsx)(n.code,{children:"BoTorchModel"})," in generation strategies"]})," (abstraction that allows to\nchain models together and use them in Ax Service API etc.)","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Specifying ",(0,i.jsx)(n.code,{children:"pending_observations"})," to avoid the model re-suggesting points that are\npart of ",(0,i.jsx)(n.code,{children:"RUNNING"})," or ",(0,i.jsx)(n.code,{children:"ABANDONED"})," trials."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Customizing a ",(0,i.jsx)(n.code,{children:"Surrogate"})," or ",(0,i.jsx)(n.code,{children:"Acquisition"})]})," (for cases where existing subcomponent\nclasses are not sufficient)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"1-quick-start-example",children:"1. Quick-start example"}),"\n",(0,i.jsxs)(n.p,{children:["Here we set up a ",(0,i.jsx)(n.code,{children:"BoTorchModel"})," with ",(0,i.jsx)(n.code,{children:"SingleTaskGP"})," with ",(0,i.jsx)(n.code,{children:"qLogNoisyExpectedImprovement"}),",\none of the most popular combinations in Ax:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"experiment = get_branin_experiment(with_trial=True)\ndata = get_branin_data(trials=[experiment.trials[0]])\n"})}),"\n",(0,i.jsx)(r.A,{children:"[INFO 09-29 17:02:46] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# `Models` automatically selects a model + model bridge combination.\n# For `BOTORCH_MODULAR`, it will select `BoTorchModel` and `TorchModelBridge`.\nmodel_bridge_with_GPEI = Models.BOTORCH_MODULAR(\n    experiment=experiment,\n    data=data,\n    surrogate=Surrogate(SingleTaskGP),  # Optional, will use default if unspecified\n    botorch_acqf_class=qLogNoisyExpectedImprovement,  # Optional, will use default if unspecified\n)\n"})}),"\n",(0,i.jsx)(r.A,{children:"[INFO 09-29 17:02:46] ax.modelbridge.transforms.standardize_y: Outcome branin is constant, within tolerance."}),"\n",(0,i.jsxs)(n.p,{children:["Now we can use this model to generate candidates (",(0,i.jsx)(n.code,{children:"gen"}),"), predict outcome at a point\n(",(0,i.jsx)(n.code,{children:"predict"}),"), or evaluate acquisition function value at a given point\n(",(0,i.jsx)(n.code,{children:"evaluate_acquisition_function"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"generator_run = model_bridge_with_GPEI.gen(n=1)\ngenerator_run.arms[0]\n"})}),"\n",(0,i.jsx)(r.A,{children:"Arm(parameters={'x1': -5.0, 'x2': 0.0})"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Before you read the rest of this tutorial:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Note that the concept of \u2018model\u2019 is Ax is somewhat a misnomer; we use\n",(0,i.jsx)(n.a,{href:"https://ax.dev/docs/glossary.html#model",children:"'model'"})," to refer to an optimization setup\ncapable of producing candidate points for optimization (and often capable of being fit\nto data, with exception for quasi-random generators). See\n",(0,i.jsx)(n.a,{href:"https://ax.dev/docs/models.html",children:"Models documentation page"})," for more information."]}),"\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.code,{children:"ModelBridge"})," in Ax, as users should rarely be interacting with a ",(0,i.jsx)(n.code,{children:"Model"}),"\nobject directly (more about ModelBridge, a data transformation layer in Ax,\n",(0,i.jsx)(n.a,{href:"https://ax.dev/docs/models.html#deeper-dive-organization-of-the-modeling-stack",children:"here"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-botorchmodel--surrogate--acquisition",children:"2. BoTorchModel = Surrogate + Acquisition"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"BoTorchModel"})," in Ax consists of two main subcomponents: a surrogate model and an\nacquisition function. A surrogate model is represented as an instance of Ax\u2019s\n",(0,i.jsx)(n.code,{children:"Surrogate"})," class, which is a wrapper around BoTorch's ",(0,i.jsx)(n.code,{children:"Model"})," class. The acquisition\nfunction is represented as an instance of Ax\u2019s ",(0,i.jsx)(n.code,{children:"Acquisition"})," class, a wrapper around\nBoTorch's ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," class."]}),"\n",(0,i.jsx)(n.h3,{id:"2a-example-that-uses-defaults-and-requires-no-options",children:"2A. Example that uses defaults and requires no options"}),"\n",(0,i.jsx)(n.p,{children:"BoTorchModel does not always require surrogate and acquisition specification. If\ninstantiated without one or both components specified, defaults are selected based on\nproperties of experiment and data (see Appendix 2 for auto-selection logic)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# The surrogate is not specified, so it will be auto-selected\n# during `model.fit`.\nGPEI_model = BoTorchModel(botorch_acqf_class=qLogExpectedImprovement)\n\n# The acquisition class is not specified, so it will be\n# auto-selected during `model.gen` or `model.evaluate_acquisition`\nGPEI_model = BoTorchModel(surrogate=Surrogate(SingleTaskGP))\n\n# Both the surrogate and acquisition class will be auto-selected.\nGPEI_model = BoTorchModel()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2b-example-with-all-the-options",children:"2B. Example with all the options"}),"\n",(0,i.jsxs)(n.p,{children:["Below are the full set of configurable settings of a ",(0,i.jsx)(n.code,{children:"BoTorchModel"})," with their\ndescriptions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model = BoTorchModel(\n    # Optional `Surrogate` specification to use instead of default\n    surrogate=Surrogate(\n        # BoTorch `Model` type\n        botorch_model_class=SingleTaskGP,\n        # Optional, MLL class with which to optimize model parameters\n        mll_class=ExactMarginalLogLikelihood,\n        # Optional, dictionary of keyword arguments to underlying\n        # BoTorch `Model` constructor\n        model_options={},\n    ),\n    # Optional BoTorch `AcquisitionFunction` to use instead of default\n    botorch_acqf_class=qLogExpectedImprovement,\n    # Optional dict of keyword arguments, passed to the input\n    # constructor for the given BoTorch `AcquisitionFunction`\n    acquisition_options={},\n    # Optional Ax `Acquisition` subclass (if the given BoTorch\n    # `AcquisitionFunction` requires one, which is rare)\n    acquisition_class=None,\n    # Less common model settings shown with default values, refer\n    # to `BoTorchModel` documentation for detail\n    refit_on_cv=False,\n    warm_start_refit=True,\n)\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"2c-surrogate-and-acquisition-qa",children:["2C. ",(0,i.jsx)(n.code,{children:"Surrogate"})," and ",(0,i.jsx)(n.code,{children:"Acquisition"})," Q&A"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Why is the ",(0,i.jsx)(n.code,{children:"surrogate"})," argument expected to be an instance, but ",(0,i.jsx)(n.code,{children:"botorch_acqf_class"}),"\n\u2013\u2013 a class?"]})," Because a BoTorch ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," object (and therefore its Ax\nwrapper, ",(0,i.jsx)(n.code,{children:"Acquisition"}),") is ephemeral: it is constructed, immediately used, and destroyed\nduring ",(0,i.jsx)(n.code,{children:"BoTorchModel.gen"}),", so there is no reason to keep around an ",(0,i.jsx)(n.code,{children:"Acquisition"}),"\ninstance. A ",(0,i.jsx)(n.code,{children:"Surrogate"}),", on another hand, is kept in memory as long as its parent\n",(0,i.jsx)(n.code,{children:"BoTorchModel"})," is."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"How to know when to use specify acquisition_class (and thereby a non-default\nAcquisition type) instead of just passing in botorch_acqf_class?"})," In short, custom\n",(0,i.jsx)(n.code,{children:"Acquisition"})," subclasses are needed when a given ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," in BoTorch needs\nsome non-standard subcomponents or inputs (e.g. a custom BoTorch\n",(0,i.jsx)(n.code,{children:"MCAcquisitionObjective"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Please post any other questions you have to our dedicated issue on Github:\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/Ax/issues/363",children:"https://github.com/facebook/Ax/issues/363"}),"."]})," This functionality is in beta-release and\nyour feedback will be of great help to us!"]}),"\n",(0,i.jsxs)(n.h2,{id:"3-i-know-which-botorch-model-and-acquisitionfunction-id-like-to-combine-in-ax-how-do-set-this-up",children:["3. I know which Botorch ",(0,i.jsx)(n.code,{children:"Model"})," and ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," I'd like to combine in Ax. How do set this up?"]}),"\n",(0,i.jsxs)(n.h3,{id:"3a-making-a-surrogate-from-botorch-model",children:["3a. Making a ",(0,i.jsx)(n.code,{children:"Surrogate"})," from BoTorch ",(0,i.jsx)(n.code,{children:"Model"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["Most models should work with base ",(0,i.jsx)(n.code,{children:"Surrogate"})," in Ax, except for BoTorch ",(0,i.jsx)(n.code,{children:"ModelListGP"}),".\n",(0,i.jsx)(n.code,{children:"ModelListGP"})," is a special case because its purpose is to combine multiple sub-models\ninto a single ",(0,i.jsx)(n.code,{children:"Model"})," in BoTorch. It is most commonly used for multi-objective and\nconstrained optimization. Whether or not ",(0,i.jsx)(n.code,{children:"ModelListGP"})," is used is determined\nautomatically based on the ",(0,i.jsx)(n.code,{children:"Model"})," class and the data being used via the\n",(0,i.jsx)(n.code,{children:"ax.models.torch.botorch_modular.utils.use_model_list"})," function."]}),"\n",(0,i.jsxs)(n.p,{children:["If your ",(0,i.jsx)(n.code,{children:"Model"})," is not a ",(0,i.jsx)(n.code,{children:"ModelListGP"}),", the steps to set it up as a ",(0,i.jsx)(n.code,{children:"Surrogate"})," are:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Implement a\n",(0,i.jsxs)(n.a,{href:"https://github.com/pytorch/botorch/blob/main/botorch/models/model.py#L143",children:[(0,i.jsx)(n.code,{children:"construct_inputs"})," class method"]}),".\nThe purpose of this method is to produce arguments to a particular model from a\nstandardized set of inputs passed to BoTorch ",(0,i.jsx)(n.code,{children:"Model"}),"-s from\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/Ax/blob/main/ax/models/torch/botorch_modular/surrogate.py#L148",children:(0,i.jsx)(n.code,{children:"Surrogate.construct"})}),"\nin Ax. It should accept training data in form of a ",(0,i.jsx)(n.code,{children:"SupervisedDataset"})," container and\noptionally other keyword arguments and produce a dictionary of arguments to\n",(0,i.jsx)(n.code,{children:"__init__"})," of the ",(0,i.jsx)(n.code,{children:"Model"}),". See\n",(0,i.jsx)(n.a,{href:"https://github.com/pytorch/botorch/blob/5b3172f3daa22f6ea2f6f4d1d0a378a9518dcd8d/botorch/models/gp_regression_fidelity.py#L131",children:(0,i.jsx)(n.code,{children:"SingleTaskMultiFidelityGP.construct_inputs"})}),"\nfor an example."]}),"\n",(0,i.jsxs)(n.li,{children:["Pass any additional needed keyword arguments for the ",(0,i.jsx)(n.code,{children:"Model"})," constructor (that cannot\nbe constructed from the training data and other arguments to ",(0,i.jsx)(n.code,{children:"construct_inputs"}),") via\n",(0,i.jsx)(n.code,{children:"model_options"})," argument to ",(0,i.jsx)(n.code,{children:"Surrogate"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from botorch.models.model import Model\nfrom botorch.utils.datasets import SupervisedDataset\n\n\nclass MyModelClass(Model):\n\n    ...  # Implementation of `MyModelClass`\n\n    @classmethod\n    def construct_inputs(\n        cls, training_data: SupervisedDataset, **kwargs\n    ) -> Dict[str, Any]:\n        fidelity_features = kwargs.get("fidelity_features")\n        if fidelity_features is None:\n            raise ValueError(f"Fidelity features required for {cls.__name__}.")\n\n        return {\n            **super().construct_inputs(training_data=training_data, **kwargs),\n            "fidelity_features": fidelity_features,\n        }\n\n\nsurrogate = Surrogate(\n    botorch_model_class=MyModelClass,  # Must implement `construct_inputs`\n    # Optional dict of additional keyword arguments to `MyModelClass`\n    model_options={},\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["NOTE: if you run into a case where base ",(0,i.jsx)(n.code,{children:"Surrogate"})," does not work with your BoTorch\n",(0,i.jsx)(n.code,{children:"Model"}),", please let us know in this Github issue:\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/Ax/issues/363",children:"https://github.com/facebook/Ax/issues/363"}),", so we can find the right solution and augment\nthis tutorial."]}),"\n",(0,i.jsxs)(n.h3,{id:"3b-using-an-arbitrary-botorch-acquisitionfunction-in-ax",children:["3B. Using an arbitrary BoTorch ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," in Ax"]}),"\n",(0,i.jsxs)(n.p,{children:["Steps to set up any ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," in Ax are:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Define an input constructor function. The purpose of this method is to produce\narguments to a acquisition function from a standardized set of inputs passed to\nBoTorch ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"}),"-s from ",(0,i.jsx)(n.code,{children:"Acquisition.__init__"})," in Ax. For example, see\n",(0,i.jsx)(n.a,{href:"https://github.com/pytorch/botorch/blob/main/botorch/acquisition/input_constructors.py#L477",children:(0,i.jsx)(n.code,{children:"construct_inputs_qEHVI"})}),",\nwhich creates a fairly complex set of arguments needed by\n",(0,i.jsx)(n.code,{children:"qExpectedHypervolumeImprovement"})," \u2013\u2013 a popular multi-objective optimization\nacquisition function offered in Ax and BoTorch. For more examples, see this\ncollection in BoTorch:\n",(0,i.jsx)(n.a,{href:"https://github.com/pytorch/botorch/blob/main/botorch/acquisition/input_constructors.py",children:"botorch/acquisition/input_constructors.py"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Note that the new input constructor needs to be decorated with\n",(0,i.jsx)(n.code,{children:"@acqf_input_constructor(AcquisitionFunctionClass)"})," to register it."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["(Optional) If a given ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," requires specific options passed to the\nBoTorch ",(0,i.jsx)(n.code,{children:"optimize_acqf"}),", it's possible to add default optimizer options for a given\n",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," to avoid always manually passing them via\n",(0,i.jsx)(n.code,{children:"acquisition_options"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Specify the BoTorch ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," class as ",(0,i.jsx)(n.code,{children:"botorch_acqf_class"})," to\n",(0,i.jsx)(n.code,{children:"BoTorchModel"})]}),"\n",(0,i.jsxs)(n.li,{children:["(Optional) Pass any additional keyword arguments to acquisition function constructor\nor to the optimizer function via ",(0,i.jsx)(n.code,{children:"acquisition_options"})," argument to ",(0,i.jsx)(n.code,{children:"BoTorchModel"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from ax.models.torch.botorch_modular.optimizer_argparse import optimizer_argparse\nfrom botorch.acquisition.acquisition import AcquisitionFunction\nfrom botorch.acquisition.input_constructors import acqf_input_constructor, MaybeDict\nfrom botorch.utils.datasets import SupervisedDataset\nfrom torch import Tensor\n\n\nclass MyAcquisitionFunctionClass(AcquisitionFunction):\n    ...  # Actual contents of the acquisition function class.\n\n\n# 1. Add input constructor\n@acqf_input_constructor(MyAcquisitionFunctionClass)\ndef construct_inputs_my_acqf(\n    model: Model,\n    training_data: MaybeDict[SupervisedDataset],\n    objective_thresholds: Tensor,\n    **kwargs: Any,\n) -> Dict[str, Any]:\n    pass\n\n\n# 2. Register default optimizer options\n@optimizer_argparse.register(MyAcquisitionFunctionClass)\ndef _argparse_my_acqf(\n    acqf: MyAcquisitionFunctionClass, sequential: bool = True\n) -> dict:\n    return {\n        "sequential": sequential\n    }  # default to sequentially optimizing batches of queries\n\n\n# 3-4. Specifying `botorch_acqf_class` and `acquisition_options`\nBoTorchModel(\n    botorch_acqf_class=MyAcquisitionFunctionClass,\n    acquisition_options={\n        "alpha": 10**-6,\n        # The sub-dict by the key "optimizer_options" can be passed\n        # to propagate options to `optimize_acqf`, used in\n        # `Acquisition.optimize`, to add/override the default\n        # optimizer options registered above.\n        "optimizer_options": {"sequential": False},\n    },\n)\n'})}),"\n",(0,i.jsx)(r.A,{children:"BoTorchModel"}),"\n",(0,i.jsxs)(n.p,{children:["See section 2A for combining the resulting ",(0,i.jsx)(n.code,{children:"Surrogate"})," instance and ",(0,i.jsx)(n.code,{children:"Acquisition"})," type\ninto a ",(0,i.jsx)(n.code,{children:"BoTorchModel"}),". You can also leverage ",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR"})," for ease of use;\nmore on it in section 4 below or in section 1 quick-start example."]}),"\n",(0,i.jsxs)(n.h2,{id:"4-using-modelsbotorch_modular",children:["4. Using ",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR"})]}),"\n",(0,i.jsxs)(n.p,{children:["To simplify the instantiation of an Ax ModelBridge and its undelying Model, Ax provides\na\n",(0,i.jsxs)(n.a,{href:"https://github.com/facebook/Ax/blob/main/ax/modelbridge/registry.py#L355",children:[(0,i.jsx)(n.code,{children:"Models"})," registry enum"]}),".\nWhen calling entries of that enum (e.g. ",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR(experiment, data)"}),"), the\ninputs are automatically distributed between a ",(0,i.jsx)(n.code,{children:"Model"})," and a ",(0,i.jsx)(n.code,{children:"ModelBridge"})," for a given\nsetup. A call to a ",(0,i.jsx)(n.code,{children:"Model"})," enum member yields a model bridge with an underlying model,\nready for use to generate candidates."]}),"\n",(0,i.jsxs)(n.p,{children:["Here we use ",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR"})," to set up a model with all-default subcomponents:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_bridge_with_GPEI = Models.BOTORCH_MODULAR(\n    experiment=experiment,\n    data=data,\n)\nmodel_bridge_with_GPEI.gen(1)\n"})}),"\n",(0,i.jsx)(r.A,{children:"[INFO 09-29 17:02:46] ax.modelbridge.transforms.standardize_y: Outcome branin is constant, within tolerance."}),"\n",(0,i.jsx)(r.A,{children:"GeneratorRun(1 arms, total weight 1.0)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_bridge_with_GPEI.model.botorch_acqf_class\n"})}),"\n",(0,i.jsx)(r.A,{children:"botorch.acquisition.logei.qLogNoisyExpectedImprovement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_bridge_with_GPEI.model.surrogate.botorch_model_class\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can use the same ",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR"})," to set up a model for multi-objective\noptimization:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_bridge_with_EHVI = Models.BOTORCH_MODULAR(\n    experiment=get_branin_experiment_with_multi_objective(\n        has_objective_thresholds=True, with_batch=True\n    ),\n    data=get_branin_data_multi_objective(),\n)\nmodel_bridge_with_EHVI.gen(1)\n"})}),"\n",(0,i.jsx)(r.A,{children:"[INFO 09-29 17:02:48] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,i.jsx)(r.A,{children:"[INFO 09-29 17:02:48] ax.modelbridge.transforms.standardize_y: Outcome branin_a is constant, within tolerance."}),"\n",(0,i.jsx)(r.A,{children:"[INFO 09-29 17:02:48] ax.modelbridge.transforms.standardize_y: Outcome branin_b is constant, within tolerance."}),"\n",(0,i.jsx)(r.A,{children:"GeneratorRun(1 arms, total weight 1.0)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_bridge_with_EHVI.model.botorch_acqf_class\n"})}),"\n",(0,i.jsx)(r.A,{children:"botorch.acquisition.multi_objective.logei.qLogNoisyExpectedHypervolumeImprovement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"model_bridge_with_EHVI.model.surrogate.botorch_model_class\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Furthermore, the quick-start example at the top of this tutorial shows how to specify\nsurrogate and acquisition subcomponents to ",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR"}),"."]}),"\n",(0,i.jsxs)(n.h2,{id:"5-utilizing-botorchmodel-in-generation-strategies",children:["5. Utilizing ",(0,i.jsx)(n.code,{children:"BoTorchModel"})," in generation strategies"]}),"\n",(0,i.jsxs)(n.p,{children:["Generation strategy is a key concept in Ax, enabling use of Service API (a.k.a.\n",(0,i.jsx)(n.code,{children:"AxClient"}),") and many other higher-level abstractions. A ",(0,i.jsx)(n.code,{children:"GenerationStrategy"}),' allows to\nchain multiple models in Ax and thereby automate candidate generation. Refer to the\n"Generation Strategy" tutorial for more detail in generation strategies.']}),"\n",(0,i.jsxs)(n.p,{children:["An example generation stategy with the modular ",(0,i.jsx)(n.code,{children:"BoTorchModel"})," would look like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from ax.modelbridge.generation_strategy import GenerationStep, GenerationStrategy\nfrom ax.modelbridge.modelbridge_utils import get_pending_observation_features\n\ngs = GenerationStrategy(\n    steps=[\n        GenerationStep(  # Initialization step\n            # Which model to use for this step\n            model=Models.SOBOL,\n            # How many generator runs (each of which is then made a trial)\n            # to produce with this step\n            num_trials=5,\n            # How many trials generated from this step must be `COMPLETED`\n            # before the next one\n            min_trials_observed=5,\n        ),\n        GenerationStep(  # BayesOpt step\n            model=Models.BOTORCH_MODULAR,\n            # No limit on how many generator runs will be produced\n            num_trials=-1,\n            model_kwargs={  # Kwargs to pass to `BoTorchModel.__init__`\n                "surrogate": Surrogate(SingleTaskGP),\n                "botorch_acqf_class": qLogNoisyExpectedImprovement,\n            },\n        ),\n    ]\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Set up an experiment and generate 10 trials in it, adding synthetic data to experiment\nafter each one:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"experiment = get_branin_experiment(minimize=True)\n\nassert len(experiment.trials) == 0\nexperiment.search_space\n"})}),"\n",(0,i.jsx)(r.A,{children:"[INFO 09-29 17:02:49] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,i.jsx)(r.A,{children:"SearchSpace(parameters=[RangeParameter(name='x1', parameter_type=FLOAT, range=[-5.0, 10.0]), RangeParameter(name='x2', parameter_type=FLOAT, range=[0.0, 15.0])], parameter_constraints=[])"}),"\n",(0,i.jsxs)(n.h2,{id:"5a-specifying-pending_observations",children:["5a. Specifying ",(0,i.jsx)(n.code,{children:"pending_observations"})]}),"\n",(0,i.jsxs)(n.p,{children:["Note that it's important to ",(0,i.jsx)(n.strong,{children:"specify pending observations"})," to the call to ",(0,i.jsx)(n.code,{children:"gen"})," to\navoid getting the same points re-suggested. Without ",(0,i.jsx)(n.code,{children:"pending_observations"}),' argument, Ax\nmodels are not aware of points that should be excluded from generation. Points are\nconsidered "pending" when they belong to ',(0,i.jsx)(n.code,{children:"STAGED"}),", ",(0,i.jsx)(n.code,{children:"RUNNING"}),", or ",(0,i.jsx)(n.code,{children:"ABANDONED"}),' trials\n(with the latter included so model does not re-suggest points that are considered "bad"\nand should not be re-suggested).']}),"\n",(0,i.jsxs)(n.p,{children:["If the call to ",(0,i.jsx)(n.code,{children:"get_pending_observation_features"})," becomes slow in your setup (since it\nperforms data-fetching etc.), you can opt for\n",(0,i.jsx)(n.code,{children:"get_pending_observation_features_based_on_trial_status"})," (also from\n",(0,i.jsx)(n.code,{children:"ax.modelbridge.modelbridge_utils"}),"), but note the limitations of that utility (detailed\nin its docstring)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"for _ in range(10):\n    # Produce a new generator run and attach it to experiment as a trial\n    generator_run = gs.gen(\n        experiment=experiment,\n        n=1,\n        pending_observations=get_pending_observation_features(experiment=experiment),\n    )\n    trial = experiment.new_trial(generator_run)\n\n    # Mark the trial as 'RUNNING' so we can mark it 'COMPLETED' later\n    trial.mark_running(no_runner_required=True)\n\n    # Attach data for the new trial and mark it 'COMPLETED'\n    experiment.attach_data(get_branin_data(trials=[trial]))\n    trial.mark_completed()\n\n    print(f\"Completed trial #{trial.index}, suggested by {generator_run._model_key}.\")\n"})}),"\n",(0,i.jsx)(r.A,{children:'/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning: Encountered exception in computing model fit quality: RandomModelBridge does not support prediction.\nwarn("Encountered exception in computing model fit quality: " + str(e))\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning: Encountered exception in computing model fit quality: RandomModelBridge does not support prediction.\nwarn("Encountered exception in computing model fit quality: " + str(e))\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning: Encountered exception in computing model fit quality: RandomModelBridge does not support prediction.\nwarn("Encountered exception in computing model fit quality: " + str(e))\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning: Encountered exception in computing model fit quality: RandomModelBridge does not support prediction.\nwarn("Encountered exception in computing model fit quality: " + str(e))\n/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning: Encountered exception in computing model fit quality: RandomModelBridge does not support prediction.\nwarn("Encountered exception in computing model fit quality: " + str(e))'}),"\n",(0,i.jsx)(r.A,{children:"Completed trial #0, suggested by Sobol.\nCompleted trial #1, suggested by Sobol.\nCompleted trial #2, suggested by Sobol.\nCompleted trial #3, suggested by Sobol.\nCompleted trial #4, suggested by Sobol."}),"\n",(0,i.jsx)(r.A,{children:"Completed trial #5, suggested by BoTorch."}),"\n",(0,i.jsx)(r.A,{children:"Completed trial #6, suggested by BoTorch."}),"\n",(0,i.jsx)(r.A,{children:"Completed trial #7, suggested by BoTorch."}),"\n",(0,i.jsx)(r.A,{children:"Completed trial #8, suggested by BoTorch."}),"\n",(0,i.jsx)(r.A,{children:"Completed trial #9, suggested by BoTorch."}),"\n",(0,i.jsx)(n.p,{children:"Now we examine the experiment and observe the trials that were added to it and produced\nby the generation strategy:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"exp_to_df(experiment)\n"})}),"\n",(0,i.jsx)(r.A,{children:"[WARNING 09-29 17:02:54] ax.service.utils.report_utils: Column reason missing for all trials. Not appending column."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"right"}}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"trial_index"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"arm_name"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"trial_status"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"generation_method"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"branin"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"x1"}),(0,i.jsx)(n.th,{style:{textAlign:"right"},children:"x2"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Sobol"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"25.6242"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"-0.723826"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"4.31631"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"1_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Sobol"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"114.994"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"6.5899"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"10.9117"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Sobol"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"21.8386"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"6.21173"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"2.60204"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"3"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"3"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"3_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Sobol"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"16.701"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"-2.04487"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"13.1241"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"4"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"4"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"4_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Sobol"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"137.49"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"-3.2435"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"0.814772"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"5"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"5"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"5_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"BoTorch"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"7.39147"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"3.70754"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"4.21946"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"6"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"6"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"6_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"BoTorch"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"18.3949"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"-5"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"14.8059"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"7"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"7"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"7_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"BoTorch"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"3.27782"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"10"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"4.15824"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"8"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"8"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"8_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"BoTorch"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"10.8335"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"8.19733"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"3.65068"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"9"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"9"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"9_0"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"COMPLETED"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"BoTorch"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"9.8066"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"9.14436"}),(0,i.jsx)(n.td,{style:{textAlign:"right"},children:"5.25422"})]})]})]}),"\n",(0,i.jsxs)(n.h2,{id:"6-customizing-a-surrogate-or-acquisition",children:["6. Customizing a ",(0,i.jsx)(n.code,{children:"Surrogate"})," or ",(0,i.jsx)(n.code,{children:"Acquisition"})]}),"\n",(0,i.jsxs)(n.p,{children:["We expect the base ",(0,i.jsx)(n.code,{children:"Surrogate"})," and ",(0,i.jsx)(n.code,{children:"Acquisition"})," classes to work with most BoTorch\ncomponents, but there could be a case where you would need to subclass one of\naforementioned abstractions to handle a given BoTorch component. If you run into a case\nlike this, feel free to open an issue on our\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/Ax/issues",children:"Github issues page"})," \u2013\u2013\xa0it would be very useful\nfor us to know"]}),"\n",(0,i.jsxs)(n.p,{children:["One such example would be a need for a custom ",(0,i.jsx)(n.code,{children:"MCAcquisitionObjective"})," or posterior\ntransform. To subclass ",(0,i.jsx)(n.code,{children:"Acquisition"})," accordingly, one would override the\n",(0,i.jsx)(n.code,{children:"get_botorch_objective_and_transform"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from botorch.acquisition.objective import MCAcquisitionObjective, PosteriorTransform\nfrom botorch.acquisition.risk_measures import RiskMeasureMCObjective\n\n\nclass CustomObjectiveAcquisition(Acquisition):\n    def get_botorch_objective_and_transform(\n        self,\n        botorch_acqf_class: Type[AcquisitionFunction],\n        model: Model,\n        objective_weights: Tensor,\n        objective_thresholds: Optional[Tensor] = None,\n        outcome_constraints: Optional[Tuple[Tensor, Tensor]] = None,\n        X_observed: Optional[Tensor] = None,\n        risk_measure: Optional[RiskMeasureMCObjective] = None,\n    ) -> Tuple[Optional[MCAcquisitionObjective], Optional[PosteriorTransform]]:\n        ...  # Produce the desired `MCAcquisitionObjective` and `PosteriorTransform` instead of the default\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then to use the new subclass in ",(0,i.jsx)(n.code,{children:"BoTorchModel"}),", just specify ",(0,i.jsx)(n.code,{children:"acquisition_class"}),"\nargument along with ",(0,i.jsx)(n.code,{children:"botorch_acqf_class"})," (to ",(0,i.jsx)(n.code,{children:"BoTorchModel"})," directly or to\n",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR"}),", which just passes the relevant arguments to ",(0,i.jsx)(n.code,{children:"BoTorchModel"}),"\nunder the hood, as discussed in section 4):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"Models.BOTORCH_MODULAR(\n    experiment=experiment,\n    data=data,\n    acquisition_class=CustomObjectiveAcquisition,\n    botorch_acqf_class=MyAcquisitionFunctionClass,\n)\n"})}),"\n",(0,i.jsx)(r.A,{children:"[INFO 09-29 17:02:54] ax.modelbridge.transforms.standardize_y: Outcome branin is constant, within tolerance."}),"\n",(0,i.jsx)(r.A,{children:"TorchModelBridge(model=BoTorchModel)"}),"\n",(0,i.jsxs)(n.p,{children:["To use a custom ",(0,i.jsx)(n.code,{children:"Surrogate"})," subclass, pass the ",(0,i.jsx)(n.code,{children:"surrogate"})," argument of that type:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR(\n    experiment=experiment,\n    data=data,\n    surrogate=CustomSurrogate(botorch_model_class=MyModelClass),\n)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"appendix-1-methods-available-on-botorchmodel",children:["Appendix 1: Methods available on ",(0,i.jsx)(n.code,{children:"BoTorchModel"})]}),"\n",(0,i.jsxs)(n.p,{children:["Note that usually all these methods are used through ",(0,i.jsx)(n.code,{children:"ModelBridge"})," \u2013\u2013\xa0a convertion and\ntransformation layer that adapts Ax abstractions to inputs required by the given model."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Core methods on ",(0,i.jsx)(n.code,{children:"BoTorchModel"}),":"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fit"})," selects a surrogate if needed and fits the surrogate model to data via\n",(0,i.jsx)(n.code,{children:"Surrogate.fit"}),","]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"predict"})," estimates metric values at a given point via ",(0,i.jsx)(n.code,{children:"Surrogate.predict"}),","]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"gen"})," instantiates an acquisition function via ",(0,i.jsx)(n.code,{children:"Acquisition.__init__"})," and optimizes it\nto generate candidates."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Other methods on ",(0,i.jsx)(n.code,{children:"BoTorchModel"}),":"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"update"})," updates surrogate model with training data and optionally reoptimizes model\nparameters via ",(0,i.jsx)(n.code,{children:"Surrogate.update"}),","]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cross_validate"})," re-fits the surrogate model to subset of training data and makes\npredictions for test data,"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"evaluate_acquisition_function"})," instantiates an acquisition function and evaluates it\nfor a given point."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"appendix-2-default-surrogate-models-and-acquisition-functions",children:"Appendix 2: Default surrogate models and acquisition functions"}),"\n",(0,i.jsx)(n.p,{children:"By default, the chosen surrogate model will be:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["if fidelity parameters are present in search space: ",(0,i.jsx)(n.code,{children:"SingleTaskMultiFidelityGP"}),","]}),"\n",(0,i.jsxs)(n.li,{children:["if task parameters are present: a set of ",(0,i.jsx)(n.code,{children:"MultiTaskGP"})," wrapped in a ",(0,i.jsx)(n.code,{children:"ModelListGP"})," and\neach modeling one task,"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SingleTaskGP"})," otherwise."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The chosen acquisition function will be:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["for multi-objective settings: ",(0,i.jsx)(n.code,{children:"qLogExpectedHypervolumeImprovement"}),","]}),"\n",(0,i.jsxs)(n.li,{children:["for single-objective settings: ",(0,i.jsx)(n.code,{children:"qLogNoisyExpectedImprovement"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"appendix-3-handling-storage-errors-that-arise-from-objects-that-dont-have-serialization-logic-in-a",children:"Appendix 3: Handling storage errors that arise from objects that don't have serialization logic in A"}),"\n",(0,i.jsxs)(n.p,{children:["Attempting to store a generator run produced via ",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR"})," instance that\nincluded options without serization logic with will produce an error like:\n",(0,i.jsx)(n.code,{children:"\"Object <SomeAcquisitionOption object> passed to 'object_to_json' (of type <class SomeAcquisitionOption'>) is not registered with a corresponding encoder in ENCODER_REGISTRY.\""})]}),"\n",(0,i.jsx)(n.p,{children:"The two options for handling this error are:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["disabling storage of ",(0,i.jsx)(n.code,{children:"BoTorchModel"}),"'s options by passing\n",(0,i.jsx)(n.code,{children:"no_model_options_storage=True"})," to ",(0,i.jsx)(n.code,{children:"Models.BOTORCH_MODULAR(...)"})," call \u2013\u2013 this will\nprevent model options from being stored on the generator run, so a generator run can\nbe saved but cannot be used to restore the model that produced it,"]}),"\n",(0,i.jsxs)(n.li,{children:["specifying serialization logic for a given object that needs to occur among the\n",(0,i.jsx)(n.code,{children:"Model"})," or ",(0,i.jsx)(n.code,{children:"AcquisitionFunction"})," options. Tutorial for this is in the works, but in\nthe meantime you can\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/Ax/issues",children:"post an issue on the Ax GitHub"})," to get help\nwith this."]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},31023:(e,n,t)=>{t.d(n,{A:()=>x});t(96540);var i,o=new Uint8Array(16);function s(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(o)}const r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const l=function(e){return"string"==typeof e&&r.test(e)};for(var a=[],d=0;d<256;++d)a.push((d+256).toString(16).substr(1));const c=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(a[e[n+0]]+a[e[n+1]]+a[e[n+2]]+a[e[n+3]]+"-"+a[e[n+4]]+a[e[n+5]]+"-"+a[e[n+6]]+a[e[n+7]]+"-"+a[e[n+8]]+a[e[n+9]]+"-"+a[e[n+10]]+a[e[n+11]]+a[e[n+12]]+a[e[n+13]]+a[e[n+14]]+a[e[n+15]]).toLowerCase();if(!l(t))throw TypeError("Stringified UUID is invalid");return t};const h=function(e,n,t){var i=(e=e||{}).random||(e.rng||s)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,n){t=t||0;for(var o=0;o<16;++o)n[t+o]=i[o];return n}return c(i)};var u=t(74848);const x=function(e){return(0,u.jsxs)("div",{style:{backgroundColor:"var(--ifm-pre-background)",marginBottom:"10px",borderRadius:"var(--ifm-global-radius)",overflow:"hidden",padding:"5px",font:"var(--ifm-code-font-size) / var(--ifm-pre-line-height) var(--ifm-font-family-monospace)"},children:[(0,u.jsx)("span",{style:{color:"red"},children:"Out: "}),(0,u.jsx)("pre",{style:{margin:"0px",backgroundColor:"inherit",padding:"8px"},children:e.children.split("\n").map((function(e){return(0,u.jsx)("p",{style:{marginBottom:"0px"},children:e},h())}))})]})}},38987:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(28774),o=t(43186),s=t(74848);const r=function(e){var n=e.githubUrl,t=e.colabUrl;return(0,s.jsxs)("div",{children:[(0,s.jsxs)(i.A,{to:n,className:"button button--outline button--primary margin--xs",children:["Open in GitHub",(0,s.jsx)(o.A,{})]}),(0,s.jsxs)(i.A,{to:t,className:"button button--outline button--primary margin--xs",children:["Run in Google Colab",(0,s.jsx)(o.A,{})]}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{})]})}},70290:(e,n,t)=>{t.d(n,{z:()=>a});var i=t(96540),o=t(53259),s=t.n(o),r=(t(92303),t(74848));var l=s()({loader:function(){return t.e(1236).then(t.bind(t,91236))},loading:function(e){return e.timedOut?(0,r.jsx)("blockquote",{children:"Error: Loading Plotly timed out."}):(0,r.jsx)("div",{children:"loading..."})},timeout:1e4}),a=i.memo((function(e){var n=e.data;return(0,r.jsx)("div",{className:"plotly-figure",style:{"overflow-x":"auto"},children:(0,r.jsx)(l,{data:n.data,layout:n.layout})})}))},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);