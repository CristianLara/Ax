"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4367],{27686:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=r(74848),a=r(28453);const s={id:"storage",title:"Storage"},i=void 0,o={id:"storage",title:"Storage",description:"Ax has extensible support for saving and loading experiments in both JSON and SQL. The former is a good option for users who prefer lightweight, transportable storage, and the latter is better suited to production applications requiring a centralized, high-performance database.",source:"@site/versioned_docs/version-0.9.3/storage.md",sourceDirName:".",slug:"/storage",permalink:"/Ax/docs/storage",draft:!1,unlisted:!1,tags:[],version:"0.9.3",lastUpdatedBy:"Cristian Lara",lastUpdatedAt:1732660905e3,frontMatter:{id:"storage",title:"Storage"},sidebar:"docs",previous:{title:"Models",permalink:"/Ax/docs/models"}},c={},d=[{value:"JSON",id:"json",level:2},{value:"Saving",id:"saving",level:3},{value:"Updating",id:"updating",level:3},{value:"Loading",id:"loading",level:3},{value:"Customizing",id:"customizing",level:3},{value:"SQL",id:"sql",level:2},{value:"Saving",id:"saving-1",level:3},{value:"Updating",id:"updating-1",level:3},{value:"Loading",id:"loading-1",level:3},{value:"Customizing",id:"customizing-1",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Ax has extensible support for saving and loading experiments in both JSON and SQL. The former is a good option for users who prefer lightweight, transportable storage, and the latter is better suited to production applications requiring a centralized, high-performance database."}),"\n",(0,t.jsx)(n.h2,{id:"json",children:"JSON"}),"\n",(0,t.jsx)(n.h3,{id:"saving",children:"Saving"}),"\n",(0,t.jsx)(n.p,{children:"To save an experiment to JSON, specify the filepath:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'from ax import Experiment\nfrom ax.storage.json_store.save import save_experiment\n\nexperiment = Experiment(...)\nfilepath = "experiments/experiment.json"\nsave_experiment(experiment, filepath)\n'})}),"\n",(0,t.jsx)(n.p,{children:"The experiment (including attached data) will be serialized and saved to the specified file."}),"\n",(0,t.jsx)(n.h3,{id:"updating",children:"Updating"}),"\n",(0,t.jsx)(n.p,{children:"To update a JSON-backed experiment, re-save to the same file."}),"\n",(0,t.jsx)(n.h3,{id:"loading",children:"Loading"}),"\n",(0,t.jsx)(n.p,{children:"To load an experiment from JSON, specify the filepath again:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from ax.storage.json_store.load import load_experiment\nexperiment = load_experiment(filepath)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"customizing",children:"Customizing"}),"\n",(0,t.jsxs)(n.p,{children:["If you add a custom ",(0,t.jsx)(n.a,{href:"/api/core.html#module-ax.core.metric",children:(0,t.jsx)(n.code,{children:"Metric"})})," or ",(0,t.jsx)(n.a,{href:"../api/core.html#ax.core.runner.Runner",children:(0,t.jsx)(n.code,{children:"Runner"})})," and want to ensure it is saved to JSON properly, create a ",(0,t.jsx)(n.a,{href:"/api/storage.html#ax.storage.registry_bundle.RegistryBundle",children:(0,t.jsx)(n.code,{children:"RegistryBundle"})}),", which bundles together encoding and decoding logic for use in the various save/load functions as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'from ax import Experiment, Metric, Runner, SearchSpace\nfrom ax.storage.json_store.load import load_experiment\nfrom ax.storage.json_store.save import save_experiment\nfrom ax.storage.registry_bundle import RegistryBundle\n\n# Minimal custom runner/metric.\nclass MyRunner(Runner):\n    def run():\n        pass\n\nclass MyMetric(Metric):\n    pass\n\n# Minimal experiment must have a search space, plus our custom classes.\nexperiment = Experiment(\n    search_space=SearchSpace(parameters=[]),\n    runner=MyRunner(),\n    tracking_metrics=[MyMetric(name="my_metric")]\n)\n\n# A RegistryBundle allows Ax to encode/decode the custom classes.\nbundle = RegistryBundle(\n    runner_clss={MyRunner: None}\n    metric_clss={MyMetric: None},\n)\n\nfilepath = "experiments/experiment.json"\nsave_experiment(experiment=experiment, filepath=filepath, encoder_registry=bundle.encoder_registry)\n\nloaded_experiment=load_experiment(filepath=filepath, decoder_registry=bundle.decoder_registry)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"sql",children:"SQL"}),"\n",(0,t.jsx)(n.h3,{id:"saving-1",children:"Saving"}),"\n",(0,t.jsxs)(n.p,{children:["To save an experiment to SQL, first initialize a session by passing a URL pointing to your database. Such a URL is typically composed of a dialect (e.g. sqlite, mysql, postgresql), optional driver (DBAPI used to connect to the database; e.g. psycopg2 for postgresql), username, password, hostname, and database name. A more detailed explanation how to generate a URL can be found in the ",(0,t.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls",children:"SQLAlchemy docs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'from ax.storage.sqa_store.db import init_engine_and_session_factory\n\n# url is of the form "dialect+driver://username:password@host:port/database"\ninit_engine_and_session_factory(url="postgresql+psycopg2://[USERNAME]:[PASSWORD]@localhost:[PORT]/[DATABASE]")\n'})}),"\n",(0,t.jsx)(n.p,{children:"Then create all tables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from ax.storage.sqa_store.db import get_engine, create_all_tables\n\nengine = get_engine()\ncreate_all_tables(engine)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then save your experiment:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from ax import Experiment\nfrom ax.storage.sqa_store.save import save_experiment\n\nexperiment = Experiment(...)\nsave_experiment(experiment)\n"})}),"\n",(0,t.jsx)(n.p,{children:"The experiment (including attached data) will be saved to the corresponding tables."}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, you can pass a ",(0,t.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine.params.creator",children:"creator function"})," instead of a url to ",(0,t.jsx)(n.code,{children:"init_engine_and_session_factory"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from ax import Experiment\nfrom ax.storage.sqa_store.db import init_engine_and_session_factory\nfrom ax.storage.sqa_store.save import save_experiment\n\ninit_engine_and_session_factory(creator=creator)\nexperiment = Experiment(...)\nsave_experiment(experiment)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"updating-1",children:"Updating"}),"\n",(0,t.jsxs)(n.p,{children:["To update a SQL-backed experiment, call ",(0,t.jsx)(n.code,{children:"save_experiment(experiment)"})," again. Ax will determine what updates to perform."]}),"\n",(0,t.jsx)(n.h3,{id:"loading-1",children:"Loading"}),"\n",(0,t.jsx)(n.p,{children:"To load an experiment from SQL, specify the name:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from ax import Experiment\nfrom ax.storage.sqa_store.db import init_engine_and_session_factory\nfrom ax.storage.sqa_store.load import load_experiment\n\ninit_engine_and_session_factory(url=dialect+driver://username:password@host:port/database)\nexperiment = load_experiment(experiment_name)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"customizing-1",children:"Customizing"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Adding a new metric or runner:"})}),"\n",(0,t.jsxs)(n.p,{children:["If you add a custom ",(0,t.jsx)(n.a,{href:"/api/core.html#module-ax.core.metric",children:(0,t.jsx)(n.code,{children:"Metric"})})," or ",(0,t.jsx)(n.a,{href:"../api/core.html#ax.core.runner.Runner",children:(0,t.jsx)(n.code,{children:"Runner"})})," and want to ensure it is saved to SQL properly, create a ",(0,t.jsx)(n.a,{href:"/api/storage.html#ax.storage.registry_bundle.RegistryBundle",children:(0,t.jsx)(n.code,{children:"RegistryBundle"})}),", which bundles together encoding and decoding logic for use in the various save/load functions as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'from ax import Experiment, RangeParameter, ParameterType\nfrom ax.storage.sqa_store.load import load_experiment\nfrom ax.storage.sqa_store.save import save_experiment\nfrom ax.storage.sqa_store.sqa_config import SQAConfig\n\n# Minimal custom runner/metric.\nclass MyRunner(Runner):\n    def run():\n        pass\n\nclass MyMetric(Metric):\n    pass\n\n# Minimal experiment for SQA must have a name and a nonempty SearchSpace, plus our custom classes.\nexperiment = Experiment(\n    name="my_experiment",\n    search_space=SearchSpace(\n        parameters=[\n            RangeParameter(\n                lower=0,\n                upper=1,\n                name="my_parameter",\n                parameter_type=ParameterType.FLOAT\n            )\n        ]\n    ),\n    runner=MyRunner(),\n    tracking_metrics=[MyMetric(name="my_metric")],\n)\n\n# The RegistryBundle contains our custom classes.\nbundle = RegistryBundle(\n    metric_clss={MyMetric: None},\n    runner_clss={MyRunner: None}\n)\n\n# Abstract this into a SQAConfig as follows, to make loading/saving a bit simpler.\nsqa_config = SQAConfig(\n    json_encoder_registry=bundle.encoder_registry,\n    json_decoder_registry=bundle.decoder_registry,\n    metric_registry=bundle.metric_registry,\n    runner_registry=bundle.runner_registry,\n)\n\nsave_experiment(experiment, config=sqa_config)\n\nloaded_experiment = load_experiment(experiment_name="my_experiment", config=sqa_config)\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Specifying experiment types:"})}),"\n",(0,t.jsxs)(n.p,{children:["If you choose to add types to your experiments, create an Enum mapping experiment types to integer representations, pass this Enum to a custom instance of ",(0,t.jsx)(n.code,{children:"SQAConfig"}),", and then pass the config to ",(0,t.jsx)(n.code,{children:"sqa_store.save"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from ax import Experiment\nfrom ax.storage.sqa_store.save import save_experiment\nfrom ax.storage.sqa_store.sqa_config import SQAConfig\nfrom enum import Enum\n\nclass ExperimentType(Enum):\n    DEFAULT: 0\n\nconfig = SQAConfig(experiment_type_enum=ExperimentType)\nsave_experiment(experiment, config=config)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Specifying generator run types:"})}),"\n",(0,t.jsxs)(n.p,{children:["If you choose to add types to your generator runs (beyond the existing ",(0,t.jsx)(n.code,{children:"status_quo"})," type), create an enum mapping generator run types to integer representations, pass this enum to a custom instance of ",(0,t.jsx)(n.code,{children:"SQAConfig"}),", and then pass the config to ",(0,t.jsx)(n.code,{children:"sqa_store.save"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:"from ax import Experiment\nfrom ax.storage.sqa_store.save import save_experiment\nfrom ax.storage.sqa_store.sqa_config import SQAConfig\nfrom enum import Enum\n\nclass GeneratorRunType(Enum):\n    DEFAULT: 0\n    STATUS_QUO: 1\n\nconfig = SQAConfig(generator_run_type_enum=GeneratorRunType)\nsave_experiment(experiment, config=config)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(96540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);