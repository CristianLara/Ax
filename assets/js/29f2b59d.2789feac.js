"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8808],{36244:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>h});var i=t(74848),r=t(28453),a=t(38987),o=t(31023);t(70290);const s={title:"Generation Strategy",sidebar_label:"Generation Strategy"},l="Generation Strategy (GS) Tutorial",d={id:"tutorials/generation_strategy/index",title:"Generation Strategy",description:"<LinkButtons",source:"@site/versioned_docs/version-0.9.1/tutorials/generation_strategy/index.mdx",sourceDirName:"tutorials/generation_strategy",slug:"/tutorials/generation_strategy/",permalink:"/Ax/docs/0.9.1/tutorials/generation_strategy/",draft:!1,unlisted:!1,tags:[],version:"0.9.1",lastUpdatedBy:"Cristian Lara",lastUpdatedAt:173231163e4,frontMatter:{title:"Generation Strategy",sidebar_label:"Generation Strategy"},sidebar:"tutorials",previous:{title:"Visualizations",permalink:"/Ax/docs/0.9.1/tutorials/visualizations/"},next:{title:"Scheduler",permalink:"/Ax/docs/0.9.1/tutorials/scheduler/"}},c={},h=[{value:"1. Quick-start examples",id:"1-quick-start-examples",level:2},{value:"1A. Manually configured generation strategy",id:"1a-manually-configured-generation-strategy",level:3},{value:"1B. Auto-selected generation strategy",id:"1b-auto-selected-generation-strategy",level:3},{value:"1C. Candidate generation from a generation strategy",id:"1c-candidate-generation-from-a-generation-strategy",level:3},{value:"2. <code>GenerationStep</code> as a building block of generation strategy",id:"2-generationstep-as-a-building-block-of-generation-strategy",level:2},{value:"2A. Describing a model to use in a given <code>GenerationStep</code>",id:"2a-describing-a-model-to-use-in-a-given-generationstep",level:3},{value:"2B. Other <code>GenerationStep</code> settings",id:"2b-other-generationstep-settings",level:3},{value:"2C. Chaining <code>GenerationStep</code>-s together",id:"2c-chaining-generationstep-s-together",level:2},{value:"2D. <code>max_parallelism</code> enforcement",id:"2d-max_parallelism-enforcement",level:2},{value:"3. SQL and JSON storage of a generation strategy",id:"3-sql-and-json-storage-of-a-generation-strategy",level:2},{value:"3A. SQL storage",id:"3a-sql-storage",level:3},{value:"3B. JSON storage",id:"3b-json-storage",level:3},{value:"3. Advanced considerations",id:"3-advanced-considerations",level:2},{value:"3A. <code>GenerationStrategy.gen</code> produces <code>GeneratorRun</code>-s, not trials",id:"3a-generationstrategygen-produces-generatorrun-s-not-trials",level:3},{value:"3B. <code>model_kwargs</code> elements that do not define serialization logic in Ax",id:"3b-model_kwargs-elements-that-do-not-define-serialization-logic-in-ax",level:3},{value:"3C. Why prefer <code>Models</code> enum entries over a factory function?",id:"3c-why-prefer-models-enum-entries-over-a-factory-function",level:3},{value:"3D. How can I request more modeling setups added to <code>Models</code> and natively supported in Ax?",id:"3d-how-can-i-request-more-modeling-setups-added-to-models-and-natively-supported-in-ax",level:3}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.A,{githubUrl:"https://github.com/cristianlara/Ax/blob/main/tutorials/generation_strategy.ipynb",colabUrl:"https://colab.research.google.com/github/cristianlara/Ax/blob/main/tutorials/generation_strategy.ipynb"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from ax.modelbridge.dispatch_utils import choose_generation_strategy\nfrom ax.modelbridge.generation_strategy import GenerationStep, GenerationStrategy\nfrom ax.modelbridge.modelbridge_utils import get_pending_observation_features\nfrom ax.modelbridge.registry import ModelRegistryBase, Models\n\nfrom ax.utils.testing.core_stubs import get_branin_experiment, get_branin_search_space\n"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"generation-strategy-gs-tutorial",children:"Generation Strategy (GS) Tutorial"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"GenerationStrategy"}),"\n(",(0,i.jsx)(n.a,{href:"https://ax.dev/api/modelbridge.html#ax.modelbridge.generation_strategy.GenerationStrategy",children:"API reference"}),")\nis a key abstraction in Ax:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It allows for specifying multiple optimization algorithms to chain one after another\nin the course of the optimization."}),"\n",(0,i.jsxs)(n.li,{children:["Many higher-level APIs in Ax use generation strategies: Service and Loop APIs,\n",(0,i.jsx)(n.code,{children:"Scheduler"})," etc. (tutorials for all those higher-level APIs are here:\n",(0,i.jsx)(n.a,{href:"https://ax.dev/tutorials/",children:"https://ax.dev/tutorials/"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Generation strategy allows for storage and resumption of modeling setups, making\noptimization resumable from SQL or JSON snapshots."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial walks through a few examples of generation strategies and discusses its\nimportant settings. Before reading it, we recommend familiarizing yourself with how\n",(0,i.jsx)(n.code,{children:"Model"})," and ",(0,i.jsx)(n.code,{children:"ModelBridge"})," work in Ax:\n",(0,i.jsx)(n.a,{href:"https://ax.dev/docs/models.html#deeper-dive-organization-of-the-modeling-stack",children:"https://ax.dev/docs/models.html#deeper-dive-organization-of-the-modeling-stack"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Contents:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Quick-start examples","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Manually configured GS"}),"\n",(0,i.jsx)(n.li,{children:"Auto-selected GS"}),"\n",(0,i.jsx)(n.li,{children:"Candidate generation from a GS"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Deep dive: ",(0,i.jsx)(n.code,{children:"GenerationStep"})," a building block of the generation strategy","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Describing a model"}),"\n",(0,i.jsxs)(n.li,{children:["Other ",(0,i.jsx)(n.code,{children:"GenerationStep"})," settings"]}),"\n",(0,i.jsxs)(n.li,{children:["Chaining ",(0,i.jsx)(n.code,{children:"GenerationStep"}),"-s together"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max_parallelism"})," enforcement and handling the ",(0,i.jsx)(n.code,{children:"MaxParallelismReachedException"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GenerationStrategy"})," storage","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"JSON storage"}),"\n",(0,i.jsx)(n.li,{children:"SQL storage"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:['Advanced considerations / "gotchas"',"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Generation strategy produces ",(0,i.jsx)(n.code,{children:"GeneratorRun"}),"-s, not ",(0,i.jsx)(n.code,{children:"Trial"}),"-s"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"model_kwargs"})," elements that don't have associated serialization logic in Ax"]}),"\n",(0,i.jsxs)(n.li,{children:["Why prefer ",(0,i.jsx)(n.code,{children:"Models"})," registry enum entries over a factory function?"]}),"\n",(0,i.jsxs)(n.li,{children:["How to request more modeling setups in ",(0,i.jsx)(n.code,{children:"Models"}),"?"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-quick-start-examples",children:"1. Quick-start examples"}),"\n",(0,i.jsx)(n.h3,{id:"1a-manually-configured-generation-strategy",children:"1A. Manually configured generation strategy"}),"\n",(0,i.jsx)(n.p,{children:"Below is a typical generation strategy used for most single-objective optimization cases\nin Ax:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'gs = GenerationStrategy(\n    steps=[\n        # 1. Initialization step (does not require pre-existing data and is well-suited for\n        # initial sampling of the search space)\n        GenerationStep(\n            model=Models.SOBOL,\n            num_trials=5,  # How many trials should be produced from this generation step\n            min_trials_observed=3,  # How many trials need to be completed to move to next model\n            max_parallelism=5,  # Max parallelism for this step\n            model_kwargs={"seed": 999},  # Any kwargs you want passed into the model\n            model_gen_kwargs={},  # Any kwargs you want passed to `modelbridge.gen`\n        ),\n        # 2. Bayesian optimization step (requires data obtained from previous phase and learns\n        # from all data available at the time of each new candidate generation call)\n        GenerationStep(\n            model=Models.BOTORCH_MODULAR,\n            num_trials=-1,  # No limitation on how many trials should be produced from this step\n            max_parallelism=3,  # Parallelism limit for this step, often lower than for Sobol\n            # More on parallelism vs. required samples in BayesOpt:\n            # https://ax.dev/docs/bayesopt.html#tradeoff-between-parallelism-and-total-number-of-trials\n        ),\n    ]\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"1b-auto-selected-generation-strategy",children:"1B. Auto-selected generation strategy"}),"\n",(0,i.jsxs)(n.p,{children:["Ax provides a\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/Ax/blob/main/ax/modelbridge/dispatch_utils.py#L115",children:(0,i.jsx)(n.code,{children:"choose_generation_strategy"})}),"\nutility, which can auto-select a suitable generation strategy given a search space and\nan array of other optional settings. The utility is fairly simple at the moment, but\nadditional development (support for multi-objective optimization, multi-fidelity\noptimization, Bayesian optimization with categorical kernels etc.) is coming soon."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"gs = choose_generation_strategy(\n    # Required arguments:\n    search_space=get_branin_search_space(),  # Ax `SearchSpace`\n    # Some optional arguments (shown with their defaults), see API docs for more settings:\n    # https://ax.dev/api/modelbridge.html#module-ax.modelbridge.dispatch_utils\n    use_batch_trials=False,  # Whether this GS will be used to generate 1-arm `Trial`-s or `BatchTrials`\n    no_bayesian_optimization=False,  # Use quasi-random candidate generation without BayesOpt\n    max_parallelism_override=None,  # Integer, to which to set the `max_parallelism` setting of all steps in this GS\n)\ngs\n"})}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:13] ax.modelbridge.dispatch_utils: Using Models.BOTORCH_MODULAR since there is at least one ordered parameter and there are no unordered categorical parameters."}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:13] ax.modelbridge.dispatch_utils: Calculating the number of remaining initialization trials based on num_initialization_trials=None max_initialization_trials=None num_tunable_parameters=2 num_trials=None use_batch_trials=False"}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:13] ax.modelbridge.dispatch_utils: calculated num_initialization_trials=5"}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:13] ax.modelbridge.dispatch_utils: num_completed_initialization_trials=0 num_remaining_initialization_trials=5"}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:13] ax.modelbridge.dispatch_utils: verbose, disable_progbar, and jit_compile are not yet supported when using choose_generation_strategy with ModularBoTorchModel, dropping these arguments."}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:13] ax.modelbridge.dispatch_utils: Using Bayesian Optimization generation strategy: GenerationStrategy(name='Sobol+BoTorch', steps=[Sobol for 5 trials, BoTorch for subsequent trials]). Iterations after 5 will take longer to generate due to model-fitting."}),"\n",(0,i.jsx)(o.A,{children:"GenerationStrategy(name='Sobol+BoTorch', steps=[Sobol for 5 trials, BoTorch for subsequent trials])"}),"\n",(0,i.jsx)(n.h3,{id:"1c-candidate-generation-from-a-generation-strategy",children:"1C. Candidate generation from a generation strategy"}),"\n",(0,i.jsxs)(n.p,{children:["While often used through Service or Loop API or other higher-order abstractions like the\nAx ",(0,i.jsx)(n.code,{children:"Scheduler"})," (where the generation strategy is used to fit models and produce\ncandidates from them under-the-hood), it's also possible to use the GS directly, in\nplace of a ",(0,i.jsx)(n.code,{children:"ModelBridge"})," instance. The interface of ",(0,i.jsx)(n.code,{children:"GenerationStrategy.gen"})," is the same\nas ",(0,i.jsx)(n.code,{children:"ModelBridge.gen"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"experiment = get_branin_experiment()\n"})}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:13] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,i.jsxs)(n.p,{children:["Note that it's important to ",(0,i.jsx)(n.strong,{children:"specify pending observations"})," to the call to ",(0,i.jsx)(n.code,{children:"gen"})," to\navoid getting the same points re-suggested. Without ",(0,i.jsx)(n.code,{children:"pending_observations"}),' argument, Ax\nmodels are not aware of points that should be excluded from generation. Points are\nconsidered "pending" when they belong to ',(0,i.jsx)(n.code,{children:"STAGED"}),", ",(0,i.jsx)(n.code,{children:"RUNNING"}),", or ",(0,i.jsx)(n.code,{children:"ABANDONED"}),' trials\n(with the latter included so model does not re-suggest points that are considered "bad"\nand should not be re-suggested).']}),"\n",(0,i.jsxs)(n.p,{children:["If the call to ",(0,i.jsx)(n.code,{children:"get_pending_obervation_features"})," becomes slow in your setup (since it\nperforms data-fetching etc.), you can opt for\n",(0,i.jsx)(n.code,{children:"get_pending_observation_features_based_on_trial_status"})," (also from\n",(0,i.jsx)(n.code,{children:"ax.modelbridge.modelbridge_utils"}),"), but note the limitations of that utility (detailed\nin its docstring)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"generator_run = gs.gen(\n    experiment=experiment,  # Ax `Experiment`, for which to generate new candidates\n    data=None,  # Ax `Data` to use for model training, optional.\n    n=1,  # Number of candidate arms to produce\n    pending_observations=get_pending_observation_features(\n        experiment\n    ),  # Points that should not be re-generated\n    # Any other kwargs specified will be passed through to `ModelBridge.gen` along with `GenerationStep.model_gen_kwargs`\n)\ngenerator_run\n"})}),"\n",(0,i.jsx)(o.A,{children:'/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning: Encountered exception in computing model fit quality: RandomModelBridge does not support prediction.\nwarn("Encountered exception in computing model fit quality: " + str(e))'}),"\n",(0,i.jsx)(o.A,{children:"GeneratorRun(1 arms, total weight 1.0)"}),"\n",(0,i.jsxs)(n.p,{children:["Then we can add the newly produced\n",(0,i.jsx)(n.a,{href:"https://ax.dev/docs/glossary.html#generator-run",children:(0,i.jsx)(n.code,{children:"GeneratorRun"})})," to the experiment as a\n",(0,i.jsxs)(n.a,{href:"https://ax.dev/docs/glossary.html#trial",children:[(0,i.jsx)(n.code,{children:"Trial"})," (or ",(0,i.jsx)(n.code,{children:"BatchTrial"})," if ",(0,i.jsx)(n.code,{children:"n"})," > 1)"]}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"trial = experiment.new_trial(generator_run)\ntrial\n"})}),"\n",(0,i.jsx)(o.A,{children:"Trial(experiment_name='branin_test_experiment', index=0, status=TrialStatus.CANDIDATE, arm=Arm(name='0_0', parameters={'x1': 0.4080374538898468, 'x2': 2.102140188217163}))"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Important notes on ",(0,i.jsx)(n.code,{children:"GenerationStrategy.gen"}),":"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["if ",(0,i.jsx)(n.code,{children:"data"})," argument above is not specified, GS will pull experiment data from cache via\n",(0,i.jsx)(n.code,{children:"experiment.lookup_data"}),","]}),"\n",(0,i.jsxs)(n.li,{children:["without specifying ",(0,i.jsx)(n.code,{children:"pending_observations"}),", the GS (and any model in Ax) could produce\nthe same candidate over and over, as without that argument the model is not 'aware'\nthat the candidate is part of a ",(0,i.jsx)(n.code,{children:"RUNNING"})," or ",(0,i.jsx)(n.code,{children:"ABANDONED"})," trial and should not be\nre-suggested again."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In cases where ",(0,i.jsx)(n.code,{children:"get_pending_observation_features"})," is too slow and the experiment\nconsists of 1-arm ",(0,i.jsx)(n.code,{children:"Trial"}),"-s only, it's possible to use\n",(0,i.jsx)(n.code,{children:"get_pending_observation_features_based_on_trial_status"})," instead (found in the same\nfile)."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that when using the Ax Service API, one of the arguments to ",(0,i.jsx)(n.code,{children:"AxClient"})," is\n",(0,i.jsx)(n.code,{children:"choose_generation_strategy_kwargs"}),"; specifying that argument is a convenient way to\ninfluence the choice of generation strategy in ",(0,i.jsx)(n.code,{children:"AxClient"})," without manually specifying a\nfull ",(0,i.jsx)(n.code,{children:"GenerationStrategy"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"2-generationstep-as-a-building-block-of-generation-strategy",children:["2. ",(0,i.jsx)(n.code,{children:"GenerationStep"})," as a building block of generation strategy"]}),"\n",(0,i.jsxs)(n.h3,{id:"2a-describing-a-model-to-use-in-a-given-generationstep",children:["2A. Describing a model to use in a given ",(0,i.jsx)(n.code,{children:"GenerationStep"})]}),"\n",(0,i.jsxs)(n.p,{children:["There are two ways of specifying a model for a generation step: via an entry in a\n",(0,i.jsx)(n.code,{children:"Models"})," enum or via a 'factory function' \u2013\u2013 a callable model constructor (e.g.\n",(0,i.jsx)(n.a,{href:"https://github.com/facebook/Ax/blob/0e454b71d5e07b183c0866855555b6a21ddd5da1/ax/modelbridge/factory.py#L154",children:(0,i.jsx)(n.code,{children:"get_GPEI"})}),"\nand other factory functions in the same file). Note that using the latter path, a\nfactory function, will prohibit ",(0,i.jsx)(n.code,{children:"GenerationStrategy"})," storage and is generally\ndiscouraged."]}),"\n",(0,i.jsxs)(n.h3,{id:"2b-other-generationstep-settings",children:["2B. Other ",(0,i.jsx)(n.code,{children:"GenerationStep"})," settings"]}),"\n",(0,i.jsx)(n.p,{children:"All of the available settings are described in the documentation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"print(GenerationStep.__doc__)\n"})}),"\n",(0,i.jsx)(o.A,{children:'One step in the generation strategy, corresponds to a single model.\n  Describes the model, how many trials will be generated with this model, what\n  minimum number of observations is required to proceed to the next model, etc.\n  NOTE: Model can be specified either from the model registry\n  (ax.modelbridge.registry.Models or using a callable model constructor. Only\n  models from the registry can be saved, and thus optimization can only be\n  resumed if interrupted when using models from the registry.\n  Args:\n      model: A member of Models enum or a callable returning an instance of\n          ModelBridge with an instantiated underlying Model. Refer to\n          ax/modelbridge/factory.py for examples of such callables.\n      num_trials: How many trials to generate with the model from this step.\n          If set to -1, trials will continue to be generated from this model\n          as long as generation_strategy.gen is called (available only for\n          the last of the generation steps).\n      min_trials_observed: How many trials must be completed before the\n          generation strategy can proceed to the next step. Defaults to 0.\n          If num_trials of a given step have been generated but min_trials_\n          observed have not been completed, a call to generation_strategy.gen\n          will fail with a DataRequiredError.\n      max_parallelism: How many trials generated in the course of this step are\n          allowed to be run (i.e. have trial.status of RUNNING) simultaneously.\n          If max_parallelism trials from this step are already running, a call\n          to generation_strategy.gen will fail with a MaxParallelismReached\n          Exception, indicating that more trials need to be completed before\n          generating and running next trials.\n      use_update: DEPRECATED.\n      enforce_num_trials: Whether to enforce that only num_trials are generated\n          from the given step. If False and num_trials have been generated, but\n          min_trials_observed have not been completed, generation_strategy.gen\n          will continue generating trials from the current step, exceeding num_\n          trials for it. Allows to avoid DataRequiredError, but delays\n          proceeding to next generation step.\n      model_kwargs: Dictionary of kwargs to pass into the model constructor on\n          instantiation. E.g. if model is Models.SOBOL, kwargs will be applied\n          as Models.SOBOL(**model_kwargs); if model is get_sobol, get_sobol(\n          **model_kwargs). NOTE: if generation strategy is interrupted and\n          resumed from a stored snapshot and its last used model has state saved on\n          its generator runs, model_kwargs is updated with the state dict of the\n          model, retrieved from the last generator run of this generation strategy.\n      model_gen_kwargs: Each call to generation_strategy.gen performs a call to the\n          step\'s model\'s gen under the hood; model_gen_kwargs will be passed to\n          the model\'s gen like so: model.gen(**model_gen_kwargs).\n      completion_criteria: List of TransitionCriterion. All is_met must evaluate\n          True for the GenerationStrategy to move on to the next Step\n      index: Index of this generation step, for use internally in Generation\n          Strategy. Do not assign as it will be reassigned when instantiating\n          GenerationStrategy with a list of its steps.\n      should_deduplicate: Whether to deduplicate the parameters of proposed arms\n          against those of previous arms via rejection sampling. If this is True,\n          the generation strategy will discard generator runs produced from the\n          generation step that has should_deduplicate=True if they contain arms\n          already present on the experiment and replace them with new generator runs.\n          If no generator run with entirely unique arms could be produced in 5\n          attempts, a GenerationStrategyRepeatedPoints error will be raised, as we\n          assume that the optimization converged when the model can no longer suggest\n          unique arms.\n      model_name: Optional name of the model. If not specified, defaults to the\n          model key of the model spec.\n  Note for developers: by "model" here we really mean an Ax ModelBridge object, which\n  contains an Ax Model under the hood. We call it "model" here to simplify and focus\n  on explaining the logic of GenerationStep and GenerationStrategy.\n  '}),"\n",(0,i.jsxs)(n.h2,{id:"2c-chaining-generationstep-s-together",children:["2C. Chaining ",(0,i.jsx)(n.code,{children:"GenerationStep"}),"-s together"]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"GenerationStrategy"})," moves from one step to another when:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"N=num_trials"})," generator runs were produced and attached as trials to the experiment\nAND"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"M=min_trials_observed"})," have been completed and have data."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Caveat: ",(0,i.jsx)(n.code,{children:"enforce_num_trials"})," setting"]}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"enforce_num_trials=True"})," for a given generation step, if 1) is reached but 2) is\nnot yet reached, the generation strategy will raise a ",(0,i.jsx)(n.code,{children:"DataRequiredError"}),", indicating\nthat more trials need to be completed before the next step."]}),"\n",(0,i.jsxs)(n.li,{children:["If ",(0,i.jsx)(n.code,{children:"enforce_num_trials=False"}),", the GS will continue producing generator runs from the\ncurrent step until 2) is reached."]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"2d-max_parallelism-enforcement",children:["2D. ",(0,i.jsx)(n.code,{children:"max_parallelism"})," enforcement"]}),"\n",(0,i.jsxs)(n.p,{children:["Generation strategy can restrict the number of trials that can be ran simultaneously (to\nencourage sequential optimization, which benefits Bayesian optimization performance).\nWhen the parallelism limit is reached, a call to ",(0,i.jsx)(n.code,{children:"GenerationStrategy.gen"})," will result in\na ",(0,i.jsx)(n.code,{children:"MaxParallelismReachedException"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The correct way to handle this exception:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Make sure that ",(0,i.jsx)(n.code,{children:"GenerationStep.max_parallelism"})," is configured correctly for all steps\nin your generation strategy (to disable it completely, configure\n",(0,i.jsx)(n.code,{children:"GenerationStep.max_parallelism=None"}),"),"]}),"\n",(0,i.jsxs)(n.li,{children:["When encountering the exception, wait to produce more generator runs until more trial\nevluations complete and log the trial completion via ",(0,i.jsx)(n.code,{children:"trial.mark_completed"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-sql-and-json-storage-of-a-generation-strategy",children:"3. SQL and JSON storage of a generation strategy"}),"\n",(0,i.jsxs)(n.p,{children:["When used through Service API or ",(0,i.jsx)(n.code,{children:"Scheduler"}),", generation strategy will be automatically\nstored to SQL or JSON via specifying ",(0,i.jsx)(n.code,{children:"DBSettings"})," to either ",(0,i.jsx)(n.code,{children:"AxClient"})," or ",(0,i.jsx)(n.code,{children:"Scheduler"}),"\n(details in respective tutorials in the ",(0,i.jsx)(n.a,{href:"https://ax.dev/tutorials/",children:'"Tutorials" page'}),").\nGeneration strategy can also be stored to SQL or JSON individually, as shown below."]}),"\n",(0,i.jsxs)(n.p,{children:["More detail on SQL and JSON storage in Ax generally can be\n",(0,i.jsx)(n.a,{href:"https://ax.dev/tutorials/building_blocks.html#9.-Save-to-JSON-or-SQL",children:'found in "Building Blocks of Ax" tutorial'}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"3a-sql-storage",children:"3A. SQL storage"}),"\n",(0,i.jsxs)(n.p,{children:["For SQL storage setup in Ax, read through the\n",(0,i.jsx)(n.a,{href:"https://ax.dev/docs/storage.html",children:'"Storage" documentation page'}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Note that unlike an Ax experiment, a generation strategy does not have a name or another\nunique identifier. Therefore, a generation strategy is stored in association with\nexperiment and can be retrieved by the associated experiment's name."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from ax.storage.sqa_store.db import (\n    create_all_tables,\n    get_engine,\n    init_engine_and_session_factory,\n)\nfrom ax.storage.sqa_store.load import (\n    load_experiment,\n    load_generation_strategy_by_experiment_name,\n)\nfrom ax.storage.sqa_store.save import save_experiment, save_generation_strategy\n\ninit_engine_and_session_factory(url="sqlite:///foo2.db")\n\nengine = get_engine()\ncreate_all_tables(engine)\n\nsave_experiment(experiment)\nsave_generation_strategy(gs)\n\nexperiment = load_experiment(experiment_name=experiment.name)\ngs = load_generation_strategy_by_experiment_name(\n    experiment_name=experiment.name,\n    experiment=experiment,  # Can optionally specify experiment object to avoid loading it from database twice\n)\ngs\n'})}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:14] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:14] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,i.jsx)(o.A,{children:"GenerationStrategy(name='Sobol+BoTorch', steps=[Sobol for 5 trials, BoTorch for subsequent trials])"}),"\n",(0,i.jsx)(n.h3,{id:"3b-json-storage",children:"3B. JSON storage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from ax.storage.json_store.decoder import object_from_json\nfrom ax.storage.json_store.encoder import object_to_json\n\ngs_json = object_to_json(gs)  # Can be written to a file or string via `json.dump` etc.\ngs = object_from_json(\n    gs_json\n)  # Decoded back from JSON (can be loaded from file, string via `json.load` etc.)\ngs\n"})}),"\n",(0,i.jsx)(o.A,{children:"[INFO 09-29 17:02:14] ax.core.experiment: The is_test flag has been set to True. This flag is meant purely for development and integration testing purposes. If you are running a live experiment, please set this flag to False"}),"\n",(0,i.jsx)(o.A,{children:"GenerationStrategy(name='Sobol+BoTorch', steps=[Sobol for 5 trials, BoTorch for subsequent trials])"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-advanced-considerations",children:"3. Advanced considerations"}),"\n",(0,i.jsxs)(n.p,{children:['Below is a list of important "gotchas" of using generation strategy (especially outside\nof the higher-level APIs like the Service API or the ',(0,i.jsx)(n.code,{children:"Scheduler"}),"):"]}),"\n",(0,i.jsxs)(n.h3,{id:"3a-generationstrategygen-produces-generatorrun-s-not-trials",children:["3A. ",(0,i.jsx)(n.code,{children:"GenerationStrategy.gen"})," produces ",(0,i.jsx)(n.code,{children:"GeneratorRun"}),"-s, not trials"]}),"\n",(0,i.jsxs)(n.p,{children:["Since ",(0,i.jsx)(n.code,{children:"GenerationStrategy.gen"})," mimics ",(0,i.jsx)(n.code,{children:"ModelBridge.gen"})," and allows for human-in-the-loop\nusage mode, a call to ",(0,i.jsx)(n.code,{children:"gen"})," produces a ",(0,i.jsx)(n.code,{children:"GeneratorRun"}),", which can then be added (or\naltered before addition or not added at all) to a ",(0,i.jsx)(n.code,{children:"Trial"})," or ",(0,i.jsx)(n.code,{children:"BatchTrial"})," on a given\nexperiment. So it's important to add the generator run to a trial, since otherwise it\nwill not be attached to the experiment on its own."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"generator_run = gs.gen(\n    experiment=experiment,\n    n=1,\n    pending_observations=get_pending_observation_features(experiment),\n)\nexperiment.new_trial(generator_run)\n"})}),"\n",(0,i.jsx)(o.A,{children:'/Users/cristianlara/Projects/Ax-1.0/ax/modelbridge/cross_validation.py:463: UserWarning: Encountered exception in computing model fit quality: RandomModelBridge does not support prediction.\nwarn("Encountered exception in computing model fit quality: " + str(e))'}),"\n",(0,i.jsx)(o.A,{children:"Trial(experiment_name='branin_test_experiment', index=1, status=TrialStatus.CANDIDATE, arm=Arm(name='1_0', parameters={'x1': 8.644633921794593, 'x2': 13.181734532117844}))"}),"\n",(0,i.jsxs)(n.h3,{id:"3b-model_kwargs-elements-that-do-not-define-serialization-logic-in-ax",children:["3B. ",(0,i.jsx)(n.code,{children:"model_kwargs"})," elements that do not define serialization logic in Ax"]}),"\n",(0,i.jsxs)(n.p,{children:["Note that passing objects that are not yet serializable in Ax (e.g. a BoTorch ",(0,i.jsx)(n.code,{children:"Prior"}),"\nobject) as part of ",(0,i.jsx)(n.code,{children:"GenerationStep.model_kwargs"})," or ",(0,i.jsx)(n.code,{children:"GenerationStep.model_gen_kwargs"}),"\nwill prevent correct generation strategy storage. If this becomes a problem, feel free\nto open an issue on our Github: ",(0,i.jsx)(n.a,{href:"https://github.com/facebook/Ax/issues",children:"https://github.com/facebook/Ax/issues"})," to get help with\nadding storage support for a given object."]}),"\n",(0,i.jsxs)(n.h3,{id:"3c-why-prefer-models-enum-entries-over-a-factory-function",children:["3C. Why prefer ",(0,i.jsx)(n.code,{children:"Models"})," enum entries over a factory function?"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Storage potential:"})," a call to, for example, ",(0,i.jsx)(n.code,{children:"Models.GPEI"})," captures all arguments\nto the model and model bridge and stores them on a generator runs, subsequently\nproduced by the model. Since the capturing logic is part of ",(0,i.jsx)(n.code,{children:"Models.__call__"}),"\nfunction, it is not present in a factory function. Furthermore, there is no safe and\nflexible way to serialize callables in Python."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Standardization:"})," While a 'factory function' is by default more flexible (accepts\nany specified inputs and produces a ",(0,i.jsx)(n.code,{children:"ModelBridge"})," with an underlying ",(0,i.jsx)(n.code,{children:"Model"})," instance\nbased on them), it is not standard in terms of its inputs. ",(0,i.jsx)(n.code,{children:"Models"})," introduces a\nstandardized interface, making it easy to adapt any example to one's specific case."]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"3d-how-can-i-request-more-modeling-setups-added-to-models-and-natively-supported-in-ax",children:["3D. How can I request more modeling setups added to ",(0,i.jsx)(n.code,{children:"Models"})," and natively supported in Ax?"]}),"\n",(0,i.jsxs)(n.p,{children:["Please open a ",(0,i.jsx)(n.a,{href:"https://github.com/facebook/Ax/issues",children:"Github issue"})," to request a new\nmodeling setup in Ax (or for any other questions or requests)."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},31023:(e,n,t)=>{t.d(n,{A:()=>m});t(96540);var i,r=new Uint8Array(16);function a(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(r)}const o=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const s=function(e){return"string"==typeof e&&o.test(e)};for(var l=[],d=0;d<256;++d)l.push((d+256).toString(16).substr(1));const c=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(l[e[n+0]]+l[e[n+1]]+l[e[n+2]]+l[e[n+3]]+"-"+l[e[n+4]]+l[e[n+5]]+"-"+l[e[n+6]]+l[e[n+7]]+"-"+l[e[n+8]]+l[e[n+9]]+"-"+l[e[n+10]]+l[e[n+11]]+l[e[n+12]]+l[e[n+13]]+l[e[n+14]]+l[e[n+15]]).toLowerCase();if(!s(t))throw TypeError("Stringified UUID is invalid");return t};const h=function(e,n,t){var i=(e=e||{}).random||(e.rng||a)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,n){t=t||0;for(var r=0;r<16;++r)n[t+r]=i[r];return n}return c(i)};var g=t(74848);const m=function(e){return(0,g.jsxs)("div",{style:{backgroundColor:"var(--ifm-pre-background)",marginBottom:"10px",borderRadius:"var(--ifm-global-radius)",overflow:"hidden",padding:"5px",font:"var(--ifm-code-font-size) / var(--ifm-pre-line-height) var(--ifm-font-family-monospace)"},children:[(0,g.jsx)("span",{style:{color:"red"},children:"Out: "}),(0,g.jsx)("pre",{style:{margin:"0px",backgroundColor:"inherit",padding:"8px"},children:e.children.split("\n").map((function(e){return(0,g.jsx)("p",{style:{marginBottom:"0px"},children:e},h())}))})]})}},38987:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var i=t(28774),r=t(43186),a=t(74848);const o=function(e){var n=e.githubUrl,t=e.colabUrl;return(0,a.jsxs)("div",{children:[(0,a.jsxs)(i.A,{to:n,className:"button button--outline button--primary margin--xs",children:["Open in GitHub",(0,a.jsx)(r.A,{})]}),(0,a.jsxs)(i.A,{to:t,className:"button button--outline button--primary margin--xs",children:["Run in Google Colab",(0,a.jsx)(r.A,{})]}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{})]})}},70290:(e,n,t)=>{t.d(n,{z:()=>l});var i=t(96540),r=t(53259),a=t.n(r),o=(t(92303),t(74848));var s=a()({loader:function(){return t.e(1236).then(t.bind(t,91236))},loading:function(e){return e.timedOut?(0,o.jsx)("blockquote",{children:"Error: Loading Plotly timed out."}):(0,o.jsx)("div",{children:"loading..."})},timeout:1e4}),l=i.memo((function(e){var n=e.data;return(0,o.jsx)("div",{className:"plotly-figure",style:{"overflow-x":"auto"},children:(0,o.jsx)(s,{data:n.data,layout:n.layout})})}))},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(96540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);