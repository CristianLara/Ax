"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[534],{5680:(e,n,r)=>{r.d(n,{xA:()=>m,yg:()=>u});var a=r(6540);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=a.createContext({}),l=function(e){var n=a.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},m=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),g=l(r),d=t,u=g["".concat(p,".").concat(d)]||g[d]||c[d]||o;return r?a.createElement(u,i(i({ref:n},m),{},{components:r})):a.createElement(u,i({ref:n},m))}));function u(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[g]="string"==typeof e?e:t,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2665:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>g});var a=r(8168),t=r(8587),o=(r(6540),r(5680)),i=["components"],s={id:"storage",title:"Storage"},p=void 0,l={unversionedId:"storage",id:"storage",title:"Storage",description:"Ax has extensible support for saving and loading experiments in both JSON and SQL. The former is a good option for users who prefer lightweight, transportable storage, and the latter is better suited to production applications requiring a centralized, high-performance database.",source:"@site/../docs/storage.md",sourceDirName:".",slug:"/storage",permalink:"/Ax/docs/storage",draft:!1,tags:[],version:"current",lastUpdatedBy:"Cristian Lara",lastUpdatedAt:1726794484,formattedLastUpdatedAt:"Sep 20, 2024",frontMatter:{id:"storage",title:"Storage"},sidebar:"docs",previous:{title:"Models",permalink:"/Ax/docs/models"}},m={},g=[{value:"JSON",id:"json",level:2},{value:"Saving",id:"saving",level:3},{value:"Updating",id:"updating",level:3},{value:"Loading",id:"loading",level:3},{value:"Customizing",id:"customizing",level:3},{value:"SQL",id:"sql",level:2},{value:"Saving",id:"saving-1",level:3},{value:"Updating",id:"updating-1",level:3},{value:"Loading",id:"loading-1",level:3},{value:"Customizing",id:"customizing-1",level:3}],c={toc:g},d="wrapper";function u(e){var n=e.components,r=(0,t.A)(e,i);return(0,o.yg)(d,(0,a.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Ax has extensible support for saving and loading experiments in both JSON and SQL. The former is a good option for users who prefer lightweight, transportable storage, and the latter is better suited to production applications requiring a centralized, high-performance database."),(0,o.yg)("h2",{id:"json"},"JSON"),(0,o.yg)("h3",{id:"saving"},"Saving"),(0,o.yg)("p",null,"To save an experiment to JSON, specify the filepath:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},'from ax import Experiment\nfrom ax.storage.json_store.save import save_experiment\n\nexperiment = Experiment(...)\nfilepath = "experiments/experiment.json"\nsave_experiment(experiment, filepath)\n')),(0,o.yg)("p",null,"The experiment (including attached data) will be serialized and saved to the specified file."),(0,o.yg)("h3",{id:"updating"},"Updating"),(0,o.yg)("p",null,"To update a JSON-backed experiment, re-save to the same file."),(0,o.yg)("h3",{id:"loading"},"Loading"),(0,o.yg)("p",null,"To load an experiment from JSON, specify the filepath again:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"from ax.storage.json_store.load import load_experiment\nexperiment = load_experiment(filepath)\n")),(0,o.yg)("h3",{id:"customizing"},"Customizing"),(0,o.yg)("p",null,"If you add a custom ",(0,o.yg)("a",{parentName:"p",href:"/api/core.html#module-ax.core.metric"},(0,o.yg)("inlineCode",{parentName:"a"},"Metric"))," or ",(0,o.yg)("a",{parentName:"p",href:"../api/core.html#ax.core.runner.Runner"},(0,o.yg)("inlineCode",{parentName:"a"},"Runner"))," and want to ensure it is saved to JSON properly, create a ",(0,o.yg)("a",{parentName:"p",href:"/api/storage.html#ax.storage.registry_bundle.RegistryBundle"},(0,o.yg)("inlineCode",{parentName:"a"},"RegistryBundle")),", which bundles together encoding and decoding logic for use in the various save/load functions as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},'from ax import Experiment, Metric, Runner, SearchSpace\nfrom ax.storage.json_store.load import load_experiment\nfrom ax.storage.json_store.save import save_experiment\nfrom ax.storage.registry_bundle import RegistryBundle\n\n# Minimal custom runner/metric.\nclass MyRunner(Runner):\n    def run():\n        pass\n\nclass MyMetric(Metric):\n    pass\n\n# Minimal experiment must have a search space, plus our custom classes.\nexperiment = Experiment(\n    search_space=SearchSpace(parameters=[]),\n    runner=MyRunner(),\n    tracking_metrics=[MyMetric(name="my_metric")]\n)\n\n# A RegistryBundle allows Ax to encode/decode the custom classes.\nbundle = RegistryBundle(\n    runner_clss={MyRunner: None}\n    metric_clss={MyMetric: None},\n)\n\nfilepath = "experiments/experiment.json"\nsave_experiment(experiment=experiment, filepath=filepath, encoder_registry=bundle.encoder_registry)\n\nloaded_experiment=load_experiment(filepath=filepath, decoder_registry=bundle.decoder_registry)\n')),(0,o.yg)("h2",{id:"sql"},"SQL"),(0,o.yg)("h3",{id:"saving-1"},"Saving"),(0,o.yg)("p",null,"To save an experiment to SQL, first initialize a session by passing a URL pointing to your database. Such a URL is typically composed of a dialect (e.g. sqlite, mysql, postgresql), optional driver (DBAPI used to connect to the database; e.g. psycopg2 for postgresql), username, password, hostname, and database name. A more detailed explanation how to generate a URL can be found in the ",(0,o.yg)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls"},"SQLAlchemy docs"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},'from ax.storage.sqa_store.db import init_engine_and_session_factory\n\n# url is of the form "dialect+driver://username:password@host:port/database"\ninit_engine_and_session_factory(url="postgresql+psycopg2://[USERNAME]:[PASSWORD]@localhost:[PORT]/[DATABASE]")\n')),(0,o.yg)("p",null,"Then create all tables:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"from ax.storage.sqa_store.db import get_engine, create_all_tables\n\nengine = get_engine()\ncreate_all_tables(engine)\n")),(0,o.yg)("p",null,"Then save your experiment:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"from ax import Experiment\nfrom ax.storage.sqa_store.save import save_experiment\n\nexperiment = Experiment(...)\nsave_experiment(experiment)\n")),(0,o.yg)("p",null,"The experiment (including attached data) will be saved to the corresponding tables."),(0,o.yg)("p",null,"Alternatively, you can pass a ",(0,o.yg)("a",{parentName:"p",href:"https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine.params.creator"},"creator function")," instead of a url to ",(0,o.yg)("inlineCode",{parentName:"p"},"init_engine_and_session_factory"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"from ax import Experiment\nfrom ax.storage.sqa_store.db import init_engine_and_session_factory\nfrom ax.storage.sqa_store.save import save_experiment\n\ninit_engine_and_session_factory(creator=creator)\nexperiment = Experiment(...)\nsave_experiment(experiment)\n")),(0,o.yg)("h3",{id:"updating-1"},"Updating"),(0,o.yg)("p",null,"To update a SQL-backed experiment, call ",(0,o.yg)("inlineCode",{parentName:"p"},"save_experiment(experiment)")," again. Ax will determine what updates to perform."),(0,o.yg)("h3",{id:"loading-1"},"Loading"),(0,o.yg)("p",null,"To load an experiment from SQL, specify the name:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"from ax import Experiment\nfrom ax.storage.sqa_store.db import init_engine_and_session_factory\nfrom ax.storage.sqa_store.load import load_experiment\n\ninit_engine_and_session_factory(url=dialect+driver://username:password@host:port/database)\nexperiment = load_experiment(experiment_name)\n")),(0,o.yg)("h3",{id:"customizing-1"},"Customizing"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Adding a new metric or runner:")),(0,o.yg)("p",null,"If you add a custom ",(0,o.yg)("a",{parentName:"p",href:"/api/core.html#module-ax.core.metric"},(0,o.yg)("inlineCode",{parentName:"a"},"Metric"))," or ",(0,o.yg)("a",{parentName:"p",href:"../api/core.html#ax.core.runner.Runner"},(0,o.yg)("inlineCode",{parentName:"a"},"Runner"))," and want to ensure it is saved to SQL properly, create a ",(0,o.yg)("a",{parentName:"p",href:"/api/storage.html#ax.storage.registry_bundle.RegistryBundle"},(0,o.yg)("inlineCode",{parentName:"a"},"RegistryBundle")),", which bundles together encoding and decoding logic for use in the various save/load functions as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},'from ax import Experiment, RangeParameter, ParameterType\nfrom ax.storage.sqa_store.load import load_experiment\nfrom ax.storage.sqa_store.save import save_experiment\nfrom ax.storage.sqa_store.sqa_config import SQAConfig\n\n# Minimal custom runner/metric.\nclass MyRunner(Runner):\n    def run():\n        pass\n\nclass MyMetric(Metric):\n    pass\n\n# Minimal experiment for SQA must have a name and a nonempty SearchSpace, plus our custom classes.\nexperiment = Experiment(\n    name="my_experiment",\n    search_space=SearchSpace(\n        parameters=[\n            RangeParameter(\n                lower=0,\n                upper=1,\n                name="my_parameter",\n                parameter_type=ParameterType.FLOAT\n            )\n        ]\n    ),\n    runner=MyRunner(),\n    tracking_metrics=[MyMetric(name="my_metric")],\n)\n\n# The RegistryBundle contains our custom classes.\nbundle = RegistryBundle(\n    metric_clss={MyMetric: None},\n    runner_clss={MyRunner: None}\n)\n\n# Abstract this into a SQAConfig as follows, to make loading/saving a bit simpler.\nsqa_config = SQAConfig(\n    json_encoder_registry=bundle.encoder_registry,\n    json_decoder_registry=bundle.decoder_registry,\n    metric_registry=bundle.metric_registry,\n    runner_registry=bundle.runner_registry,\n)\n\nsave_experiment(experiment, config=sqa_config)\n\nloaded_experiment = load_experiment(experiment_name="my_experiment", config=sqa_config)\n')),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Specifying experiment types:")),(0,o.yg)("p",null,"If you choose to add types to your experiments, create an Enum mapping experiment types to integer representations, pass this Enum to a custom instance of ",(0,o.yg)("inlineCode",{parentName:"p"},"SQAConfig"),", and then pass the config to ",(0,o.yg)("inlineCode",{parentName:"p"},"sqa_store.save"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"from ax import Experiment\nfrom ax.storage.sqa_store.save import save_experiment\nfrom ax.storage.sqa_store.sqa_config import SQAConfig\nfrom enum import Enum\n\nclass ExperimentType(Enum):\n    DEFAULT: 0\n\nconfig = SQAConfig(experiment_type_enum=ExperimentType)\nsave_experiment(experiment, config=config)\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Specifying generator run types:")),(0,o.yg)("p",null,"If you choose to add types to your generator runs (beyond the existing ",(0,o.yg)("inlineCode",{parentName:"p"},"status_quo")," type), create an enum mapping generator run types to integer representations, pass this enum to a custom instance of ",(0,o.yg)("inlineCode",{parentName:"p"},"SQAConfig"),", and then pass the config to ",(0,o.yg)("inlineCode",{parentName:"p"},"sqa_store.save"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"from ax import Experiment\nfrom ax.storage.sqa_store.save import save_experiment\nfrom ax.storage.sqa_store.sqa_config import SQAConfig\nfrom enum import Enum\n\nclass GeneratorRunType(Enum):\n    DEFAULT: 0\n    STATUS_QUO: 1\n\nconfig = SQAConfig(generator_run_type_enum=GeneratorRunType)\nsave_experiment(experiment, config=config)\n")))}u.isMDXComponent=!0}}]);